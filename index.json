[{"uri":"https://plotly.net/reference/plotly-net.html","title":"Plotly.NET","content":"Chart2D \nChart3D \nChartCarpet \nChartDomain \nChartMap \nChartPolar \nChartSmith \nChartTemplates \nChartTernary \nDefaults \nGenericChart \nGenericChartExtensions \nStyleParam \nARGB \nARGBConverter \nChart \nColor \nColorBar \nColorConverter \nColorKeyword \nConfig \nDisplayOptions \nFont \nFrame \nHTML \nLayout \nLine \nPlotlyJSReference \nTemplate \nTickFormatStop \nTitle \nTrace \nTrace2D \nTrace2DStyle \nTrace3D \nTrace3DStyle \nTraceCarpet \nTraceCarpetStyle \nTraceDomain \nTraceDomainStyle \nTraceGeo \nTraceGeoStyle \nTraceID \nTraceMapbox \nTraceMapboxStyle \nTracePolar \nTracePolarStyle \nTraceSmith \nTraceSmithStyle \nTraceStyle \nTraceTernary \nTraceTernaryStyle"},{"uri":"https://plotly.net/reference/plotly-net-configobjects.html","title":"Plotly.NET.ConfigObjects","content":"Edits \nToImageButtonOptions"},{"uri":"https://plotly.net/reference/plotly-net-imageexport.html","title":"Plotly.NET.ImageExport","content":"AsyncHelper \nChartExtensions \nGenericChartExtensions \nPuppeteerSharpRendererOptions \nExportEngine \nIGenericChartRenderer \nPuppeteerSharpRenderer"},{"uri":"https://plotly.net/reference/plotly-net-interactive.html","title":"Plotly.NET.Interactive","content":"Formatters \nFormatterKernelExtension"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects.html","title":"Plotly.NET.LayoutObjects","content":"ActiveSelection \nActiveShape \nAngularAxis \nAnnotation \nAspectRatio \nButton \nCamera \nCameraCenter \nCameraEye \nCameraProjection \nCameraUp \nColorAxis \nDefaultColorScales \nDomain \nGeo \nGeoProjection \nGeoProjectionRotation \nHoverlabel \nImaginaryAxis \nLayoutGrid \nLayoutImage \nLegend \nLinearAxis \nMapbox \nMapboxBounds \nMapboxCluster \nMapboxLayer \nMapboxLayerSymbol \nMargin \nMinor \nModeBar \nNewSelection \nNewShape \nPadding \nPolar \nRadialAxis \nRangeSelector \nRangeSlider \nRangebreak \nRealAxis \nScene \nSelection \nShape \nShapeLabel \nSlider \nSliderCurrentValue \nSliderStep \nSmith \nTernary \nTransition \nUniformText \nUpdateMenu \nUpdateMenuButton"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects.html","title":"Plotly.NET.TraceObjects","content":"Bins \nBox \nCapFill \nCaps \nContour \nContourProject \nContours \nCumulative \nDimension \nError \nFinanceMarker \nFontSelectionStyle \nFunnelConnector \nGradient \nIcicleLeaf \nIcicleRoot \nIcicleTiling \nIndicatorBar \nIndicatorDelta \nIndicatorGauge \nIndicatorNumber \nIndicatorStep \nIndicatorSymbol \nIndicatorThreshold \nLightPosition \nLighting \nLineSelectionStyle \nMarker \nMarkerSelectionStyle \nMeanLine \nPathbar \nPattern \nProjection \nProjectionDimension \nSankeyLinkColorscale \nSankeyLinks \nSankeyNodes \nSlices \nSlicesFill \nSpaceframe \nSplomDiagonal \nStockData \nStreamTubeStarts \nSunburstLeaf \nSunburstRoot \nSurface \nTableCells \nTableFill \nTableHeader \nTraceSelection \nTreemapLeaf \nTreemapRoot \nTreemapTiling \nWaterfallConnector"},{"uri":"https://plotly.net/reference/global.html","title":"global","content":"Globals"},{"uri":"https://plotly.net/reference/plotly-net-chart2d.html","title":"Chart2D","content":"Chart2D \n \nChart2D.Chart \nChart"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html","title":"Chart","content":"Chart \n \nChart.AnnotatedHeatmap \nAnnotatedHeatmap \nChart.AnnotatedHeatmap \nAnnotatedHeatmap \nChart.Area \nArea \nChart.Area \nArea \nChart.Bar \nBar \nChart.Bar \nBar \nChart.BoxPlot \nBoxPlot \nChart.BoxPlot \nBoxPlot \nChart.BoxPlot \nBoxPlot \nChart.Bubble \nBubble \nChart.Bubble \nBubble \nChart.Candlestick \nCandlestick \nChart.Candlestick \nCandlestick \nChart.Candlestick \nCandlestick \nChart.Column \nColumn \nChart.Column \nColumn \nChart.Contour \nContour \nChart.Funnel \nFunnel \nChart.Heatmap \nHeatmap \nChart.Heatmap \nHeatmap \nChart.Histogram \nHistogram \nChart.Histogram \nHistogram \nChart.Histogram2D \nHistogram2D \nChart.Histogram2D \nHistogram2D \nChart.Histogram2DContour \nHistogram2DContour \nChart.Histogram2DContour \nHistogram2DContour \nChart.Image \nImage \nChart.Image \nImage \nChart.Line \nLine \nChart.Line \nLine \nChart.OHLC \nOHLC \nChart.OHLC \nOHLC \nChart.OHLC \nOHLC \nChart.Point \nPoint \nChart.Point \nPoint \nChart.PointDensity \nPointDensity \nChart.Range \nRange \nChart.Range \nRange \nChart.Scatter \nScatter \nChart.Scatter \nScatter \nChart.Scatter \nScatter \nChart.Spline \nSpline \nChart.Spline \nSpline \nChart.SplineArea \nSplineArea \nChart.SplineArea \nSplineArea \nChart.Splom \nSplom \nChart.Splom \nSplom \nChart.StackedArea \nStackedArea \nChart.StackedArea \nStackedArea \nChart.StackedBar \nStackedBar \nChart.StackedBar \nStackedBar \nChart.StackedColumn \nStackedColumn \nChart.StackedColumn \nStackedColumn \nChart.StackedFunnel \nStackedFunnel \nChart.Violin \nViolin \nChart.Violin \nViolin \nChart.Violin \nViolin \nChart.Waterfall \nWaterfall \nChart.Waterfall \nWaterfall \nChart.Waterfall \nWaterfall"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#AnnotatedHeatmap","title":"Chart.AnnotatedHeatmap","content":"Chart.AnnotatedHeatmap \nAnnotatedHeatmap \n\n Creates a annotated heatmap.\n\n A heatmap is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions.\n\n The annotated heatmap additionally contains annotation text on each datum.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#AnnotatedHeatmap","title":"Chart.AnnotatedHeatmap","content":"Chart.AnnotatedHeatmap \nAnnotatedHeatmap \n\n Creates a annotated heatmap.\n\n A heatmap is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions.\n\n The annotated heatmap additionally contains annotation text on each datum.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Area","title":"Chart.Area","content":"Chart.Area \nArea \n Creates an Area chart, which uses a Line plotted between the given datums in a 2D space, additionally colouring the area between the line and the Y Axis."},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Area","title":"Chart.Area","content":"Chart.Area \nArea \n Creates an Area chart, which uses a Line plotted between the given datums in a 2D space, additionally colouring the area between the line and the Y Axis."},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Bar","title":"Chart.Bar","content":"Chart.Bar \nBar \n\n Creates a bar chart, with bars plotted horizontally\n\n A bar chart is a chart that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Bar","title":"Chart.Bar","content":"Chart.Bar \nBar \n\n Creates a bar chart, with bars plotted horizontally\n\n A bar chart is a chart that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#BoxPlot","title":"Chart.BoxPlot","content":"Chart.BoxPlot \nBoxPlot \n\n Visualizes the distribution of the input data as a box plot.\n\n A box plot is a method for graphically demonstrating the locality, spread and skewness groups of numerical data through their quartiles.\n The default style is based on the five number summary: minimum, first quartile, median, third quartile, and maximum.\n\n The sample data from which statistics are computed is set in \u0060x\u0060 for vertically spanning boxes and in \u0060y\u0060 for horizontally spanning boxes.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#BoxPlot","title":"Chart.BoxPlot","content":"Chart.BoxPlot \nBoxPlot \n\n Visualizes the distribution of the input data as a box plot.\n\n A box plot is a method for graphically demonstrating the locality, spread and skewness groups of numerical data through their quartiles.\n The default style is based on the five number summary: minimum, first quartile, median, third quartile, and maximum.\n\n The sample data from which statistics are computed is set in \u0060x\u0060 for vertically spanning boxes and in \u0060y\u0060 for horizontally spanning boxes.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#BoxPlot","title":"Chart.BoxPlot","content":"Chart.BoxPlot \nBoxPlot \n\n Visualizes the distribution of the input data as a box plot.\n\n A box plot is a method for graphically demonstrating the locality, spread and skewness groups of numerical data through their quartiles.\n The default style is based on the five number summary: minimum, first quartile, median, third quartile, and maximum.\n\n The sample data from which statistics are computed is set in \u0060x\u0060 for vertically spanning boxes and in \u0060y\u0060 for horizontally spanning boxes.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Bubble","title":"Chart.Bubble","content":"Chart.Bubble \nBubble \nCreates a bubble chart. A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes."},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Bubble","title":"Chart.Bubble","content":"Chart.Bubble \nBubble \nCreates a bubble chart. A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes."},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Candlestick","title":"Chart.Candlestick","content":"Chart.Candlestick \nCandlestick \n\n Creates a candlestick chart.\n\n The candlestick is a style of financial chart describing open, high, low and close for a given \u0060x\u0060 coordinate (most likely time). The boxes represent the spread between the \u0060open\u0060 and \u0060close\u0060 values and the lines represent the spread between the \u0060low\u0060 and \u0060high\u0060 values Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing candles are drawn in green whereas decreasing are drawn in red.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Candlestick","title":"Chart.Candlestick","content":"Chart.Candlestick \nCandlestick \n\n Creates a candlestick chart.\n\n The candlestick is a style of financial chart describing open, high, low and close for a given \u0060x\u0060 coordinate (most likely time). The boxes represent the spread between the \u0060open\u0060 and \u0060close\u0060 values and the lines represent the spread between the \u0060low\u0060 and \u0060high\u0060 values Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing candles are drawn in green whereas decreasing are drawn in red.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Candlestick","title":"Chart.Candlestick","content":"Chart.Candlestick \nCandlestick \n\n Creates a candlestick chart.\n\n The candlestick is a style of financial chart describing open, high, low and close for a given \u0060x\u0060 coordinate (most likely time). The boxes represent the spread between the \u0060open\u0060 and \u0060close\u0060 values and the lines represent the spread between the \u0060low\u0060 and \u0060high\u0060 values Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing candles are drawn in green whereas decreasing are drawn in red.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Column","title":"Chart.Column","content":"Chart.Column \nColumn \n\n Creates a column chart, with bars plotted vertically\n\n A column chart is a chart that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Column","title":"Chart.Column","content":"Chart.Column \nColumn \n\n Creates a column chart, with bars plotted vertically\n\n A column chart is a chart that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Contour","title":"Chart.Contour","content":"Chart.Contour \nContour \n\n Creates a 2D contour plot, which shows the contour lines of a 2D numerical array z, i.e. interpolated lines of isovalues of z.\n\n A contour line (also isoline, isopleth, or isarithm) of a function of two variables is a curve along which the function has a constant value, so that the curve joins points of equal value\n\n The data from which contour lines are computed is set in \u0060z\u0060. Data in \u0060z\u0060 must be a 2D array of numbers. Say that \u0060z\u0060 has N rows and M columns, then by default, these N rows correspond to N y coordinates (set in \u0060y\u0060 or auto-generated) and the M columns correspond to M x coordinates (set in \u0060x\u0060 or auto-generated). By setting \u0060transpose\u0060 to \u0022true\u0022, the above behavior is flipped.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Funnel","title":"Chart.Funnel","content":"Chart.Funnel \nFunnel \n\n Creates a Funnel chart.\n\n Funnel charts visualize stages in a process using length-encoded bars. This trace can be used to show data in either a part-to-whole representation wherein each item appears in a single stage, or in a \u0022drop-off\u0022 representation wherein each item appears in each stage it traversed. See also the \u0022funnelarea\u0022 trace type for a different approach to visualizing funnel data.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Heatmap","title":"Chart.Heatmap","content":"Chart.Heatmap \nHeatmap \n\n Creates a heatmap.\n\n A heatmap is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Heatmap","title":"Chart.Heatmap","content":"Chart.Heatmap \nHeatmap \n\n Creates a heatmap.\n\n A heatmap is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Histogram","title":"Chart.Histogram","content":"Chart.Histogram \nHistogram \n\n Visualizes the distribution of the input data as a histogram, automatically determining if the data is to be used for the x or y dimension based on the \u0060orientation\u0060 parameter.\n\n A histogram is an approximate representation of the distribution of numerical data. To construct a histogram, the first step is to \u0022bin\u0022  the range of values - that is, divide the entire range of values into a series of intervals - and then count how many values fall into each interval.\n The bins are usually specified as consecutive, non-overlapping intervals of a variable.\n\n Binning options are set \u0060xbins\u0060 and \u0060ybins\u0060 respectively if no aggregation data is provided.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Histogram","title":"Chart.Histogram","content":"Chart.Histogram \nHistogram \n\n Visualizes the distribution of the input data as a histogram.\n\n A histogram is an approximate representation of the distribution of numerical data. To construct a histogram, the first step is to \u0022bin\u0022  the range of values - that is, divide the entire range of values into a series of intervals - and then count how many values fall into each interval.\n The bins are usually specified as consecutive, non-overlapping intervals of a variable.\n\n The sample data from which statistics are computed is set in \u0060x\u0060 for vertically spanning histograms and in \u0060y\u0060 for horizontally spanning histograms. Binning options are set \u0060xbins\u0060 and \u0060ybins\u0060 respectively if no aggregation data is provided.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Histogram2D","title":"Chart.Histogram2D","content":"Chart.Histogram2D \nHistogram2D \n\n Visualizes the distribution of the 2-dimensional input data as 2D Histogram.\n\nThe sample data from which statistics are computed is set in \u0060x\u0060 and \u0060y\u0060 (where \u0060x\u0060 and \u0060y\u0060 represent marginal distributions, binning is set in \u0060xbins\u0060 and \u0060ybins\u0060 in this case) or \u0060z\u0060 (where \u0060z\u0060 represent the 2D distribution and binning set, binning is set by \u0060x\u0060 and \u0060y\u0060 in this case). The resulting distribution is visualized as a heatmap.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Histogram2D","title":"Chart.Histogram2D","content":"Chart.Histogram2D \nHistogram2D \n\n Visualizes the distribution of the 2-dimensional input data as 2D Histogram.\n\nThe sample data from which statistics are computed is set in \u0060x\u0060 and \u0060y\u0060 (where \u0060x\u0060 and \u0060y\u0060 represent marginal distributions, binning is set in \u0060xbins\u0060 and \u0060ybins\u0060 in this case) or \u0060z\u0060 (where \u0060z\u0060 represent the 2D distribution and binning set, binning is set by \u0060x\u0060 and \u0060y\u0060 in this case). The resulting distribution is visualized as a heatmap.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Histogram2DContour","title":"Chart.Histogram2DContour","content":"Chart.Histogram2DContour \nHistogram2DContour \n\n Computes a 2D histogram contour plot, also known as a density contour plot, which is a 2-dimensional generalization of a histogram which resembles a contour plot but is computed by grouping a set of points specified by their x and y coordinates into bins, and applying an aggregation function such as count or sum (if z is provided) to compute the value to be used to compute contours.\n\n The sample data from which statistics are computed is set in \u0060x\u0060 and \u0060y\u0060 (where \u0060x\u0060 and \u0060y\u0060 represent marginal distributions, binning is set in \u0060xbins\u0060 and \u0060ybins\u0060 in this case) or \u0060z\u0060 (where \u0060z\u0060 represent the 2D distribution and binning set, binning is set by \u0060x\u0060 and \u0060y\u0060 in this case). The resulting distribution is visualized as a contour plot.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Histogram2DContour","title":"Chart.Histogram2DContour","content":"Chart.Histogram2DContour \nHistogram2DContour \n\n Computes a 2D histogram contour plot, also known as a density contour plot, which is a 2-dimensional generalization of a histogram which resembles a contour plot but is computed by grouping a set of points specified by their x and y coordinates into bins, and applying an aggregation function such as count or sum (if z is provided) to compute the value to be used to compute contours.\n\n The sample data from which statistics are computed is set in \u0060x\u0060 and \u0060y\u0060 (where \u0060x\u0060 and \u0060y\u0060 represent marginal distributions, binning is set in \u0060xbins\u0060 and \u0060ybins\u0060 in this case) or \u0060z\u0060 (where \u0060z\u0060 represent the 2D distribution and binning set, binning is set by \u0060x\u0060 and \u0060y\u0060 in this case). The resulting distribution is visualized as a contour plot.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Image","title":"Chart.Image","content":"Chart.Image \nImage \n\n Display an image, i.e. data on a 2D regular raster. By default, when an image is displayed in a subplot, its y axis will be reversed (ie. \u0060autorange: \u0027reversed\u0027\u0060), constrained to the domain (ie. \u0060constrain: \u0027domain\u0027\u0060) and it will have the same scale as its x axis (ie. \u0060scaleanchor: \u0027x,\u0060) in order for pixels to be rendered as squares.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Image","title":"Chart.Image","content":"Chart.Image \nImage \n\n Display an image, i.e. data on a 2D regular raster. By default, when an image is displayed in a subplot, its y axis will be reversed (ie. \u0060autorange: \u0027reversed\u0027\u0060), constrained to the domain (ie. \u0060constrain: \u0027domain\u0027\u0060) and it will have the same scale as its x axis (ie. \u0060scaleanchor: \u0027x,\u0060) in order for pixels to be rendered as squares.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Line","title":"Chart.Line","content":"Chart.Line \nLine \nCreates a Line chart, which uses a Line plotted between the given datums in a 2D space to visualize typically an evolution of Y depending on X."},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Line","title":"Chart.Line","content":"Chart.Line \nLine \n Creates a Line chart, which uses a Line plotted between the given datums in a 2D space to visualize typically an evolution of Y depending on X."},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#OHLC","title":"Chart.OHLC","content":"Chart.OHLC \nOHLC \n\n Creates an OHLC chart.\n\n The ohlc (short for Open-High-Low-Close) is a style of financial chart describing open, high, low and close for a given \u0060x\u0060 coordinate (most likely time). The tip of the lines represent the \u0060low\u0060 and \u0060high\u0060 values and the horizontal segments represent the \u0060open\u0060 and \u0060close\u0060 values. Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing items are drawn in green whereas decreasing are drawn in red.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#OHLC","title":"Chart.OHLC","content":"Chart.OHLC \nOHLC \n\n Creates an OHLC chart.\n\n The ohlc (short for Open-High-Low-Close) is a style of financial chart describing open, high, low and close for a given \u0060x\u0060 coordinate (most likely time). The tip of the lines represent the \u0060low\u0060 and \u0060high\u0060 values and the horizontal segments represent the \u0060open\u0060 and \u0060close\u0060 values. Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing items are drawn in green whereas decreasing are drawn in red.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#OHLC","title":"Chart.OHLC","content":"Chart.OHLC \nOHLC \n\n Creates an OHLC chart.\n\n The ohlc (short for Open-High-Low-Close) is a style of financial chart describing open, high, low and close for a given \u0060x\u0060 coordinate (most likely time). The tip of the lines represent the \u0060low\u0060 and \u0060high\u0060 values and the horizontal segments represent the \u0060open\u0060 and \u0060close\u0060 values. Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing items are drawn in green whereas decreasing are drawn in red.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Point","title":"Chart.Point","content":"Chart.Point \nPoint \nCreates a Point chart, which uses Points in a 2D space to visualize data. "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Point","title":"Chart.Point","content":"Chart.Point \nPoint \n\n Creates a Point chart, which uses Points in a 2D space to visualize data.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#PointDensity","title":"Chart.PointDensity","content":"Chart.PointDensity \nPointDensity \n\n Creates a point density plot - a combination of a Scatter plot and Histogram2DContour.\n\n Additionally to plotting the (x,y) data as points on a 2D plane, a density contour plot is computed by grouping a set of points specified by their x and y coordinates into bins, and applying a count aggregation function to compute the value to be used to compute contours.\n The sample data from which statistics are computed is set in \u0060x\u0060 and \u0060y\u0060 (where \u0060x\u0060 and \u0060y\u0060 represent marginal distributions, binning is set in \u0060xbins\u0060 and \u0060ybins\u0060 in this case). The resulting distribution is visualized as a contour plot.\n\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Range","title":"Chart.Range","content":"Chart.Range \nRange \n\n Displays a range of data by plotting three Y values per data point (upper, mid, lower).\n\n The mid Y value usually resembles some kind of central tendency and the upper/lower Y values some kind of spread.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Range","title":"Chart.Range","content":"Chart.Range \nRange \n\n Displays a range of data by plotting three Y values per data point (upper, mid, lower).\n\n The mid Y value usually resembles some kind of central tendency and the upper/lower Y values some kind of spread.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Scatter","title":"Chart.Scatter","content":"Chart.Scatter \nScatter \n\n Creates a Scatter chart. Scatter charts are the basis of Point, Line, and Bubble Charts in Plotly, and can be customized as such. We also provide abstractions for those: Chart.Line, Chart.Point, Chart.Bubble\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Scatter","title":"Chart.Scatter","content":"Chart.Scatter \nScatter \n\n Creates a Scatter plot.\n\n Scatter charts are the basis of Point, Line, and Bubble Charts, and can be customized as such. We also provide abstractions for those: Chart.Line, Chart.Point, Chart.Bubble\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Scatter","title":"Chart.Scatter","content":"Chart.Scatter \nScatter \n\n Creates a Scatter plot.\n\n Scatter charts are the basis of Point, Line, and Bubble Charts, and can be customized as such. We also provide abstractions for those: Chart.Line, Chart.Point, Chart.Bubble\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Spline","title":"Chart.Spline","content":"Chart.Spline \nSpline \n\n Creates a Spline chart. A spline chart is a line chart in which data points are connected by smoothed curves: this modification is aimed to improve the design of a chart.\n Very similar to Line Plots, spline charts are typically used to visualize an evolution of Y depending on X.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Spline","title":"Chart.Spline","content":"Chart.Spline \nSpline \nCreates a Spline chart. A spline chart is a line chart in which data points are connected by smoothed curves: this modification is aimed to improve the design of a chart.\n Very similar to Line Plots, spline charts are typically used to visualize an evolution of Y depending on X. "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#SplineArea","title":"Chart.SplineArea","content":"Chart.SplineArea \nSplineArea \nCreates a Spline area chart, which uses a smoothed Line plotted between the given datums in a 2D space, additionally colouring the area between the line and the Y Axis."},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#SplineArea","title":"Chart.SplineArea","content":"Chart.SplineArea \nSplineArea \nCreates a Spline area chart, which uses a smoothed Line plotted between the given datums in a 2D space, additionally colouring the area between the line and the Y Axis."},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Splom","title":"Chart.Splom","content":"Chart.Splom \nSplom \n\n Creates a scatter plot matrix (SPLOM) from multiple input dimensions.\n\n Each splom \u0060dimensions\u0060 items correspond to a generated axis. Values for each of those dimensions are set in \u0060dimensions[i].values\u0060. Splom traces support all \u0060scattergl\u0060 marker style attributes. Specify \u0060layout.grid\u0060 attributes and/or layout x-axis and y-axis attributes for more control over the axis positioning and style.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Splom","title":"Chart.Splom","content":"Chart.Splom \nSplom \n\n Creates a scatter plot matrix (SPLOM) from multiple input dimensions.\n\n Each splom \u0060dimensions\u0060 items correspond to a generated axis. Values for each of those dimensions are set in \u0060dimensions[i].values\u0060. Splom traces support all \u0060scattergl\u0060 marker style attributes. Specify \u0060layout.grid\u0060 attributes and/or layout x-axis and y-axis attributes for more control over the axis positioning and style.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#StackedArea","title":"Chart.StackedArea","content":"Chart.StackedArea \nStackedArea \n Creates a stacked Area chart, which uses a Line plotted between the given datums in a 2D space, additionally colouring the area between the line and the Y Axis. Multiple Charts of this type are stacked on top of each others y dimensions"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#StackedArea","title":"Chart.StackedArea","content":"Chart.StackedArea \nStackedArea \n Creates a stacked Area chart, which uses a Line plotted between the given datums in a 2D space, additionally colouring the area between the line and the Y Axis. Multiple Charts of this type are stacked on top of each others y dimensions"},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#StackedBar","title":"Chart.StackedBar","content":"Chart.StackedBar \nStackedBar \n\n Creates a stacked bar chart, with bars plotted horizontally. Values with the same key are stacked on top of each other in the X dimension.\n To create this type of chart, combine multiple of these charts via \u0060Chart.combine\u0060.\n\n A bar chart is a chart that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#StackedBar","title":"Chart.StackedBar","content":"Chart.StackedBar \nStackedBar \n\n Creates a stacked bar chart, with bars plotted horizontally. Values with the same key are stacked on top of each other in the X dimension.\n To create this type of chart, combine multiple of these charts via \u0060Chart.combine\u0060.\n\n A bar chart is a chart that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#StackedColumn","title":"Chart.StackedColumn","content":"Chart.StackedColumn \nStackedColumn \n\n Creates a stacked column chart, with bars plotted vertically. Values with the same key are stacked on top of each other in the Y dimension.\n To create this type of chart, combine multiple of these charts via \u0060Chart.combine\u0060.\n\n A bar chart is a chart that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#StackedColumn","title":"Chart.StackedColumn","content":"Chart.StackedColumn \nStackedColumn \n\n Creates a stacked column chart, with bars plotted vertically. Values with the same key are stacked on top of each other in the Y dimension.\n To create this type of chart, combine multiple of these charts via \u0060Chart.combine\u0060.\n\n A bar chart is a chart that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#StackedFunnel","title":"Chart.StackedFunnel","content":"Chart.StackedFunnel \nStackedFunnel \n\n Creates a stacked Funnel chart, a variation of the funnel chart where multiple funnel bars of each stage are stacked on top of each other.\n To create this type of chart, combine multiple of these charts via \u0060Chart.combine\u0060.\n\n Funnel charts visualize stages in a process using length-encoded bars. This trace can be used to show data in either a part-to-whole representation wherein each item appears in a single stage, or in a \u0022drop-off\u0022 representation wherein each item appears in each stage it traversed. See also the \u0022funnelarea\u0022 trace type for a different approach to visualizing funnel data.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Violin","title":"Chart.Violin","content":"Chart.Violin \nViolin \n\n Visualizes the distribution of the input data as a violin plot.\n\n A violin plot is a method of plotting numeric data. It is similar to a box plot, except that they also show the probability density of the data at different values, usually smoothed by a kernel density estimator.\n\n In vertical (horizontal) violin plots, statistics are computed using \u0060y\u0060 (\u0060x\u0060) values. By supplying an \u0060x\u0060 (\u0060y\u0060) array, one violin per distinct x (y) value is drawn If no \u0060x\u0060 (\u0060y\u0060) array is provided, a single violin is drawn. That violin position is then positioned with with \u0060name\u0060 or with \u0060x0\u0060 (\u0060y0\u0060) if provided.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Violin","title":"Chart.Violin","content":"Chart.Violin \nViolin \n\n Visualizes the distribution of the input data as a violin plot.\n\n A violin plot is a method of plotting numeric data. It is similar to a box plot, except that they also show the probability density of the data at different values, usually smoothed by a kernel density estimator.\n\n In vertical (horizontal) violin plots, statistics are computed using \u0060y\u0060 (\u0060x\u0060) values. By supplying an \u0060x\u0060 (\u0060y\u0060) array, one violin per distinct x (y) value is drawn If no \u0060x\u0060 (\u0060y\u0060) array is provided, a single violin is drawn. That violin position is then positioned with with \u0060name\u0060 or with \u0060x0\u0060 (\u0060y0\u0060) if provided.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Violin","title":"Chart.Violin","content":"Chart.Violin \nViolin \n\n Visualizes the distribution of the input data as a violin plot.\n\n A violin plot is a method of plotting numeric data. It is similar to a box plot, except that they also show the probability density of the data at different values, usually smoothed by a kernel density estimator.\n\n In vertical (horizontal) violin plots, statistics are computed using \u0060y\u0060 (\u0060x\u0060) values. By supplying an \u0060x\u0060 (\u0060y\u0060) array, one violin per distinct x (y) value is drawn If no \u0060x\u0060 (\u0060y\u0060) array is provided, a single violin is drawn. That violin position is then positioned with with \u0060name\u0060 or with \u0060x0\u0060 (\u0060y0\u0060) if provided.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Waterfall","title":"Chart.Waterfall","content":"Chart.Waterfall \nWaterfall \n\n Creates a waterfall chart.\n\n Waterfall charts are special bar charts that help visualizing the cumulative effect of sequentially introduced positive or negative values\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Waterfall","title":"Chart.Waterfall","content":"Chart.Waterfall \nWaterfall \n\n Creates a waterfall chart.\n\n Waterfall charts are special bar charts that help visualizing the cumulative effect of sequentially introduced positive or negative values\n "},{"uri":"https://plotly.net/reference/plotly-net-chart2d-chart.html#Waterfall","title":"Chart.Waterfall","content":"Chart.Waterfall \nWaterfall \n\n Creates a waterfall chart.\n\n Waterfall charts are special bar charts that help visualizing the cumulative effect of sequentially introduced positive or negative values\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d.html","title":"Chart3D","content":"Chart3D \n \nChart3D.Chart \nChart"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html","title":"Chart","content":"Chart \n \nChart.Bubble3D \nBubble3D \nChart.Bubble3D \nBubble3D \nChart.Bubble3D \nBubble3D \nChart.Cone \nCone \nChart.Cone \nCone \nChart.Cone \nCone \nChart.IsoSurface \nIsoSurface \nChart.Line3D \nLine3D \nChart.Line3D \nLine3D \nChart.Mesh3D \nMesh3D \nChart.Mesh3D \nMesh3D \nChart.Point3D \nPoint3D \nChart.Point3D \nPoint3D \nChart.Scatter3D \nScatter3D \nChart.Scatter3D \nScatter3D \nChart.StreamTube \nStreamTube \nChart.StreamTube \nStreamTube \nChart.StreamTube \nStreamTube \nChart.Surface \nSurface \nChart.Volume \nVolume"},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Bubble3D","title":"Chart.Bubble3D","content":"Chart.Bubble3D \nBubble3D \n\n Creates a Bubble3D plot.\n\n Bubble3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension as points, additionally using the points size as a 4th dimension.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Bubble3D","title":"Chart.Bubble3D","content":"Chart.Bubble3D \nBubble3D \n\n Creates a Bubble3D plot.\n\n Bubble3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension as points, additionally using the points size as a 4th dimension.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Bubble3D","title":"Chart.Bubble3D","content":"Chart.Bubble3D \nBubble3D \n\n Creates a Bubble3D plot.\n\n Bubble3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension as points, additionally using the points size as a 4th dimension.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Cone","title":"Chart.Cone","content":"Chart.Cone \nCone \n\n Creates a cone plot, typically used to visualize vector fields.\n\n Specify a vector field using 6 1D arrays:\n\n 3 position arrays \u0060x\u0060, \u0060y\u0060 and \u0060z\u0060 and\n\n 3 vector component arrays \u0060u\u0060, \u0060v\u0060, \u0060w\u0060.\n\n The cones are drawn exactly at the positions given by \u0060x\u0060, \u0060y\u0060 and \u0060z\u0060.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Cone","title":"Chart.Cone","content":"Chart.Cone \nCone \n\n Creates a cone plot, typically used to visualize vector fields.\n\n Specify a vector field using 6 1D arrays:\n\n 3 position arrays \u0060x\u0060, \u0060y\u0060 and \u0060z\u0060 and\n\n 3 vector component arrays \u0060u\u0060, \u0060v\u0060, \u0060w\u0060.\n\n The cones are drawn exactly at the positions given by \u0060x\u0060, \u0060y\u0060 and \u0060z\u0060.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Cone","title":"Chart.Cone","content":"Chart.Cone \nCone \n\n Creates a cone plot, typically used to visualize vector fields.\n\n Specify a vector field using 6 1D arrays:\n\n 3 position arrays \u0060x\u0060, \u0060y\u0060 and \u0060z\u0060 and\n\n 3 vector component arrays \u0060u\u0060, \u0060v\u0060, \u0060w\u0060.\n\n The cones are drawn exactly at the positions given by \u0060x\u0060, \u0060y\u0060 and \u0060z\u0060.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#IsoSurface","title":"Chart.IsoSurface","content":"Chart.IsoSurface \nIsoSurface \n\n Creates a isosurface plot to visualize the volume of a 3D shape.\n\n An isosurface is a surface that represents points of a constant value (e.g. pressure, temperature, velocity, density) within a volume of space.\n\n Draws isosurfaces between iso-min and iso-max values with coordinates given by four 1-dimensional arrays containing the \u0060value\u0060, \u0060x\u0060, \u0060y\u0060 and \u0060z\u0060 of every vertex of a uniform or non-uniform 3-D grid.\n Horizontal or vertical slices, caps as well as spaceframe between iso-min and iso-max values could also be drawn using this trace.\n\n This plot is very similar to the \u0060Volume\u0060 plot. However it shows all surfaces with the same opacity.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Line3D","title":"Chart.Line3D","content":"Chart.Line3D \nLine3D \n\n Creates a Line3D plot.\n\n Line3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension as a line connecting the individual datums.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Line3D","title":"Chart.Line3D","content":"Chart.Line3D \nLine3D \n\n Creates a Line3D plot.\n\n Line3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension as a line connecting the individual datums.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Mesh3D","title":"Chart.Mesh3D","content":"Chart.Mesh3D \nMesh3D \n\n Visualizes a 3D mesh.\n\n Draws sets of triangles with coordinates given by three 1-dimensional arrays in \u0060x\u0060, \u0060y\u0060, \u0060z\u0060 and\n\n (1) a sets of \u0060i\u0060, \u0060j\u0060, \u0060k\u0060 indices or\n\n (2) Delaunay triangulation or\n\n (3) the Alpha-shape algorithm or\n\n (4) the Convex-hull algorithm\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Mesh3D","title":"Chart.Mesh3D","content":"Chart.Mesh3D \nMesh3D \n\n Visualizes a 3D mesh.\n\n Draws sets of triangles with coordinates given by three 1-dimensional arrays in \u0060x\u0060, \u0060y\u0060, \u0060z\u0060 and\n\n (1) a sets of \u0060i\u0060, \u0060j\u0060, \u0060k\u0060 indices or\n\n (2) Delaunay triangulation or\n\n (3) the Alpha-shape algorithm or\n\n (4) the Convex-hull algorithm\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Point3D","title":"Chart.Point3D","content":"Chart.Point3D \nPoint3D \n\n Creates a Point3D plot.\n\n Point3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension as points.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Point3D","title":"Chart.Point3D","content":"Chart.Point3D \nPoint3D \n\n Creates a Point3D plot.\n\n Point3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension as points.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Scatter3D","title":"Chart.Scatter3D","content":"Chart.Scatter3D \nScatter3D \n\n Creates a Scatter3D plot.\n\n In general, Scatter3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension.\n\n Scatter3D charts are the basis of Point3D, Line3D, and Bubble3D Charts, and can be customized as such. We also provide abstractions for those: Chart.Line3D, Chart.Point3D, Chart.Bubble3D\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Scatter3D","title":"Chart.Scatter3D","content":"Chart.Scatter3D \nScatter3D \n\n Creates a Scatter3D plot.\n\n In general, Scatter3D Plots plot three-dimensional data on 3 cartesian position scales in the X, Y, and Z dimension.\n\n Scatter3D charts are the basis of Point3D, Line3D, and Bubble3D Charts, and can be customized as such. We also provide abstractions for those: Chart.Line3D, Chart.Point3D, Chart.Bubble3D\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#StreamTube","title":"Chart.StreamTube","content":"Chart.StreamTube \nStreamTube \n\n Creates a streamtube plot, typically used to visualize flow in a vector field.\n\n Specify a vector field using 6 1D arrays of equal length:\n\n 3 position arrays \u0060x\u0060, \u0060y\u0060 and \u0060z\u0060 and\n\n 3 vector component arrays \u0060u\u0060, \u0060v\u0060, and \u0060w\u0060.\n\n By default, the tubes\u0027 starting positions will be cut from the vector field\u0027s x-z plane at its minimum y value.\n To specify your own starting position, use \u0060TubeStarts\u0060.\n The color is encoded by the norm of (u, v, w), and the local radius by the divergence of (u, v, w).\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#StreamTube","title":"Chart.StreamTube","content":"Chart.StreamTube \nStreamTube \n\n Creates a streamtube plot, typically used to visualize flow in a vector field.\n\n Specify a vector field using 6 1D arrays of equal length:\n\n 3 position arrays \u0060x\u0060, \u0060y\u0060 and \u0060z\u0060 and\n\n 3 vector component arrays \u0060u\u0060, \u0060v\u0060, and \u0060w\u0060.\n\n By default, the tubes\u0027 starting positions will be cut from the vector field\u0027s x-z plane at its minimum y value.\n To specify your own starting position, use \u0060TubeStarts\u0060.\n The color is encoded by the norm of (u, v, w), and the local radius by the divergence of (u, v, w).\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#StreamTube","title":"Chart.StreamTube","content":"Chart.StreamTube \nStreamTube \n\n Creates a streamtube plot, typically used to visualize flow in a vector field.\n\n Specify a vector field using 6 1D arrays of equal length:\n\n 3 position arrays \u0060x\u0060, \u0060y\u0060 and \u0060z\u0060 and\n\n 3 vector component arrays \u0060u\u0060, \u0060v\u0060, and \u0060w\u0060.\n\n By default, the tubes\u0027 starting positions will be cut from the vector field\u0027s x-z plane at its minimum y value.\n To specify your own starting position, use \u0060TubeStarts\u0060.\n The color is encoded by the norm of (u, v, w), and the local radius by the divergence of (u, v, w).\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Surface","title":"Chart.Surface","content":"Chart.Surface \nSurface \n\n Creates a surface plot.\n\n Surface plots plot a z value as a function of x and y, creating a three-dimensional surface.\n\n The data the describes the coordinates of the surface is set in \u0060z\u0060. Data in \u0060z\u0060 should be a 2D array.\n Coordinates in \u0060x\u0060 and \u0060y\u0060 can either be 1D arrays or 2D arrays (e.g. to graph parametric surfaces). If not provided in \u0060x\u0060 and \u0060y\u0060, the x and y coordinates are assumed to be linear starting at 0 with a unit step.\n The color scale corresponds to the \u0060z\u0060 values by default. For custom color scales, use \u0060surfacecolor\u0060 which should be a 2D array, where its bounds can be controlled using \u0060cmin\u0060 and \u0060cmax\u0060.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart3d-chart.html#Volume","title":"Chart.Volume","content":"Chart.Volume \nVolume \n\n Creates a volume plot to visualize the volume of a 3D shape.\n\n Draws volume trace between iso-min and iso-max values with coordinates given by four 1-dimensional arrays containing the \u0060value\u0060, \u0060x\u0060, \u0060y\u0060 and \u0060z\u0060 of every vertex of a uniform or non-uniform 3-D grid.\n Horizontal or vertical slices, caps as well as spaceframe between iso-min and iso-max values could also be drawn using this trace.\n\n This plot is very similar to the \u0060IsoSurface\u0060 plot. However, whereas isosurface plots show all surfaces with the same opacity, tweaking the opacityscale parameter of Volume plots results in a depth effect and better volume rendering.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet.html","title":"ChartCarpet","content":"ChartCarpet \n \nChartCarpet.Chart \nChart"},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html","title":"Chart","content":"Chart \n \nChart.BubbleCarpet \nBubbleCarpet \nChart.BubbleCarpet \nBubbleCarpet \nChart.Carpet \nCarpet \nChart.ContourCarpet \nContourCarpet \nChart.ContourCarpet \nContourCarpet \nChart.LineCarpet \nLineCarpet \nChart.LineCarpet \nLineCarpet \nChart.PointCarpet \nPointCarpet \nChart.PointCarpet \nPointCarpet \nChart.ScatterCarpet \nScatterCarpet \nChart.ScatterCarpet \nScatterCarpet \nChart.SplineCarpet \nSplineCarpet \nChart.SplineCarpet \nSplineCarpet"},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#BubbleCarpet","title":"Chart.BubbleCarpet","content":"Chart.BubbleCarpet \nBubbleCarpet \n\n Creates a bubble chart that lies on a specified carpet.\n\n In general, BubbleCarpet creates a bubble chart that uses the given carpet identifier as coordinate system.\n\n A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes.\n\n Whether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#BubbleCarpet","title":"Chart.BubbleCarpet","content":"Chart.BubbleCarpet \nBubbleCarpet \n\n Creates a bubble chart that lies on a specified carpet.\n\n In general, BubbleCarpet creates a bubble chart that uses the given carpet identifier as coordinate system.\n\n A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes.\n\n Whether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#Carpet","title":"Chart.Carpet","content":"Chart.Carpet \nCarpet \n\n Creates a carpet in a 2D coordinate system to be used as additional coordinate system in a carpet plot.\n\n A  carpet plot illustrates the interaction between two or more independent variables and one or more dependent variables in a two-dimensional plot.\n Besides the ability to incorporate more variables, another feature that distinguishes a carpet plot from an equivalent contour plot or 3D surface plot is that a carpet plot can be used to more accurately interpolate data points.\n A conventional carpet plot can capture the interaction of up to three independent variables and three dependent variables and still be easily read and interpolated.\n\n Three-variable carpet plot (cheater plot):\n\n A carpet plot with two independent variables and one dependent variable is often called a cheater plot for the use of a phantom \u0022cheater\u0022 axis instead of the horizontal axis. As a result of this missing axis, the values can be shifted horizontally such that the intersections line up vertically. This allows easy interpolation by having fixed horizontal intervals correspond to fixed intervals in both independent variables.\n\n Four-variable carpet plot (true carpet plot)\n\n Instead of using the horizontal axis to adjust the plot perspective and align carpet intersections vertically, the horizontal axis can be used to show the effects on an additional dependent variable.[5] In this case the perspective is fixed, and any overlapping cannot be adjusted. Because a true carpet plot represents two independent variables and two dependent variables simultaneously, there is no corresponding way to show the information on a conventional contour plot or 3D surface plot.\n\n (from https://en.wikipedia.org/wiki/Carpet_plot @ 1/11/2021)\n "},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#ContourCarpet","title":"Chart.ContourCarpet","content":"Chart.ContourCarpet \nContourCarpet \n\n Creates a contour chart that lies on a specified carpet.\n\n Plots contours on either the first carpet axis or the carpet axis with a matching \u0060carpet\u0060 attribute. Data \u0060z\u0060 is interpreted as matching that of the corresponding carpet axis.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#ContourCarpet","title":"Chart.ContourCarpet","content":"Chart.ContourCarpet \nContourCarpet \n\n Creates a contour chart that lies on a specified carpet.\n\n Plots contours on either the first carpet axis or the carpet axis with a matching \u0060carpet\u0060 attribute. Data \u0060z\u0060 is interpreted as matching that of the corresponding carpet axis.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#LineCarpet","title":"Chart.LineCarpet","content":"Chart.LineCarpet \nLineCarpet \n\n Creates a line plot that lies on a specified carpet.\n\n In general, LineCarpet creates a line plot that uses the given carpet identifier as coordinate system.\n\n Whether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#LineCarpet","title":"Chart.LineCarpet","content":"Chart.LineCarpet \nLineCarpet \n\n Creates a line plot that lies on a specified carpet.\n\n In general, LineCarpet creates a line plot that uses the given carpet identifier as coordinate system.\n\n Whether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#PointCarpet","title":"Chart.PointCarpet","content":"Chart.PointCarpet \nPointCarpet \n\n Creates a point plot that lies on a specified carpet.\n\n In general, PointCarpet creates a point plot that uses the given carpet identifier as coordinate system.\n\n Whether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#PointCarpet","title":"Chart.PointCarpet","content":"Chart.PointCarpet \nPointCarpet \n\n Creates a point plot that lies on a specified carpet.\n\n In general, PointCarpet creates a point plot that uses the given carpet identifier as coordinate system.\n\n Whether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#ScatterCarpet","title":"Chart.ScatterCarpet","content":"Chart.ScatterCarpet \nScatterCarpet \n\n Creates a scatter plot that lies on a specified carpet.\n\n In general, ScatterCarpet creates a plot that uses the given carpet identifier as coordinate system.\n\n Whether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.\n\n ScatterCarpet charts are the basis of PointCarpet, LineCarpet, and BubbleCarpet Charts, and can be customized as such. We also provide abstractions for those: Chart.LineCarpet, Chart.PointCarpet, Chart.BubbleCarpet\n "},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#ScatterCarpet","title":"Chart.ScatterCarpet","content":"Chart.ScatterCarpet \nScatterCarpet \n\n Creates a scatter plot that lies on a specified carpet.\n\n In general, ScatterCarpet creates a plot that uses the given carpet identifier as coordinate system.\n\n Whether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.\n\n ScatterCarpet charts are the basis of PointCarpet, LineCarpet, and BubbleCarpet Charts, and can be customized as such. We also provide abstractions for those: Chart.LineCarpet, Chart.PointCarpet, Chart.BubbleCarpet\n "},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#SplineCarpet","title":"Chart.SplineCarpet","content":"Chart.SplineCarpet \nSplineCarpet \n\n Creates a spline plot that lies on a specified carpet.\n\n In general, SplineCarpet creates a spline plot that uses the given carpet identifier as coordinate system.\n A spline chart is a line chart in which data points are connected by smoothed curves.\n\n Whether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartcarpet-chart.html#SplineCarpet","title":"Chart.SplineCarpet","content":"Chart.SplineCarpet \nSplineCarpet \n\n Creates a spline plot that lies on a specified carpet.\n\n In general, SplineCarpet creates a spline plot that uses the given carpet identifier as coordinate system.\n A spline chart is a line chart in which data points are connected by smoothed curves.\n\n Whether the resulting plot is a cheater or true carpet plot depends on the referenced carpet.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain.html","title":"ChartDomain","content":"ChartDomain \n \nChartDomain.Chart \nChart"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html","title":"Chart","content":"Chart \n \nChart.Doughnut \nDoughnut \nChart.Doughnut \nDoughnut \nChart.FunnelArea \nFunnelArea \nChart.FunnelArea \nFunnelArea \nChart.Icicle \nIcicle \nChart.Icicle \nIcicle \nChart.Indicator \nIndicator \nChart.ParallelCategories \nParallelCategories \nChart.ParallelCategories \nParallelCategories \nChart.ParallelCoord \nParallelCoord \nChart.ParallelCoord \nParallelCoord \nChart.Pie \nPie \nChart.Pie \nPie \nChart.Sankey \nSankey \nChart.Sankey \nSankey \nChart.Sunburst \nSunburst \nChart.Sunburst \nSunburst \nChart.Table \nTable \nChart.Table \nTable \nChart.Treemap \nTreemap \nChart.Treemap \nTreemap"},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Doughnut","title":"Chart.Doughnut","content":"Chart.Doughnut \nDoughnut \n\n Creates a doughnut chart.\n\n A doughnut chart is a variation of the pie chart that has a fraction cut from the center of the slices.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Doughnut","title":"Chart.Doughnut","content":"Chart.Doughnut \nDoughnut \n\n Creates a doughnut chart.\n\n A doughnut chart is a variation of the pie chart that has a fraction cut from the center of the slices.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#FunnelArea","title":"Chart.FunnelArea","content":"Chart.FunnelArea \nFunnelArea \n\n Creates a FunnelArea chart.\n\n FunnelArea charts visualize stages in a process using area-encoded trapezoids, which can be used to show data in a part-to-whole representation similar to a piechart,\n wherein each item appears in a single stage. See also the \u0022funnel\u0022 chart for a different approach to visualizing funnel data.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#FunnelArea","title":"Chart.FunnelArea","content":"Chart.FunnelArea \nFunnelArea \n\n Creates a FunnelArea chart.\n\n FunnelArea charts visualize stages in a process using area-encoded trapezoids, which can be used to show data in a part-to-whole representation similar to a piechart,\n wherein each item appears in a single stage. See also the \u0022funnel\u0022 chart for a different approach to visualizing funnel data.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Icicle","title":"Chart.Icicle","content":"Chart.Icicle \nIcicle \n\n Creates an icicle chart.\n\n Icicle charts visualize hierarchal data from leaves (and/or outer branches) towards root with rectangles.\n The icicle sectors are determined by the entries in \u0022labels\u0022 or \u0022ids\u0022 and in \u0022parents\u0022.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Icicle","title":"Chart.Icicle","content":"Chart.Icicle \nIcicle \n\n Creates an icicle chart.\n\n Icicle charts visualize hierarchal data from leaves (and/or outer branches) towards root with rectangles.\n The icicle sectors are determined by the entries in \u0022labels\u0022 or \u0022ids\u0022 and in \u0022parents\u0022.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Indicator","title":"Chart.Indicator","content":"Chart.Indicator \nIndicator \n\n Creates an Indicator chart.\n\n An indicator is used to visualize a single \u0060value\u0060 along with some contextual information such as \u0060steps\u0060 or a \u0060threshold\u0060, using a combination of three visual elements: a number, a delta, and/or a gauge.\n Deltas are taken with respect to a \u0060reference\u0060.\n Gauges can be either angular or bullet (aka linear) gauges.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#ParallelCategories","title":"Chart.ParallelCategories","content":"Chart.ParallelCategories \nParallelCategories \n\n Creates a parallel categories plot.\n\n The parallel categories diagram (also known as parallel sets or alluvial diagram) is a visualization of\n multi-dimensional categorical data sets. Each variable in the data set is represented by a column of rectangles,\n where each rectangle corresponds to a discrete value taken on by that variable.\n The relative heights of the rectangles reflect the relative frequency of occurrence of the corresponding value.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#ParallelCategories","title":"Chart.ParallelCategories","content":"Chart.ParallelCategories \nParallelCategories \n\n Creates a parallel categories plot.\n\n The parallel categories diagram (also known as parallel sets or alluvial diagram) is a visualization of\n multi-dimensional categorical data sets. Each variable in the data set is represented by a column of rectangles,\n where each rectangle corresponds to a discrete value taken on by that variable.\n The relative heights of the rectangles reflect the relative frequency of occurrence of the corresponding value.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#ParallelCoord","title":"Chart.ParallelCoord","content":"Chart.ParallelCoord \nParallelCoord \n\n Creates a parallel coordinates plot.\n\n Parallel coordinates are a common way of visualizing and analyzing high-dimensional datasets.\n\n To show a set of points in an n-dimensional space, a backdrop is drawn consisting of n parallel lines, typically vertical and equally spaced. A point in n-dimensional space is represented as a polyline with vertices on the parallel axes; the position of the vertex on the i-th axis corresponds to the i-th coordinate of the point.\n\n This visualization is closely related to time series visualization, except that it is applied to data where the axes do not correspond to points in time, and therefore do not have a natural order. Therefore, different axis arrangements may be of interest.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#ParallelCoord","title":"Chart.ParallelCoord","content":"Chart.ParallelCoord \nParallelCoord \n\n Creates a parallel coordinates plot.\n\n Parallel coordinates are a common way of visualizing and analyzing high-dimensional datasets.\n\n To show a set of points in an n-dimensional space, a backdrop is drawn consisting of n parallel lines, typically vertical and equally spaced. A point in n-dimensional space is represented as a polyline with vertices on the parallel axes; the position of the vertex on the i-th axis corresponds to the i-th coordinate of the point.\n\n This visualization is closely related to time series visualization, except that it is applied to data where the axes do not correspond to points in time, and therefore do not have a natural order. Therefore, different axis arrangements may be of interest.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Pie","title":"Chart.Pie","content":"Chart.Pie \nPie \n\n Creates a pie chart.\n\n A pie chart (or a circle chart) is a circular statistical graphic, which is divided into slices to illustrate numerical proportion.\n In a pie chart, the arc length of each slice (and consequently its central angle and area), is proportional to the quantity it represents.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Pie","title":"Chart.Pie","content":"Chart.Pie \nPie \n\n Creates a pie chart.\n\n A pie chart (or a circle chart) is a circular statistical graphic, which is divided into slices to illustrate numerical proportion.\n In a pie chart, the arc length of each slice (and consequently its central angle and area), is proportional to the quantity it represents.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Sankey","title":"Chart.Sankey","content":"Chart.Sankey \nSankey \n\n Creates a sankey diagram.\n\n A Sankey diagram is a flow diagram, in which the width of arrows is proportional to the flow quantity.\n\n Sankey diagrams visualize the contributions to a flow by defining source to represent the source node, target for the target node, value to set the flow volume, and label that shows the node name.        /// "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Sankey","title":"Chart.Sankey","content":"Chart.Sankey \nSankey \n\n Creates a sankey diagram.\n\n A Sankey diagram is a flow diagram, in which the width of arrows is proportional to the flow quantity.\n\n Sankey diagrams visualize the contributions to a flow by defining source to represent the source node, target for the target node, value to set the flow volume, and label that shows the node name.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Sunburst","title":"Chart.Sunburst","content":"Chart.Sunburst \nSunburst \n\n Creates a sunburst chart, which visualizes hierarchical data spanning outward radially from root to leaves.\n\n The hierarchy is defined by labels and parents attributes. The root starts from the center and children are added to the outer rings.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Sunburst","title":"Chart.Sunburst","content":"Chart.Sunburst \nSunburst \n\n Creates a sunburst chart, which visualizes hierarchical data spanning outward radially from root to leaves.\n\n The hierarchy is defined by labels and parents attributes. The root starts from the center and children are added to the outer rings.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Table","title":"Chart.Table","content":"Chart.Table \nTable \n\n Creates a table.\n\n The data are arranged in a grid of rows and columns. Most styling can be specified for columns, rows or individual cells. Table is using a row-major order per default, ie. the grid is represented as a vector of row vectors.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Table","title":"Chart.Table","content":"Chart.Table \nTable \n\n Creates a table.\n\n The data are arranged in a grid of rows and columns. Most styling can be specified for columns, rows or individual cells. Table is using a row-major order per default, ie. the grid is represented as a vector of row vectors.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Treemap","title":"Chart.Treemap","content":"Chart.Treemap \nTreemap \n\n Creates a treemap chart.\n Treemap charts visualize hierarchical data using nested rectangles.\n\n Same as Sunburst the hierarchy is defined by labels and parents attributes.\n Click on one sector to zoom in/out, which also displays a pathbar in the upper-left corner of your treemap. To zoom out you can use the path bar as well.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartdomain-chart.html#Treemap","title":"Chart.Treemap","content":"Chart.Treemap \nTreemap \n\n Creates a treemap chart.\n Treemap charts visualize hierarchical data using nested rectangles.\n\n Same as Sunburst the hierarchy is defined by labels and parents attributes.\n Click on one sector to zoom in/out, which also displays a pathbar in the upper-left corner of your treemap. To zoom out you can use the path bar as well.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap.html","title":"ChartMap","content":"ChartMap \n \nChartMap.Chart \nChart"},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html","title":"Chart","content":"Chart \n \nChart.BubbleGeo \nBubbleGeo \nChart.BubbleGeo \nBubbleGeo \nChart.BubbleGeo \nBubbleGeo \nChart.BubbleMapbox \nBubbleMapbox \nChart.BubbleMapbox \nBubbleMapbox \nChart.ChoroplethMap \nChoroplethMap \nChart.ChoroplethMapbox \nChoroplethMapbox \nChart.DensityMapbox \nDensityMapbox \nChart.DensityMapbox \nDensityMapbox \nChart.LineGeo \nLineGeo \nChart.LineGeo \nLineGeo \nChart.LineGeo \nLineGeo \nChart.LineMapbox \nLineMapbox \nChart.LineMapbox \nLineMapbox \nChart.PointGeo \nPointGeo \nChart.PointGeo \nPointGeo \nChart.PointGeo \nPointGeo \nChart.PointMapbox \nPointMapbox \nChart.PointMapbox \nPointMapbox \nChart.ScatterGeo \nScatterGeo \nChart.ScatterGeo \nScatterGeo \nChart.ScatterGeo \nScatterGeo \nChart.ScatterMapbox \nScatterMapbox \nChart.ScatterMapbox \nScatterMapbox"},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#BubbleGeo","title":"Chart.BubbleGeo","content":"Chart.BubbleGeo \nBubbleGeo \n\n Creates a BubbleGeo chart.\n\n In general, BubbleGeo Plots plot two-dimensional data as points using plotly\u0027s base geo map, additionally using the point size as a third dimension.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#BubbleGeo","title":"Chart.BubbleGeo","content":"Chart.BubbleGeo \nBubbleGeo \n\n Creates a BubbleGeo chart.\n\n In general, BubbleGeo Plots plot two-dimensional data as points using plotly\u0027s base geo map, additionally using the point size as a third dimension.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#BubbleGeo","title":"Chart.BubbleGeo","content":"Chart.BubbleGeo \nBubbleGeo \n\n Creates a BubbleGeo chart.\n\n In general, BubbleGeo Plots plot two-dimensional data as points using plotly\u0027s base geo map, additionally using the point size as a third dimension.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#BubbleMapbox","title":"Chart.BubbleMapbox","content":"Chart.BubbleMapbox \nBubbleMapbox \n\n Creates a BubbleMapbox chart, where data is visualized on a geographic map as points using mapbox, additionally using the point size as a third dimension.\n\n Customize the mapbox layers, style, etc. by using Chart.withMapbox.\n\n You might need a Mapbox token, which you can also configure with Chart.withMapbox.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#BubbleMapbox","title":"Chart.BubbleMapbox","content":"Chart.BubbleMapbox \nBubbleMapbox \n\n Creates a BubbleMapbox chart, where data is visualized on a geographic map as points using mapbox, additionally using the point size as a third dimension.\n\n Customize the mapbox layers, style, etc. by using Chart.withMapbox.\n\n You might need a Mapbox token, which you can also configure with Chart.withMapbox.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#ChoroplethMap","title":"Chart.ChoroplethMap","content":"Chart.ChoroplethMap \nChoroplethMap \n\n Creates a choropleth map using plotly\u0027s base geo map.\n\n A choropleth map is a type of thematic map in which a set of pre-defined areas is colored or patterned in proportion to a statistical variable that represents an aggregate summary of a geographic characteristic within each area, such as population density or per-capita income.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#ChoroplethMapbox","title":"Chart.ChoroplethMapbox","content":"Chart.ChoroplethMapbox \nChoroplethMapbox \n\n Creates a choropleth map using mapbox.\n\n A choropleth map is a type of thematic map in which a set of pre-defined areas is colored or patterned in proportion to a statistical variable that represents an aggregate summary of a geographic characteristic within each area, such as population density or per-capita income.\n\n GeoJSON features to be filled are set in \u0060geojson\u0060 The data that describes the choropleth value-to-color mapping is set in \u0060locations\u0060 and \u0060z\u0060.\n\n Customize the mapbox layers, style, etc. by using Chart.withMapbox.\n\n You might need a Mapbox token, which you can also configure with Chart.withMapbox.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#DensityMapbox","title":"Chart.DensityMapbox","content":"Chart.DensityMapbox \nDensityMapbox \n\n Creates a DensityMapbox Chart that draws a bivariate kernel density estimation with a Gaussian kernel from \u0060lon\u0060 and \u0060lat\u0060 coordinates and optional \u0060z\u0060 values using a colorscale.\n\n Customize the mapbox layers, style, etc. by using Chart.withMapbox.\n\n You might need a Mapbox token, which you can also configure with Chart.withMapbox.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#DensityMapbox","title":"Chart.DensityMapbox","content":"Chart.DensityMapbox \nDensityMapbox \n\n Creates a DensityMapbox Chart that draws a bivariate kernel density estimation with a Gaussian kernel from \u0060lon\u0060 and \u0060lat\u0060 coordinates and optional \u0060z\u0060 values using a colorscale.\n\n Customize the mapbox layers, style, etc. by using Chart.withMapbox.\n\n You might need a Mapbox token, which you can also configure with Chart.withMapbox.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#LineGeo","title":"Chart.LineGeo","content":"Chart.LineGeo \nLineGeo \n\n Creates a LineGeo chart.\n\n In general, LineGeo Plots plot two-dimensional data connected by lines using plotly\u0027s base geo map.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#LineGeo","title":"Chart.LineGeo","content":"Chart.LineGeo \nLineGeo \n\n Creates a LineGeo chart.\n\n In general, LineGeo Plots plot two-dimensional data connected by lines using plotly\u0027s base geo map.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#LineGeo","title":"Chart.LineGeo","content":"Chart.LineGeo \nLineGeo \n\n Creates a LineGeo chart.\n\n In general, LineGeo Plots plot two-dimensional data connected by lines using plotly\u0027s base geo map.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#LineMapbox","title":"Chart.LineMapbox","content":"Chart.LineMapbox \nLineMapbox \n\n Creates a LineMapbox chart, where data is visualized on a geographic map connected by a line using mapbox.\n\n Customize the mapbox layers, style, etc. by using Chart.withMapbox.\n\n You might need a Mapbox token, which you can also configure with Chart.withMapbox.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#LineMapbox","title":"Chart.LineMapbox","content":"Chart.LineMapbox \nLineMapbox \n\n Creates a LineMapbox chart, where data is visualized on a geographic map connected by a line using mapbox.\n\n Customize the mapbox layers, style, etc. by using Chart.withMapbox.\n\n You might need a Mapbox token, which you can also configure with Chart.withMapbox.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#PointGeo","title":"Chart.PointGeo","content":"Chart.PointGeo \nPointGeo \n\n Creates a PointGeo chart.\n\n In general, PointGeo Plots plot two-dimensional data as points using plotly\u0027s base geo map.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#PointGeo","title":"Chart.PointGeo","content":"Chart.PointGeo \nPointGeo \n\n Creates a PointGeo chart.\n\n In general, PointGeo Plots plot two-dimensional data as points using plotly\u0027s base geo map.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#PointGeo","title":"Chart.PointGeo","content":"Chart.PointGeo \nPointGeo \n\n Creates a PointGeo chart.\n\n In general, PointGeo Plots plot two-dimensional data as points using plotly\u0027s base geo map.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#PointMapbox","title":"Chart.PointMapbox","content":"Chart.PointMapbox \nPointMapbox \n\n Creates a PointMapbox chart, where data is visualized on a geographic map as points using mapbox.\n\n Customize the mapbox layers, style, etc. by using Chart.withMapbox.\n\n You might need a Mapbox token, which you can also configure with Chart.withMapbox.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#PointMapbox","title":"Chart.PointMapbox","content":"Chart.PointMapbox \nPointMapbox \n\n Creates a PointMapbox chart, where data is visualized on a geographic map as points using mapbox.\n\n Customize the mapbox layers, style, etc. by using Chart.withMapbox.\n\n You might need a Mapbox token, which you can also configure with Chart.withMapbox.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#ScatterGeo","title":"Chart.ScatterGeo","content":"Chart.ScatterGeo \nScatterGeo \n\n Creates a ScatterGeo chart, where data is visualized using plotly\u0027s base geo map.\n\n In general, ScatterGeo Plots plot two-dimensional data on a geo map via (lat,lon) coordinates.\n\n ScatterGeo charts are the basis of PointGeo, LineGeo, and BubbleGeo Charts, and can be customized as such. We also provide abstractions for those: Chart.PointGeo, Chart.LineGeo, Chart.BubbleGeo\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#ScatterGeo","title":"Chart.ScatterGeo","content":"Chart.ScatterGeo \nScatterGeo \n\n Creates a ScatterGeo chart, where data is visualized using plotly\u0027s base geo map.\n\n In general, ScatterGeo Plots plot two-dimensional data on a geo map via (lat,lon) coordinates.\n\n ScatterGeo charts are the basis of PointGeo, LineGeo, and BubbleGeo Charts, and can be customized as such. We also provide abstractions for those: Chart.PointGeo, Chart.LineGeo, Chart.BubbleGeo\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#ScatterGeo","title":"Chart.ScatterGeo","content":"Chart.ScatterGeo \nScatterGeo \n\n Creates a ScatterGeo chart, where data is visualized using plotly\u0027s base geo map.\n\n In general, ScatterGeo Plots plot two-dimensional data on a geo map via (lat,lon) coordinates.\n\n ScatterGeo charts are the basis of PointGeo, LineGeo, and BubbleGeo Charts, and can be customized as such. We also provide abstractions for those: Chart.PointGeo, Chart.LineGeo, Chart.BubbleGeo\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#ScatterMapbox","title":"Chart.ScatterMapbox","content":"Chart.ScatterMapbox \nScatterMapbox \n\n Creates a ScatterMapbox chart, where data is visualized on a geographic map using mapbox.\n\n Customize the mapbox layers, style, etc. by using Chart.withMapbox.\n\n You might need a Mapbox token, which you can also configure with Chart.withMapbox.\n\n ScatterMapbox charts are the basis of PointMapbox, LineMapbox, and BubbleMapbox Charts, and can be customized as such. We also provide abstractions for those: Chart.PointMapbox, Chart.LineMapbox, Chart.BubbleMapbox\n "},{"uri":"https://plotly.net/reference/plotly-net-chartmap-chart.html#ScatterMapbox","title":"Chart.ScatterMapbox","content":"Chart.ScatterMapbox \nScatterMapbox \n\n Creates a ScatterMapbox chart, where data is visualized on a geographic map using mapbox.\n\n Customize the mapbox layers, style, etc. by using Chart.withMapbox.\n\n You might need a Mapbox token, which you can also configure with Chart.withMapbox.\n\n ScatterMapbox charts are the basis of PointMapbox, LineMapbox, and BubbleMapbox Charts, and can be customized as such. We also provide abstractions for those: Chart.PointMapbox, Chart.LineMapbox, Chart.BubbleMapbox\n "},{"uri":"https://plotly.net/reference/plotly-net-chartpolar.html","title":"ChartPolar","content":"ChartPolar \n \nChartPolar.Chart \nChart"},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html","title":"Chart","content":"Chart \n \nChart.BarPolar \nBarPolar \nChart.BarPolar \nBarPolar \nChart.BubblePolar \nBubblePolar \nChart.BubblePolar \nBubblePolar \nChart.LinePolar \nLinePolar \nChart.LinePolar \nLinePolar \nChart.PointPolar \nPointPolar \nChart.PointPolar \nPointPolar \nChart.ScatterPolar \nScatterPolar \nChart.ScatterPolar \nScatterPolar \nChart.SplinePolar \nSplinePolar \nChart.SplinePolar \nSplinePolar"},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#BarPolar","title":"Chart.BarPolar","content":"Chart.BarPolar \nBarPolar \n\n Creates a polar bar chart.\n\n A polar bar chart is a chart that presents categorical data on a polar coordinate system with bars with radial height proportional to the values that they represent.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#BarPolar","title":"Chart.BarPolar","content":"Chart.BarPolar \nBarPolar \n\n Creates a polar bar chart.\n\n A polar bar chart is a chart that presents categorical data on a polar coordinate system with bars with radial height proportional to the values that they represent.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#BubblePolar","title":"Chart.BubblePolar","content":"Chart.BubblePolar \nBubblePolar \n\n Creates a polar bubble chart.\n\n BubblePolar Plots plot two-dimensional data on on a polar coordinate system comprised of angular and radial position scales, additionally using the points size as a 4th dimension.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#BubblePolar","title":"Chart.BubblePolar","content":"Chart.BubblePolar \nBubblePolar \n\n Creates a polar bubble chart.\n\n BubblePolar Plots plot two-dimensional data on on a polar coordinate system comprised of angular and radial position scales, additionally using the points size as a 4th dimension.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#LinePolar","title":"Chart.LinePolar","content":"Chart.LinePolar \nLinePolar \n\n Creates a polar line plot.\n\n LinePolar plots plot two-dimensional data on a polar coordinate system comprised of angular and radial position scales connected via a line.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#LinePolar","title":"Chart.LinePolar","content":"Chart.LinePolar \nLinePolar \n\n Creates a polar line plot.\n\n LinePolar plots plot two-dimensional data on a polar coordinate system comprised of angular and radial position scales connected via a line.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#PointPolar","title":"Chart.PointPolar","content":"Chart.PointPolar \nPointPolar \n\n Creates a polar point plot.\n\n PointPolar plots plot two-dimensional data on a polar coordinate system comprised of angular and radial position scales as points.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#PointPolar","title":"Chart.PointPolar","content":"Chart.PointPolar \nPointPolar \n\n Creates a polar point plot.\n\n PointPolar plots plot two-dimensional data on a polar coordinate system comprised of angular and radial position scales as points.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#ScatterPolar","title":"Chart.ScatterPolar","content":"Chart.ScatterPolar \nScatterPolar \n\n Creates a polar scatter plot.\n\n In general, ScatterPolar plots plot two-dimensional data on a polar coordinate system comprised of angular and radial position scales.\n\n ScatterPolar charts are the basis of PointPolar, LinePolar, SplinePolar, and BubblePolar Charts, and can be customized as such. We also provide abstractions for those: Chart.PointPolar, Chart.LinePolar, Chart.SplinePolar , Chart.BubblePolar\n "},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#ScatterPolar","title":"Chart.ScatterPolar","content":"Chart.ScatterPolar \nScatterPolar \n\n Creates a polar scatter plot.\n\n In general, ScatterPolar plots plot two-dimensional data on a polar coordinate system comprised of angular and radial position scales.\n\n ScatterPolar charts are the basis of PointPolar, LinePolar, SplinePolar, and BubblePolar Charts, and can be customized as such. We also provide abstractions for those: Chart.PointPolar, Chart.LinePolar, Chart.SplinePolar , Chart.BubblePolar\n "},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#SplinePolar","title":"Chart.SplinePolar","content":"Chart.SplinePolar \nSplinePolar \n\n Creates a polar spline plot.\n\n LinePolar plots plot two-dimensional data on a polar coordinate system comprised of angular and radial position scales connected via a smoothed line.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartpolar-chart.html#SplinePolar","title":"Chart.SplinePolar","content":"Chart.SplinePolar \nSplinePolar \n\n Creates a polar spline plot.\n\n LinePolar plots plot two-dimensional data on a polar coordinate system comprised of angular and radial position scales connected via a smoothed line.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartsmith.html","title":"ChartSmith","content":"ChartSmith \n \nChartSmith.Chart \nChart"},{"uri":"https://plotly.net/reference/plotly-net-chartsmith-chart.html","title":"Chart","content":"Chart \n \nChart.BubbleSmith \nBubbleSmith \nChart.BubbleSmith \nBubbleSmith \nChart.LineSmith \nLineSmith \nChart.LineSmith \nLineSmith \nChart.PointSmith \nPointSmith \nChart.PointSmith \nPointSmith \nChart.ScatterSmith \nScatterSmith \nChart.ScatterSmith \nScatterSmith"},{"uri":"https://plotly.net/reference/plotly-net-chartsmith-chart.html#BubbleSmith","title":"Chart.BubbleSmith","content":"Chart.BubbleSmith \nBubbleSmith \n\n Creates a Bubble plot on a smith coordinate system. A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes.\n\n In general, BubbleSmith charts plot complex numbers on a transformed two-dimensional Cartesian complex plane as points of varying sizes. Complex numbers with positive real parts map inside the circle. Those with negative real parts map outside the circle.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartsmith-chart.html#BubbleSmith","title":"Chart.BubbleSmith","content":"Chart.BubbleSmith \nBubbleSmith \n\n Creates a Bubble plot on a smith coordinate system. A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes.\n\n In general, BubbleSmith charts plot complex numbers on a transformed two-dimensional Cartesian complex plane as points of varying sizes. Complex numbers with positive real parts map inside the circle. Those with negative real parts map outside the circle.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartsmith-chart.html#LineSmith","title":"Chart.LineSmith","content":"Chart.LineSmith \nLineSmith \n\n Creates a Line plot on a smith coordinate system.\n\n In general, LineSmith charts plot complex numbers on a transformed two-dimensional Cartesian complex plane as datums connected by a line. Complex numbers with positive real parts map inside the circle. Those with negative real parts map outside the circle.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartsmith-chart.html#LineSmith","title":"Chart.LineSmith","content":"Chart.LineSmith \nLineSmith \n\n Creates a Line plot on a smith coordinate system.\n\n In general, LineSmith charts plot complex numbers on a transformed two-dimensional Cartesian complex plane as datums connected by a line. Complex numbers with positive real parts map inside the circle. Those with negative real parts map outside the circle.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartsmith-chart.html#PointSmith","title":"Chart.PointSmith","content":"Chart.PointSmith \nPointSmith \n\n Creates a Point plot on a smith coordinate system.\n\n In general, ScatterPoint charts plot complex numbers on a transformed two-dimensional Cartesian complex plane as points. Complex numbers with positive real parts map inside the circle. Those with negative real parts map outside the circle.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartsmith-chart.html#PointSmith","title":"Chart.PointSmith","content":"Chart.PointSmith \nPointSmith \n\n Creates a Point plot on a smith coordinate system.\n\n In general, ScatterPoint charts plot complex numbers on a transformed two-dimensional Cartesian complex plane as points. Complex numbers with positive real parts map inside the circle. Those with negative real parts map outside the circle.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartsmith-chart.html#ScatterSmith","title":"Chart.ScatterSmith","content":"Chart.ScatterSmith \nScatterSmith \n\n Creates a Scatter plot on a smith coordinate system.\n\n In general, ScatterSmith charts plot complex numbers on a transformed two-dimensional Cartesian complex plane. Complex numbers with positive real parts map inside the circle. Those with negative real parts map outside the circle.\n\n ScatterSmith charts are the basis of PointSmith, LineSmith, and BubbleSmith Charts, and can be customized as such. We also provide abstractions for those: Chart.LineSmith, Chart.PointSmith, Chart.BubbleSmith\n "},{"uri":"https://plotly.net/reference/plotly-net-chartsmith-chart.html#ScatterSmith","title":"Chart.ScatterSmith","content":"Chart.ScatterSmith \nScatterSmith \n\n Creates a Scatter plot on a smith coordinate system.\n\n In general, ScatterSmith charts plot complex numbers on a transformed two-dimensional Cartesian complex plane. Complex numbers with positive real parts map inside the circle. Those with negative real parts map outside the circle.\n\n ScatterSmith charts are the basis of PointSmith, LineSmith, and BubbleSmith Charts, and can be customized as such. We also provide abstractions for those: Chart.LineSmith, Chart.PointSmith, Chart.BubbleSmith\n "},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html","title":"ChartTemplates","content":"ChartTemplates \n \nChartTemplates.ColorWays \nColorWays \nChartTemplates.light \nlight \nChartTemplates.lightMirrored \nlightMirrored \nChartTemplates.dark \ndark \nChartTemplates.darkMirrored \ndarkMirrored \nChartTemplates.fslab \nfslab \nChartTemplates.transparent \ntransparent \nChartTemplates.transparentMirrored \ntransparentMirrored \nChartTemplates.plotly \nplotly"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#light","title":"ChartTemplates.light","content":"ChartTemplates.light \nlight \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#lightMirrored","title":"ChartTemplates.lightMirrored","content":"ChartTemplates.lightMirrored \nlightMirrored \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#dark","title":"ChartTemplates.dark","content":"ChartTemplates.dark \ndark \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#darkMirrored","title":"ChartTemplates.darkMirrored","content":"ChartTemplates.darkMirrored \ndarkMirrored \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#fslab","title":"ChartTemplates.fslab","content":"ChartTemplates.fslab \nfslab \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#transparent","title":"ChartTemplates.transparent","content":"ChartTemplates.transparent \ntransparent \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#transparentMirrored","title":"ChartTemplates.transparentMirrored","content":"ChartTemplates.transparentMirrored \ntransparentMirrored \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates.html#plotly","title":"ChartTemplates.plotly","content":"ChartTemplates.plotly \nplotly \n\n the default template, as used in the python lib by default.\n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates-colorways.html","title":"ColorWays","content":"ColorWays \n\n A colorway is an array of colors that contains the default colors for traces\n \nColorWays.plotly \nplotly \nColorWays.fslab \nfslab"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates-colorways.html#plotly","title":"ColorWays.plotly","content":"ColorWays.plotly \nplotly \n"},{"uri":"https://plotly.net/reference/plotly-net-charttemplates-colorways.html#fslab","title":"ColorWays.fslab","content":"ColorWays.fslab \nfslab \n"},{"uri":"https://plotly.net/reference/plotly-net-chartternary.html","title":"ChartTernary","content":"ChartTernary \n \nChartTernary.Chart \nChart"},{"uri":"https://plotly.net/reference/plotly-net-chartternary-chart.html","title":"Chart","content":"Chart \n \nChart.BubbleTernary \nBubbleTernary \nChart.BubbleTernary \nBubbleTernary \nChart.LineTernary \nLineTernary \nChart.LineTernary \nLineTernary \nChart.PointTernary \nPointTernary \nChart.PointTernary \nPointTernary \nChart.ScatterTernary \nScatterTernary \nChart.ScatterTernary \nScatterTernary"},{"uri":"https://plotly.net/reference/plotly-net-chartternary-chart.html#BubbleTernary","title":"Chart.BubbleTernary","content":"Chart.BubbleTernary \nBubbleTernary \n\n Creates a bubble plot on a ternary coordinate system\n\n A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes.\n\n In general, BubbleTernary creates a barycentric point plot on three variables which sum to a constant, graphically depicting the ratios of the three variables as positions in an equilateral triangle.\n A 4th data dimension is used to determine the size of the points.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartternary-chart.html#BubbleTernary","title":"Chart.BubbleTernary","content":"Chart.BubbleTernary \nBubbleTernary \n\n A bubble chart is a variation of the Point chart, where the data points get an additional scale by being rendered as bubbles of different sizes.\n\n In general, BubbleTernary creates a barycentric point plot on three variables which sum to a constant, graphically depicting the ratios of the three variables as positions in an equilateral triangle.\n A 4th data dimension is used to determine the size of the points.\n \u003C/summary\u003E\n \u003Cparam name=\u0022sizes\u0022\u003ESets the bubble size of the plotted data\u003C/param\u003E\n \u003Cparam name=\u0022A\u0022\u003ESets the quantity of component \u0060a\u0060 in each data point. If \u0060a\u0060, \u0060b\u0060, and \u0060c\u0060 are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match \u0060ternary\u0026lt;i\u0026gt;.sum\u0060.\u003C/param\u003E\n \u003Cparam name=\u0022B\u0022\u003ESets the quantity of component \u0060b\u0060 in each data point. If \u0060a\u0060, \u0060b\u0060, and \u0060c\u0060 are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match \u0060ternary\u0026lt;i\u0026gt;.sum\u0060.\u003C/param\u003E\n \u003Cparam name=\u0022C\u0022\u003ESets the quantity of component \u0060c\u0060 in each data point. If \u0060a\u0060, \u0060b\u0060, and \u0060c\u0060 are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match \u0060ternary\u0026lt;i\u0026gt;.sum\u0060.\u003C/param\u003E\n \u003Cparam name=\u0022Sum\u0022\u003EThe number each triplet should sum to, if only two of \u0060a\u0060, \u0060b\u0060, and \u0060c\u0060 are provided. This overrides \u0060ternary\u0026lt;i\u0026gt;.sum\u0060 to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use \u0060ternary\u0026lt;i\u0026gt;.sum\u0060\u003C/param\u003E\n \u003Cparam name=\u0022Name\u0022\u003ESets the trace name. The trace name appear as the legend item and on hover\u003C/param\u003E\n \u003Cparam name=\u0022ShowLegend\u0022\u003EDetermines whether or not an item corresponding to this trace is shown in the legend.\u003C/param\u003E\n \u003Cparam name=\u0022Opacity\u0022\u003ESets the opactity of the trace\u003C/param\u003E\n \u003Cparam name=\u0022MultiOpacity\u0022\u003ESets the opactity of individual datum markers\u003C/param\u003E\n \u003Cparam name=\u0022Text\u0022\u003ESets a text associated with each datum\u003C/param\u003E\n \u003Cparam name=\u0022MultiText\u0022\u003ESets individual text for each datum\u003C/param\u003E\n \u003Cparam name=\u0022TextPosition\u0022\u003ESets the position of text associated with each datum\u003C/param\u003E\n \u003Cparam name=\u0022MultiTextPosition\u0022\u003ESets the position of text associated with individual datum\u003C/param\u003E\n \u003Cparam name=\u0022MarkerColor\u0022\u003ESets the color of the marker\u003C/param\u003E\n \u003Cparam name=\u0022MarkerColorScale\u0022\u003ESets the colorscale of the marker\u003C/param\u003E\n \u003Cparam name=\u0022MarkerOutline\u0022\u003ESets the outline of the marker\u003C/param\u003E\n \u003Cparam name=\u0022MarkerSymbol\u0022\u003ESets the marker symbol for each datum\u003C/param\u003E\n \u003Cparam name=\u0022MultiMarkerSymbol\u0022\u003ESets the marker symbol for each individual datum\u003C/param\u003E\n \u003Cparam name=\u0022Marker\u0022\u003ESets the marker (use this for more finegrained control than the other marker-associated arguments)\u003C/param\u003E\n \u003Cparam name=\u0022LineColor\u0022\u003ESets the color of the line\u003C/param\u003E\n \u003Cparam name=\u0022LineColorScale\u0022\u003ESets the colorscale of the line\u003C/param\u003E\n \u003Cparam name=\u0022LineWidth\u0022\u003ESets the width of the line\u003C/param\u003E\n \u003Cparam name=\u0022LineDash\u0022\u003Esets the drawing style of the line\u003C/param\u003E\n \u003Cparam name=\u0022Line\u0022\u003ESets the line (use this for more finegrained control than the other line-associated arguments)\u003C/param\u003E\n \u003Cparam name=\u0022UseDefaults\u0022\u003EIf set to false, ignore the global default settings set in \u0060Defaults\u0060\u003C/param\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-chartternary-chart.html#LineTernary","title":"Chart.LineTernary","content":"Chart.LineTernary \nLineTernary \n\n Creates a line plot on a ternary coordinate system\n\n In general, LineTernary creates a barycentric line plot on three variables which sum to a constant, graphically depicting the ratios of the three variables as positions in an equilateral triangle.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartternary-chart.html#LineTernary","title":"Chart.LineTernary","content":"Chart.LineTernary \nLineTernary \n\n Creates a line plot on a ternary coordinate system\n\n In general, LineTernary creates a barycentric line plot on three variables which sum to a constant, graphically depicting the ratios of the three variables as positions in an equilateral triangle.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartternary-chart.html#PointTernary","title":"Chart.PointTernary","content":"Chart.PointTernary \nPointTernary \n\n Creates a point plot on a ternary coordinate system\n\n In general, PointTernary creates a barycentric point plot on three variables which sum to a constant, graphically depicting the ratios of the three variables as positions in an equilateral triangle.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartternary-chart.html#PointTernary","title":"Chart.PointTernary","content":"Chart.PointTernary \nPointTernary \n\n Creates a point plot on a ternary coordinate system\n\n In general, PointTernary creates a barycentric point plot on three variables which sum to a constant, graphically depicting the ratios of the three variables as positions in an equilateral triangle.\n "},{"uri":"https://plotly.net/reference/plotly-net-chartternary-chart.html#ScatterTernary","title":"Chart.ScatterTernary","content":"Chart.ScatterTernary \nScatterTernary \n\n Creates a Scatter plot on a ternary coordinate system\n\n In general, ScatterTernary creates a barycentric plot on three variables which sum to a constant, graphically depicting the ratios of the three variables as positions in an equilateral triangle.\n\n ScatterTernary charts are the basis of PointTernary, LineTernary, and BubbleTernary Charts, and can be customized as such. We also provide abstractions for those: Chart.LineTernary, Chart.PointTernary, Chart.BubbleTernary\n "},{"uri":"https://plotly.net/reference/plotly-net-chartternary-chart.html#ScatterTernary","title":"Chart.ScatterTernary","content":"Chart.ScatterTernary \nScatterTernary \n\n Creates a Scatter plot on a ternary coordinate system\n\n In general, ScatterTernary creates a barycentric plot on three variables which sum to a constant, graphically depicting the ratios of the three variables as positions in an equilateral triangle.\n\n ScatterTernary charts are the basis of PointTernary, LineTernary, and BubbleTernary Charts, and can be customized as such. We also provide abstractions for those: Chart.LineTernary, Chart.PointTernary, Chart.BubbleTernary\n "},{"uri":"https://plotly.net/reference/plotly-net-defaults.html","title":"Defaults","content":"Defaults \n\n Contains mutable global default values.\n\n Changing these values will apply the default values to all consecutive Chart generations.\n \nDefaults.DefaultWidth \nDefaultWidth \nDefaults.DefaultHeight \nDefaultHeight \nDefaults.DefaultConfig \nDefaultConfig \nDefaults.DefaultDisplayOptions \nDefaultDisplayOptions \nDefaults.DefaultTemplate \nDefaultTemplate \nDefaults.reset \nreset"},{"uri":"https://plotly.net/reference/plotly-net-defaults.html#DefaultWidth","title":"Defaults.DefaultWidth","content":"Defaults.DefaultWidth \nDefaultWidth \n\n The default width of the chart container in generated html files. Default: 600 (px)\n"},{"uri":"https://plotly.net/reference/plotly-net-defaults.html#DefaultHeight","title":"Defaults.DefaultHeight","content":"Defaults.DefaultHeight \nDefaultHeight \n\n The default height of the chart container in generated html files. Default: 600 (px)\n"},{"uri":"https://plotly.net/reference/plotly-net-defaults.html#DefaultConfig","title":"Defaults.DefaultConfig","content":"Defaults.DefaultConfig \nDefaultConfig \n\n The default chart config. Default: Config.init (Responsive = true)\n"},{"uri":"https://plotly.net/reference/plotly-net-defaults.html#DefaultDisplayOptions","title":"Defaults.DefaultDisplayOptions","content":"Defaults.DefaultDisplayOptions \nDefaultDisplayOptions \n"},{"uri":"https://plotly.net/reference/plotly-net-defaults.html#DefaultTemplate","title":"Defaults.DefaultTemplate","content":"Defaults.DefaultTemplate \nDefaultTemplate \n\n The default chart template. Default: ChartTemplates.plotly\n"},{"uri":"https://plotly.net/reference/plotly-net-defaults.html#reset","title":"Defaults.reset","content":"Defaults.reset \nreset \n\n reset global defaults to the initial values\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html","title":"GenericChart","content":"GenericChart \n\n Module to represent a GenericChart\n \nGenericChart.ChartDTO \nChartDTO \nGenericChart.Figure \nFigure \nGenericChart.GenericChart \nGenericChart \nGenericChart.toFigure \ntoFigure \nGenericChart.fromFigure \nfromFigure \nGenericChart.getTraces \ngetTraces \nGenericChart.getLayout \ngetLayout \nGenericChart.setLayout \nsetLayout \nGenericChart.addLayout \naddLayout \nGenericChart.tryGetLayoutSize \ntryGetLayoutSize \nGenericChart.getConfig \ngetConfig \nGenericChart.setConfig \nsetConfig \nGenericChart.addConfig \naddConfig \nGenericChart.getDisplayOptions \ngetDisplayOptions \nGenericChart.setDisplayOptions \nsetDisplayOptions \nGenericChart.addDisplayOptions \naddDisplayOptions \nGenericChart.combine \ncombine \nGenericChart.toChartHTMLNodes \ntoChartHTMLNodes \nGenericChart.toChartHTML \ntoChartHTML \nGenericChart.toEmbeddedHTML \ntoEmbeddedHTML \nGenericChart.toFigureJson \ntoFigureJson \nGenericChart.toJson \ntoJson \nGenericChart.mapTrace \nmapTrace \nGenericChart.mapiTrace \nmapiTrace \nGenericChart.countTrace \ncountTrace \nGenericChart.existsTrace \nexistsTrace \nGenericChart.ofTraceObject \nofTraceObject \nGenericChart.ofTraceObjects \nofTraceObjects \nGenericChart.mapLayout \nmapLayout \nGenericChart.mapConfig \nmapConfig \nGenericChart.mapDisplayOptions \nmapDisplayOptions \nGenericChart.getTraceID \ngetTraceID \nGenericChart.getTraceIDs \ngetTraceIDs"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toFigure","title":"GenericChart.toFigure","content":"GenericChart.toFigure \ntoFigure \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#fromFigure","title":"GenericChart.fromFigure","content":"GenericChart.fromFigure \nfromFigure \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#getTraces","title":"GenericChart.getTraces","content":"GenericChart.getTraces \ngetTraces \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#getLayout","title":"GenericChart.getLayout","content":"GenericChart.getLayout \ngetLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#setLayout","title":"GenericChart.setLayout","content":"GenericChart.setLayout \nsetLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#addLayout","title":"GenericChart.addLayout","content":"GenericChart.addLayout \naddLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#tryGetLayoutSize","title":"GenericChart.tryGetLayoutSize","content":"GenericChart.tryGetLayoutSize \ntryGetLayoutSize \n\n Returns a tuple containing the width and height of a GenericChart\u0027s layout if the property is set, otherwise returns None\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#getConfig","title":"GenericChart.getConfig","content":"GenericChart.getConfig \ngetConfig \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#setConfig","title":"GenericChart.setConfig","content":"GenericChart.setConfig \nsetConfig \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#addConfig","title":"GenericChart.addConfig","content":"GenericChart.addConfig \naddConfig \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#getDisplayOptions","title":"GenericChart.getDisplayOptions","content":"GenericChart.getDisplayOptions \ngetDisplayOptions \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#setDisplayOptions","title":"GenericChart.setDisplayOptions","content":"GenericChart.setDisplayOptions \nsetDisplayOptions \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#addDisplayOptions","title":"GenericChart.addDisplayOptions","content":"GenericChart.addDisplayOptions \naddDisplayOptions \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#combine","title":"GenericChart.combine","content":"GenericChart.combine \ncombine \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toChartHTMLNodes","title":"GenericChart.toChartHTMLNodes","content":"GenericChart.toChartHTMLNodes \ntoChartHTMLNodes \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toChartHTML","title":"GenericChart.toChartHTML","content":"GenericChart.toChartHTML \ntoChartHTML \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toEmbeddedHTML","title":"GenericChart.toEmbeddedHTML","content":"GenericChart.toEmbeddedHTML \ntoEmbeddedHTML \n\n Converts a GenericChart to it HTML representation and embeds it into a html page.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toFigureJson","title":"GenericChart.toFigureJson","content":"GenericChart.toFigureJson \ntoFigureJson \n\n Serializes a GenericChart to a JSON string, representing the data and layout of the GenericChart:\n\n {\n\n \u0022data\u0022: [ -serialized traces array- ] ,\n\n \u0022layout\u0022: { -serialized layout object- } ,\n\n \u0022frames\u0022: [ -empty array, not supported yet, legacy stuff- ]\n\n }\n "},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#toJson","title":"GenericChart.toJson","content":"GenericChart.toJson \ntoJson \n\n Serializes a GenericChart to a JSON string, representing the data, layout and config of the GenericChart:\n\n {\n\n \u0022data\u0022: [ -serialized traces array- ] ,\n\n \u0022layout\u0022: { -serialized layout object- } ,\n\n \u0022config\u0022: { -serialized config object- }\n\n }\n "},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#mapTrace","title":"GenericChart.mapTrace","content":"GenericChart.mapTrace \nmapTrace \n\n Creates a new GenericChart whose traces are the results of applying the given function to each of the trace of the GenericChart.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#mapiTrace","title":"GenericChart.mapiTrace","content":"GenericChart.mapiTrace \nmapiTrace \n\n Creates a new GenericChart whose traces are the results of applying the given function to each of the trace of the GenericChart.\n The integer index passed to the function indicates the index (from 0) of element being transformed.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#countTrace","title":"GenericChart.countTrace","content":"GenericChart.countTrace \ncountTrace \n\n Returns the number of traces within the GenericChart\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#existsTrace","title":"GenericChart.existsTrace","content":"GenericChart.existsTrace \nexistsTrace \n\n Returns true if the given chart contains a trace for which the predicate function returns true\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#ofTraceObject","title":"GenericChart.ofTraceObject","content":"GenericChart.ofTraceObject \nofTraceObject \n\n Converts from a trace object and a layout object into GenericChart. If useDefaults = true, also sets the default Chart properties found in \u0060Defaults\u0060\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#ofTraceObjects","title":"GenericChart.ofTraceObjects","content":"GenericChart.ofTraceObjects \nofTraceObjects \n\n Converts from a list of trace objects and a layout object into GenericChart. If useDefaults = true, also sets the default Chart properties found in \u0060Defaults\u0060\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#mapLayout","title":"GenericChart.mapLayout","content":"GenericChart.mapLayout \nmapLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#mapConfig","title":"GenericChart.mapConfig","content":"GenericChart.mapConfig \nmapConfig \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#mapDisplayOptions","title":"GenericChart.mapDisplayOptions","content":"GenericChart.mapDisplayOptions \nmapDisplayOptions \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#getTraceID","title":"GenericChart.getTraceID","content":"GenericChart.getTraceID \ngetTraceID \n\n returns a single TraceID (when all traces of the charts are of the same type), or traceID.Multi if the chart contains traces of multiple different types\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart.html#getTraceIDs","title":"GenericChart.getTraceIDs","content":"GenericChart.getTraceIDs \ngetTraceIDs \n\n returns a list of TraceIDs representing the types of all traces contained in the chart.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-chartdto.html","title":"ChartDTO","content":"ChartDTO \n \nChartDTO.create \ncreate \nChartDTO.Data \nData \nChartDTO.Layout \nLayout \nChartDTO.Config \nConfig"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-chartdto.html#create","title":"ChartDTO.create","content":"ChartDTO.create \ncreate \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-chartdto.html#Data","title":"ChartDTO.Data","content":"ChartDTO.Data \nData \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-chartdto.html#Layout","title":"ChartDTO.Layout","content":"ChartDTO.Layout \nLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-chartdto.html#Config","title":"ChartDTO.Config","content":"ChartDTO.Config \nConfig \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-figure.html","title":"Figure","content":"Figure \n \nFigure.create \ncreate \nFigure.Data \nData \nFigure.Layout \nLayout \nFigure.Frames \nFrames"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-figure.html#create","title":"Figure.create","content":"Figure.create \ncreate \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-figure.html#Data","title":"Figure.Data","content":"Figure.Data \nData \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-figure.html#Layout","title":"Figure.Layout","content":"Figure.Layout \nLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-figure.html#Frames","title":"Figure.Frames","content":"Figure.Frames \nFrames \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-genericchart.html","title":"GenericChart","content":"GenericChart \n \nGenericChart.Chart \nChart \nGenericChart.MultiChart \nMultiChart"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-genericchart.html#Chart","title":"GenericChart.Chart","content":"GenericChart.Chart \nChart \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchart-genericchart.html#MultiChart","title":"GenericChart.MultiChart","content":"GenericChart.MultiChart \nMultiChart \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html","title":"GenericChartExtensions","content":"GenericChartExtensions \n\nExtension methods for providing a Plotly.NET fluent interface pattern for C#\n \nGenericChartExtensions.WithTraceInfo \nWithTraceInfo \nGenericChartExtensions.WithAxisAnchor \nWithAxisAnchor \nGenericChartExtensions.WithMarker \nWithMarker \nGenericChartExtensions.WithMarkerStyle \nWithMarkerStyle \nGenericChartExtensions.WithLine \nWithLine \nGenericChartExtensions.WithLineStyle \nWithLineStyle \nGenericChartExtensions.WithXError \nWithXError \nGenericChartExtensions.WithXErrorStyle \nWithXErrorStyle \nGenericChartExtensions.WithYError \nWithYError \nGenericChartExtensions.WithYErrorStyle \nWithYErrorStyle \nGenericChartExtensions.WithZError \nWithZError \nGenericChartExtensions.WithZErrorStyle \nWithZErrorStyle \nGenericChartExtensions.WithXAxis \nWithXAxis \nGenericChartExtensions.WithXAxisStyle \nWithXAxisStyle \nGenericChartExtensions.WithXAxisRangeSlider \nWithXAxisRangeSlider \nGenericChartExtensions.WithYAxis \nWithYAxis \nGenericChartExtensions.WithYAxisStyle \nWithYAxisStyle \nGenericChartExtensions.WithZAxis \nWithZAxis \nGenericChartExtensions.WithZAxisStyle \nWithZAxisStyle \nGenericChartExtensions.withColorBar \nwithColorBar \nGenericChartExtensions.WithColorBarStyle \nWithColorBarStyle \nGenericChartExtensions.WithLayout \nWithLayout \nGenericChartExtensions.WithLayoutStyle \nWithLayoutStyle \nGenericChartExtensions.WithLayoutGrid \nWithLayoutGrid \nGenericChartExtensions.WithLegend \nWithLegend \nGenericChartExtensions.WithGeo \nWithGeo \nGenericChartExtensions.withMapbox \nwithMapbox \nGenericChartExtensions.WithGeoStyle \nWithGeoStyle \nGenericChartExtensions.WithMapProjection \nWithMapProjection \nGenericChartExtensions.WithLayoutGridStyle \nWithLayoutGridStyle \nGenericChartExtensions.WithConfig \nWithConfig \nGenericChartExtensions.WithAnnotation \nWithAnnotation \nGenericChartExtensions.WithAnnotations \nWithAnnotations \nGenericChartExtensions.WithTitle \nWithTitle \nGenericChartExtensions.WithLegend \nWithLegend \nGenericChartExtensions.WithSize \nWithSize \nGenericChartExtensions.WithMargin \nWithMargin \nGenericChartExtensions.WithMarginSize \nWithMarginSize \nGenericChartExtensions.WithTemplate \nWithTemplate \nGenericChartExtensions.WithShape \nWithShape \nGenericChartExtensions.WithShapes \nWithShapes \nGenericChartExtensions.WithDescription \nWithDescription \nGenericChartExtensions.WithAdditionalHeadTags \nWithAdditionalHeadTags \nGenericChartExtensions.WithHeadTags \nWithHeadTags \nGenericChartExtensions.WithMathTex \nWithMathTex \nGenericChartExtensions.SaveHtml \nSaveHtml \nGenericChartExtensions.Show \nShow \nGenericChartExtensions.WithPolar \nWithPolar \nGenericChartExtensions.WithAngularAxis \nWithAngularAxis \nGenericChartExtensions.WithRadialAxis \nWithRadialAxis \nGenericChartExtensions.WithColorAxis \nWithColorAxis \nGenericChartExtensions.WithScene \nWithScene \nGenericChartExtensions.WithTernary \nWithTernary \nGenericChartExtensions.WithLayoutImage \nWithLayoutImage \nGenericChartExtensions.WithLayoutImages \nWithLayoutImages \nGenericChartExtensions.WithUpdateMenu \nWithUpdateMenu \nGenericChartExtensions.WithUpdateMenus \nWithUpdateMenus \nGenericChartExtensions.WithSlider \nWithSlider \nGenericChartExtensions.WithSliders \nWithSliders"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithTraceInfo","title":"GenericChartExtensions.WithTraceInfo","content":"GenericChartExtensions.WithTraceInfo \nWithTraceInfo \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithAxisAnchor","title":"GenericChartExtensions.WithAxisAnchor","content":"GenericChartExtensions.WithAxisAnchor \nWithAxisAnchor \n\n Set the axis anchor id the trace is belonging to\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMarker","title":"GenericChartExtensions.WithMarker","content":"GenericChartExtensions.WithMarker \nWithMarker \n\n Apply styling to the Marker(s) of the chart as Object.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMarkerStyle","title":"GenericChartExtensions.WithMarkerStyle","content":"GenericChartExtensions.WithMarkerStyle \nWithMarkerStyle \n\n Apply styling to the Marker(s) of the chart.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLine","title":"GenericChartExtensions.WithLine","content":"GenericChartExtensions.WithLine \nWithLine \n\n Apply styling to the Line(s) of the chart as Object.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLineStyle","title":"GenericChartExtensions.WithLineStyle","content":"GenericChartExtensions.WithLineStyle \nWithLineStyle \n\n Apply styling to the Line(s) of the chart.\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithXError","title":"GenericChartExtensions.WithXError","content":"GenericChartExtensions.WithXError \nWithXError \n\n Apply styling to the xError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithXErrorStyle","title":"GenericChartExtensions.WithXErrorStyle","content":"GenericChartExtensions.WithXErrorStyle \nWithXErrorStyle \n\n Apply styling to the xError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithYError","title":"GenericChartExtensions.WithYError","content":"GenericChartExtensions.WithYError \nWithYError \n\n Apply styling to the yError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithYErrorStyle","title":"GenericChartExtensions.WithYErrorStyle","content":"GenericChartExtensions.WithYErrorStyle \nWithYErrorStyle \n\n Apply styling to the yError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithZError","title":"GenericChartExtensions.WithZError","content":"GenericChartExtensions.WithZError \nWithZError \n\n Apply styling to the zError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithZErrorStyle","title":"GenericChartExtensions.WithZErrorStyle","content":"GenericChartExtensions.WithZErrorStyle \nWithZErrorStyle \n\n Apply styling to the zError(s) of the chart as Object\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithXAxis","title":"GenericChartExtensions.WithXAxis","content":"GenericChartExtensions.WithXAxis \nWithXAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithXAxisStyle","title":"GenericChartExtensions.WithXAxisStyle","content":"GenericChartExtensions.WithXAxisStyle \nWithXAxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithXAxisRangeSlider","title":"GenericChartExtensions.WithXAxisRangeSlider","content":"GenericChartExtensions.WithXAxisRangeSlider \nWithXAxisRangeSlider \n\n Sets the range slider for the xAxis\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithYAxis","title":"GenericChartExtensions.WithYAxis","content":"GenericChartExtensions.WithYAxis \nWithYAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithYAxisStyle","title":"GenericChartExtensions.WithYAxisStyle","content":"GenericChartExtensions.WithYAxisStyle \nWithYAxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithZAxis","title":"GenericChartExtensions.WithZAxis","content":"GenericChartExtensions.WithZAxis \nWithZAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithZAxisStyle","title":"GenericChartExtensions.WithZAxisStyle","content":"GenericChartExtensions.WithZAxisStyle \nWithZAxisStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#withColorBar","title":"GenericChartExtensions.withColorBar","content":"GenericChartExtensions.withColorBar \nwithColorBar \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithColorBarStyle","title":"GenericChartExtensions.WithColorBarStyle","content":"GenericChartExtensions.WithColorBarStyle \nWithColorBarStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLayout","title":"GenericChartExtensions.WithLayout","content":"GenericChartExtensions.WithLayout \nWithLayout \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLayoutStyle","title":"GenericChartExtensions.WithLayoutStyle","content":"GenericChartExtensions.WithLayoutStyle \nWithLayoutStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLayoutGrid","title":"GenericChartExtensions.WithLayoutGrid","content":"GenericChartExtensions.WithLayoutGrid \nWithLayoutGrid \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLegend","title":"GenericChartExtensions.WithLegend","content":"GenericChartExtensions.WithLegend \nWithLegend \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithGeo","title":"GenericChartExtensions.WithGeo","content":"GenericChartExtensions.WithGeo \nWithGeo \n\n Sets a map for the given chart (will only work with traces supporting geo, e.g. choropleth, scattergeo)\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#withMapbox","title":"GenericChartExtensions.withMapbox","content":"GenericChartExtensions.withMapbox \nwithMapbox \n\n Sets a mapbox for the given chart (will only work with traces supporting mapboxes, e.g. choroplethmapbox, scattermapbox)\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithGeoStyle","title":"GenericChartExtensions.WithGeoStyle","content":"GenericChartExtensions.WithGeoStyle \nWithGeoStyle \n\n Sets the map style for the given chart (will only work with traces supporting geo, e.g. choropleth, scattergeo)\n\n Parameters      :\n\n FitBounds       : Determines if and how this subplot\u0027s view settings are auto-computed to fit trace data\n\n Resolution      : Sets the resolution of the base layers\n\n Scope           : Set the scope of the map.\n\n Projection      : Determines the type of projection used to display the map\n\n Center          : Sets the (lon,lat) coordinates of the map\u0027s center. By default, the map\u0027s longitude center lies at the middle of the longitude range for scoped projection and above \u0060projection.rotation.lon\u0060 otherwise. For all projection types, the map\u0027s latitude center lies at the middle of the latitude range by default.\n\n Visible         : Whether or not the base layers are visible\n\n Domain          : The domain of this geo subplot\n\n ShowCoastLine   : Sets whether or not the coastlines are drawn.\n\n CoastLineColor  : Sets the coastline color.\n\n CoastLineWidth  : Sets the coastline stroke width (in px).\n\n ShowLand        : Sets whether or not land masses are filled in color.\n\n LandColor       : Sets the land mass color.\n\n ShowOcean       : Sets whether or not oceans are filled in color.\n\n OceanColor      : Sets the ocean color\n\n ShowLakes       : Sets whether or not lakes are drawn.\n\n LakeColor       : Sets the color of the lakes.\n\n ShowRivers      : Sets whether or not rivers are drawn.\n\n RiverColor      : Sets color of the rivers.\n\n RiverWidth      : Sets the stroke width (in px) of the rivers.\n\n ShowCountries   : Sets whether or not country boundaries are drawn.\n\n CountryColor    : Sets line color of the country boundaries.\n\n CountryWidth    : Sets line width (in px) of the country boundaries.\n\n ShowSubunits    : Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.\n\n SubunitColor    : Sets the color of the subunits boundaries.\n\n SubunitWidth    : Sets the stroke width (in px) of the subunits boundaries.\n\n ShowFrame       : Sets whether or not a frame is drawn around the map.\n\n FrameColor      : Sets the color the frame.\n\n FrameWidth      : Sets the stroke width (in px) of the frame.\n\n BgColor         : Set the background color of the map\n\n LatAxis         : Sets the latitudinal axis for this geo trace\n\n LonAxis         : Sets the longitudinal axis for this geo trace\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMapProjection","title":"GenericChartExtensions.WithMapProjection","content":"GenericChartExtensions.WithMapProjection \nWithMapProjection \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLayoutGridStyle","title":"GenericChartExtensions.WithLayoutGridStyle","content":"GenericChartExtensions.WithLayoutGridStyle \nWithLayoutGridStyle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithConfig","title":"GenericChartExtensions.WithConfig","content":"GenericChartExtensions.WithConfig \nWithConfig \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithAnnotation","title":"GenericChartExtensions.WithAnnotation","content":"GenericChartExtensions.WithAnnotation \nWithAnnotation \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithAnnotations","title":"GenericChartExtensions.WithAnnotations","content":"GenericChartExtensions.WithAnnotations \nWithAnnotations \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithTitle","title":"GenericChartExtensions.WithTitle","content":"GenericChartExtensions.WithTitle \nWithTitle \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLegend","title":"GenericChartExtensions.WithLegend","content":"GenericChartExtensions.WithLegend \nWithLegend \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithSize","title":"GenericChartExtensions.WithSize","content":"GenericChartExtensions.WithSize \nWithSize \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMargin","title":"GenericChartExtensions.WithMargin","content":"GenericChartExtensions.WithMargin \nWithMargin \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMarginSize","title":"GenericChartExtensions.WithMarginSize","content":"GenericChartExtensions.WithMarginSize \nWithMarginSize \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithTemplate","title":"GenericChartExtensions.WithTemplate","content":"GenericChartExtensions.WithTemplate \nWithTemplate \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithShape","title":"GenericChartExtensions.WithShape","content":"GenericChartExtensions.WithShape \nWithShape \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithShapes","title":"GenericChartExtensions.WithShapes","content":"GenericChartExtensions.WithShapes \nWithShapes \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithDescription","title":"GenericChartExtensions.WithDescription","content":"GenericChartExtensions.WithDescription \nWithDescription \n\n Show chart in browser\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithAdditionalHeadTags","title":"GenericChartExtensions.WithAdditionalHeadTags","content":"GenericChartExtensions.WithAdditionalHeadTags \nWithAdditionalHeadTags \n\n Adds the given additional script tags on the chart\u0027s DisplayOptions. They will be included in the document\u0027s \u003Chead\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithHeadTags","title":"GenericChartExtensions.WithHeadTags","content":"GenericChartExtensions.WithHeadTags \nWithHeadTags \n\n Sets the given additional script tags on the chart\u0027s DisplayOptions. They will be included in the document\u0027s \u003Chead\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithMathTex","title":"GenericChartExtensions.WithMathTex","content":"GenericChartExtensions.WithMathTex \nWithMathTex \n\n Adds the necessary script tags to render tex strings to the chart\u0027s DisplayOptions\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#SaveHtml","title":"GenericChartExtensions.SaveHtml","content":"GenericChartExtensions.SaveHtml \nSaveHtml \n\n Save chart as html single page\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#Show","title":"GenericChartExtensions.Show","content":"GenericChartExtensions.Show \nShow \n\n Show chart in browser\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithPolar","title":"GenericChartExtensions.WithPolar","content":"GenericChartExtensions.WithPolar \nWithPolar \n\n Sets the polar object with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithAngularAxis","title":"GenericChartExtensions.WithAngularAxis","content":"GenericChartExtensions.WithAngularAxis \nWithAngularAxis \n\n Sets the angular axis of the polar object with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithRadialAxis","title":"GenericChartExtensions.WithRadialAxis","content":"GenericChartExtensions.WithRadialAxis \nWithRadialAxis \n\n Sets the radial axis of the polar object with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithColorAxis","title":"GenericChartExtensions.WithColorAxis","content":"GenericChartExtensions.WithColorAxis \nWithColorAxis \n\n Sets the color axis of the color axis with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithScene","title":"GenericChartExtensions.WithScene","content":"GenericChartExtensions.WithScene \nWithScene \n\n Sets the scene object with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithTernary","title":"GenericChartExtensions.WithTernary","content":"GenericChartExtensions.WithTernary \nWithTernary \n\n Sets the scene object with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLayoutImage","title":"GenericChartExtensions.WithLayoutImage","content":"GenericChartExtensions.WithLayoutImage \nWithLayoutImage \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithLayoutImages","title":"GenericChartExtensions.WithLayoutImages","content":"GenericChartExtensions.WithLayoutImages \nWithLayoutImages \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithUpdateMenu","title":"GenericChartExtensions.WithUpdateMenu","content":"GenericChartExtensions.WithUpdateMenu \nWithUpdateMenu \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithUpdateMenus","title":"GenericChartExtensions.WithUpdateMenus","content":"GenericChartExtensions.WithUpdateMenus \nWithUpdateMenus \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithSlider","title":"GenericChartExtensions.WithSlider","content":"GenericChartExtensions.WithSlider \nWithSlider \n"},{"uri":"https://plotly.net/reference/plotly-net-genericchartextensions.html#WithSliders","title":"GenericChartExtensions.WithSliders","content":"GenericChartExtensions.WithSliders \nWithSliders \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam.html","title":"StyleParam","content":"StyleParam \n \nStyleParam.ModeUtils \nModeUtils \nStyleParam.Align \nAlign \nStyleParam.AngleRef \nAngleRef \nStyleParam.AngularUnit \nAngularUnit \nStyleParam.AnnotationAlignment \nAnnotationAlignment \nStyleParam.ArrowHead \nArrowHead \nStyleParam.ArrowSide \nArrowSide \nStyleParam.AspectMode \nAspectMode \nStyleParam.AutoRange \nAutoRange \nStyleParam.AutoTypeNumbers \nAutoTypeNumbers \nStyleParam.AxisConstraint \nAxisConstraint \nStyleParam.AxisConstraintDirection \nAxisConstraintDirection \nStyleParam.AxisType \nAxisType \nStyleParam.BackOff \nBackOff \nStyleParam.BarMode \nBarMode \nStyleParam.BarNorm \nBarNorm \nStyleParam.BoxMean \nBoxMean \nStyleParam.BoxMode \nBoxMode \nStyleParam.BoxPoints \nBoxPoints \nStyleParam.BranchValues \nBranchValues \nStyleParam.Calendar \nCalendar \nStyleParam.CameraProjectionType \nCameraProjectionType \nStyleParam.CategoryArrangement \nCategoryArrangement \nStyleParam.CategoryOrder \nCategoryOrder \nStyleParam.CategoryTickAnchor \nCategoryTickAnchor \nStyleParam.CheaterType \nCheaterType \nStyleParam.ClickMode \nClickMode \nStyleParam.ClickToShow \nClickToShow \nStyleParam.ColorComponentBound \nColorComponentBound \nStyleParam.ColorModel \nColorModel \nStyleParam.Colorscale \nColorscale \nStyleParam.ConeAnchor \nConeAnchor \nStyleParam.ConeSizeMode \nConeSizeMode \nStyleParam.ConnectorMode \nConnectorMode \nStyleParam.ConstrainText \nConstrainText \nStyleParam.ConstraintOperation \nConstraintOperation \nStyleParam.ContourColoring \nContourColoring \nStyleParam.ContourType \nContourType \nStyleParam.CoordinateType \nCoordinateType \nStyleParam.CumulativeDirection \nCumulativeDirection \nStyleParam.Currentbin \nCurrentbin \nStyleParam.Delaunayaxis \nDelaunayaxis \nStyleParam.Direction \nDirection \nStyleParam.DoubleClick \nDoubleClick \nStyleParam.DragMode \nDragMode \nStyleParam.DrawDirection \nDrawDirection \nStyleParam.DrawingStyle \nDrawingStyle \nStyleParam.EntryWidthMode \nEntryWidthMode \nStyleParam.ErrorType \nErrorType \nStyleParam.ExponentFormat \nExponentFormat \nStyleParam.Fill \nFill \nStyleParam.FillRule \nFillRule \nStyleParam.FontFamily \nFontFamily \nStyleParam.FunnelMode \nFunnelMode \nStyleParam.GeoFitBounds \nGeoFitBounds \nStyleParam.GeoProjectionType \nGeoProjectionType \nStyleParam.GeoResolution \nGeoResolution \nStyleParam.GeoScope \nGeoScope \nStyleParam.GradientType \nGradientType \nStyleParam.GroupNorm \nGroupNorm \nStyleParam.HistFunc \nHistFunc \nStyleParam.HistNorm \nHistNorm \nStyleParam.HorizontalAlign \nHorizontalAlign \nStyleParam.HoverInfo \nHoverInfo \nStyleParam.HoverMode \nHoverMode \nStyleParam.HoverOn \nHoverOn \nStyleParam.IcicleCount \nIcicleCount \nStyleParam.ImageFormat \nImageFormat \nStyleParam.IndicatorAlignment \nIndicatorAlignment \nStyleParam.IndicatorDeltaPosition \nIndicatorDeltaPosition \nStyleParam.IndicatorGaugeShape \nIndicatorGaugeShape \nStyleParam.IndicatorMode \nIndicatorMode \nStyleParam.InsideTextAnchor \nInsideTextAnchor \nStyleParam.InsideTextOrientation \nInsideTextOrientation \nStyleParam.IntensityMode \nIntensityMode \nStyleParam.JitterPoints \nJitterPoints \nStyleParam.Layer \nLayer \nStyleParam.LayoutGridPattern \nLayoutGridPattern \nStyleParam.LayoutGridRowOrder \nLayoutGridRowOrder \nStyleParam.LayoutGridXSide \nLayoutGridXSide \nStyleParam.LayoutGridYSide \nLayoutGridYSide \nStyleParam.LayoutImageSizing \nLayoutImageSizing \nStyleParam.LinearAxisId \nLinearAxisId \nStyleParam.LocationFormat \nLocationFormat \nStyleParam.MapboxLayerSourceType \nMapboxLayerSourceType \nStyleParam.MapboxLayerSymbolPlacement \nMapboxLayerSymbolPlacement \nStyleParam.MapboxLayerType \nMapboxLayerType \nStyleParam.MapboxStyle \nMapboxStyle \nStyleParam.MarkerSizeMode \nMarkerSizeMode \nStyleParam.MarkerSymbol \nMarkerSymbol \nStyleParam.MarkerSymbol3D \nMarkerSymbol3D \nStyleParam.Method \nMethod \nStyleParam.Mirror \nMirror \nStyleParam.Mode \nMode \nStyleParam.ModeBarButton \nModeBarButton \nStyleParam.NewSelectionMode \nNewSelectionMode \nStyleParam.Orientation \nOrientation \nStyleParam.PathbarEdgeShape \nPathbarEdgeShape \nStyleParam.PatternFillMode \nPatternFillMode \nStyleParam.PatternShape \nPatternShape \nStyleParam.PeriodAlignment \nPeriodAlignment \nStyleParam.PolarGridShape \nPolarGridShape \nStyleParam.QuartileMethod \nQuartileMethod \nStyleParam.Range \nRange \nStyleParam.RangeMode \nRangeMode \nStyleParam.RangebreakPattern \nRangebreakPattern \nStyleParam.RangesliderRangeMode \nRangesliderRangeMode \nStyleParam.ScaleMode \nScaleMode \nStyleParam.ScatterMode \nScatterMode \nStyleParam.ScrollZoom \nScrollZoom \nStyleParam.SelectDirection \nSelectDirection \nStyleParam.SelectionType \nSelectionType \nStyleParam.Shape \nShape \nStyleParam.ShapeSizeMode \nShapeSizeMode \nStyleParam.ShapeType \nShapeType \nStyleParam.ShowExponent \nShowExponent \nStyleParam.ShowTickOption \nShowTickOption \nStyleParam.Side \nSide \nStyleParam.SmoothAlg \nSmoothAlg \nStyleParam.SortAlgorithm \nSortAlgorithm \nStyleParam.SpanMode \nSpanMode \nStyleParam.SpikeMode \nSpikeMode \nStyleParam.SpikeSnap \nSpikeSnap \nStyleParam.StackGaps \nStackGaps \nStyleParam.SubPlotId \nSubPlotId \nStyleParam.SurfaceAxis \nSurfaceAxis \nStyleParam.SurfacePattern \nSurfacePattern \nStyleParam.SymbolStyle \nSymbolStyle \nStyleParam.TextAngle \nTextAngle \nStyleParam.TextInfo \nTextInfo \nStyleParam.TextPosition \nTextPosition \nStyleParam.TickAutoMargin \nTickAutoMargin \nStyleParam.TickLabelMode \nTickLabelMode \nStyleParam.TickLabelOverflow \nTickLabelOverflow \nStyleParam.TickLabelPosition \nTickLabelPosition \nStyleParam.TickMode \nTickMode \nStyleParam.TickOptions \nTickOptions \nStyleParam.TilingFlip \nTilingFlip \nStyleParam.TimeStep \nTimeStep \nStyleParam.TimeStepMode \nTimeStepMode \nStyleParam.TraceGroupClickOptions \nTraceGroupClickOptions \nStyleParam.TraceItemClickOptions \nTraceItemClickOptions \nStyleParam.TraceItemSizing \nTraceItemSizing \nStyleParam.TraceOrder \nTraceOrder \nStyleParam.TransitionEasing \nTransitionEasing \nStyleParam.TransitionOrdering \nTransitionOrdering \nStyleParam.TreemapTilingPacking \nTreemapTilingPacking \nStyleParam.TriangulationAlgorithm \nTriangulationAlgorithm \nStyleParam.UniformTextMode \nUniformTextMode \nStyleParam.UnitMode \nUnitMode \nStyleParam.UpdateMenuDirection \nUpdateMenuDirection \nStyleParam.UpdateMenuType \nUpdateMenuType \nStyleParam.UpdateMethod \nUpdateMethod \nStyleParam.VerticalAlign \nVerticalAlign \nStyleParam.ViolinMode \nViolinMode \nStyleParam.ViolinSide \nViolinSide \nStyleParam.Visible \nVisible \nStyleParam.WaterfallMeasure \nWaterfallMeasure \nStyleParam.WaterfallMode \nWaterfallMode \nStyleParam.XAnchorPosition \nXAnchorPosition \nStyleParam.YAnchorPosition \nYAnchorPosition"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modeutils.html","title":"ModeUtils","content":"ModeUtils \n\n Functions to manipulate StyleParam Mode\n \nModeUtils.showText \nshowText \nModeUtils.showMarker \nshowMarker \nModeUtils.showLines \nshowLines"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modeutils.html#showText","title":"ModeUtils.showText","content":"ModeUtils.showText \nshowText \n\n Takes the current mode and adds the Text flag\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modeutils.html#showMarker","title":"ModeUtils.showMarker","content":"ModeUtils.showMarker \nshowMarker \n\n Takes the current mode and adds the Markers flag\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modeutils.html#showLines","title":"ModeUtils.showLines","content":"ModeUtils.showLines \nshowLines \n\n Takes the current mode and adds the Lines flag\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html","title":"Align","content":"Align \n\n Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines\n \nAlign.Convert \nConvert \nAlign.toString \ntoString \nAlign.convert \nconvert \nAlign.Auto \nAuto \nAlign.Left \nLeft \nAlign.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html#Convert","title":"Align.Convert","content":"Align.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html#toString","title":"Align.toString","content":"Align.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html#convert","title":"Align.convert","content":"Align.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html#Auto","title":"Align.Auto","content":"Align.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html#Left","title":"Align.Left","content":"Align.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-align.html#Right","title":"Align.Right","content":"Align.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angleref.html","title":"AngleRef","content":"AngleRef \n \nAngleRef.Convert \nConvert \nAngleRef.toString \ntoString \nAngleRef.convert \nconvert \nAngleRef.Previous \nPrevious \nAngleRef.Up \nUp"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angleref.html#Convert","title":"AngleRef.Convert","content":"AngleRef.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angleref.html#toString","title":"AngleRef.toString","content":"AngleRef.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angleref.html#convert","title":"AngleRef.convert","content":"AngleRef.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angleref.html#Previous","title":"AngleRef.Previous","content":"AngleRef.Previous \nPrevious \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angleref.html#Up","title":"AngleRef.Up","content":"AngleRef.Up \nUp \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angularunit.html","title":"AngularUnit","content":"AngularUnit \n \nAngularUnit.Convert \nConvert \nAngularUnit.toString \ntoString \nAngularUnit.convert \nconvert \nAngularUnit.Radians \nRadians \nAngularUnit.Degrees \nDegrees \nAngularUnit.Gradians \nGradians"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angularunit.html#Convert","title":"AngularUnit.Convert","content":"AngularUnit.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angularunit.html#toString","title":"AngularUnit.toString","content":"AngularUnit.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angularunit.html#convert","title":"AngularUnit.convert","content":"AngularUnit.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angularunit.html#Radians","title":"AngularUnit.Radians","content":"AngularUnit.Radians \nRadians \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angularunit.html#Degrees","title":"AngularUnit.Degrees","content":"AngularUnit.Degrees \nDegrees \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-angularunit.html#Gradians","title":"AngularUnit.Gradians","content":"AngularUnit.Gradians \nGradians \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationalignment.html","title":"AnnotationAlignment","content":"AnnotationAlignment \n \nAnnotationAlignment.Convert \nConvert \nAnnotationAlignment.toString \ntoString \nAnnotationAlignment.convert \nconvert \nAnnotationAlignment.Left \nLeft \nAnnotationAlignment.Center \nCenter \nAnnotationAlignment.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationalignment.html#Convert","title":"AnnotationAlignment.Convert","content":"AnnotationAlignment.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationalignment.html#toString","title":"AnnotationAlignment.toString","content":"AnnotationAlignment.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationalignment.html#convert","title":"AnnotationAlignment.convert","content":"AnnotationAlignment.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationalignment.html#Left","title":"AnnotationAlignment.Left","content":"AnnotationAlignment.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationalignment.html#Center","title":"AnnotationAlignment.Center","content":"AnnotationAlignment.Center \nCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-annotationalignment.html#Right","title":"AnnotationAlignment.Right","content":"AnnotationAlignment.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html","title":"ArrowHead","content":"ArrowHead \n \nArrowHead.Convert \nConvert \nArrowHead.toEnum \ntoEnum \nArrowHead.convert \nconvert \nArrowHead.TriangleShort \nTriangleShort \nArrowHead.TriangleTall \nTriangleTall \nArrowHead.Barbed \nBarbed \nArrowHead.SimpleShort \nSimpleShort \nArrowHead.SimpleTall \nSimpleTall \nArrowHead.Cirle \nCirle \nArrowHead.Square \nSquare \nArrowHead.LineOnly \nLineOnly"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#Convert","title":"ArrowHead.Convert","content":"ArrowHead.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#toEnum","title":"ArrowHead.toEnum","content":"ArrowHead.toEnum \ntoEnum \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#convert","title":"ArrowHead.convert","content":"ArrowHead.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#TriangleShort","title":"ArrowHead.TriangleShort","content":"ArrowHead.TriangleShort \nTriangleShort \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#TriangleTall","title":"ArrowHead.TriangleTall","content":"ArrowHead.TriangleTall \nTriangleTall \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#Barbed","title":"ArrowHead.Barbed","content":"ArrowHead.Barbed \nBarbed \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#SimpleShort","title":"ArrowHead.SimpleShort","content":"ArrowHead.SimpleShort \nSimpleShort \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#SimpleTall","title":"ArrowHead.SimpleTall","content":"ArrowHead.SimpleTall \nSimpleTall \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#Cirle","title":"ArrowHead.Cirle","content":"ArrowHead.Cirle \nCirle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#Square","title":"ArrowHead.Square","content":"ArrowHead.Square \nSquare \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowhead.html#LineOnly","title":"ArrowHead.LineOnly","content":"ArrowHead.LineOnly \nLineOnly \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowside.html","title":"ArrowSide","content":"ArrowSide \n \nArrowSide.Convert \nConvert \nArrowSide.toString \ntoString \nArrowSide.convert \nconvert \nArrowSide.Start \nStart \nArrowSide.End \nEnd \nArrowSide.StartEnd \nStartEnd \nArrowSide.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowside.html#Convert","title":"ArrowSide.Convert","content":"ArrowSide.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowside.html#toString","title":"ArrowSide.toString","content":"ArrowSide.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowside.html#convert","title":"ArrowSide.convert","content":"ArrowSide.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowside.html#Start","title":"ArrowSide.Start","content":"ArrowSide.Start \nStart \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowside.html#End","title":"ArrowSide.End","content":"ArrowSide.End \nEnd \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowside.html#StartEnd","title":"ArrowSide.StartEnd","content":"ArrowSide.StartEnd \nStartEnd \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-arrowside.html#None","title":"ArrowSide.None","content":"ArrowSide.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-aspectmode.html","title":"AspectMode","content":"AspectMode \n \nAspectMode.Convert \nConvert \nAspectMode.toString \ntoString \nAspectMode.convert \nconvert \nAspectMode.Auto \nAuto \nAspectMode.Cube \nCube \nAspectMode.Data \nData \nAspectMode.Manual \nManual"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-aspectmode.html#Convert","title":"AspectMode.Convert","content":"AspectMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-aspectmode.html#toString","title":"AspectMode.toString","content":"AspectMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-aspectmode.html#convert","title":"AspectMode.convert","content":"AspectMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-aspectmode.html#Auto","title":"AspectMode.Auto","content":"AspectMode.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-aspectmode.html#Cube","title":"AspectMode.Cube","content":"AspectMode.Cube \nCube \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-aspectmode.html#Data","title":"AspectMode.Data","content":"AspectMode.Data \nData \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-aspectmode.html#Manual","title":"AspectMode.Manual","content":"AspectMode.Manual \nManual \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html","title":"AutoRange","content":"AutoRange \n\n Determines whether or not the range of this axis is computed in relation to the input data. See \u0060rangemode\u0060 for more info. If \u0060range\u0060 is provided, then \u0060autorange\u0060 is set to \u0022false\u0022.\n \nAutoRange.Convert \nConvert \nAutoRange.convert \nconvert \nAutoRange.True \nTrue \nAutoRange.False \nFalse \nAutoRange.Reversed \nReversed"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html#Convert","title":"AutoRange.Convert","content":"AutoRange.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html#convert","title":"AutoRange.convert","content":"AutoRange.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html#True","title":"AutoRange.True","content":"AutoRange.True \nTrue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html#False","title":"AutoRange.False","content":"AutoRange.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autorange.html#Reversed","title":"AutoRange.Reversed","content":"AutoRange.Reversed \nReversed \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autotypenumbers.html","title":"AutoTypeNumbers","content":"AutoTypeNumbers \n \nAutoTypeNumbers.Convert \nConvert \nAutoTypeNumbers.toString \ntoString \nAutoTypeNumbers.convert \nconvert \nAutoTypeNumbers.ConvertTypes \nConvertTypes \nAutoTypeNumbers.Strict \nStrict"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autotypenumbers.html#Convert","title":"AutoTypeNumbers.Convert","content":"AutoTypeNumbers.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autotypenumbers.html#toString","title":"AutoTypeNumbers.toString","content":"AutoTypeNumbers.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autotypenumbers.html#convert","title":"AutoTypeNumbers.convert","content":"AutoTypeNumbers.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autotypenumbers.html#ConvertTypes","title":"AutoTypeNumbers.ConvertTypes","content":"AutoTypeNumbers.ConvertTypes \nConvertTypes \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-autotypenumbers.html#Strict","title":"AutoTypeNumbers.Strict","content":"AutoTypeNumbers.Strict \nStrict \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraint.html","title":"AxisConstraint","content":"AxisConstraint \n\n If the axis needs to be compressed (either due to its own \u0060scaleanchor\u0060 and \u0060scaleratio\u0060 or those of the other axis), determines how that happens: by increasing the \u0022range\u0022, or by decreasing the \u0022domain\u0022. Default is \u0022domain\u0022 for axes containing image traces, \u0022range\u0022 otherwise.\n \nAxisConstraint.Convert \nConvert \nAxisConstraint.toString \ntoString \nAxisConstraint.convert \nconvert \nAxisConstraint.Range \nRange \nAxisConstraint.Domain \nDomain"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraint.html#Convert","title":"AxisConstraint.Convert","content":"AxisConstraint.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraint.html#toString","title":"AxisConstraint.toString","content":"AxisConstraint.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraint.html#convert","title":"AxisConstraint.convert","content":"AxisConstraint.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraint.html#Range","title":"AxisConstraint.Range","content":"AxisConstraint.Range \nRange \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraint.html#Domain","title":"AxisConstraint.Domain","content":"AxisConstraint.Domain \nDomain \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html","title":"AxisConstraintDirection","content":"AxisConstraintDirection \n \nAxisConstraintDirection.Convert \nConvert \nAxisConstraintDirection.toString \ntoString \nAxisConstraintDirection.convert \nconvert \nAxisConstraintDirection.Left \nLeft \nAxisConstraintDirection.Center \nCenter \nAxisConstraintDirection.Right \nRight \nAxisConstraintDirection.Top \nTop \nAxisConstraintDirection.Middle \nMiddle \nAxisConstraintDirection.Bottom \nBottom"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#Convert","title":"AxisConstraintDirection.Convert","content":"AxisConstraintDirection.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#toString","title":"AxisConstraintDirection.toString","content":"AxisConstraintDirection.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#convert","title":"AxisConstraintDirection.convert","content":"AxisConstraintDirection.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#Left","title":"AxisConstraintDirection.Left","content":"AxisConstraintDirection.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#Center","title":"AxisConstraintDirection.Center","content":"AxisConstraintDirection.Center \nCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#Right","title":"AxisConstraintDirection.Right","content":"AxisConstraintDirection.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#Top","title":"AxisConstraintDirection.Top","content":"AxisConstraintDirection.Top \nTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#Middle","title":"AxisConstraintDirection.Middle","content":"AxisConstraintDirection.Middle \nMiddle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axisconstraintdirection.html#Bottom","title":"AxisConstraintDirection.Bottom","content":"AxisConstraintDirection.Bottom \nBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html","title":"AxisType","content":"AxisType \n\n Sets the axis type. By default (Auto), plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.\n \nAxisType.Convert \nConvert \nAxisType.toString \ntoString \nAxisType.convert \nconvert \nAxisType.Auto \nAuto \nAxisType.Linear \nLinear \nAxisType.Log \nLog \nAxisType.Date \nDate \nAxisType.Category \nCategory \nAxisType.MultiCategory \nMultiCategory"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#Convert","title":"AxisType.Convert","content":"AxisType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#toString","title":"AxisType.toString","content":"AxisType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#convert","title":"AxisType.convert","content":"AxisType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#Auto","title":"AxisType.Auto","content":"AxisType.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#Linear","title":"AxisType.Linear","content":"AxisType.Linear \nLinear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#Log","title":"AxisType.Log","content":"AxisType.Log \nLog \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#Date","title":"AxisType.Date","content":"AxisType.Date \nDate \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#Category","title":"AxisType.Category","content":"AxisType.Category \nCategory \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-axistype.html#MultiCategory","title":"AxisType.MultiCategory","content":"AxisType.MultiCategory \nMultiCategory \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-backoff.html","title":"BackOff","content":"BackOff \n \nBackOff.Convert \nConvert \nBackOff.convert \nconvert \nBackOff.Auto \nAuto \nBackOff.Value \nValue \nBackOff.Array \nArray"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-backoff.html#Convert","title":"BackOff.Convert","content":"BackOff.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-backoff.html#convert","title":"BackOff.convert","content":"BackOff.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-backoff.html#Auto","title":"BackOff.Auto","content":"BackOff.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-backoff.html#Value","title":"BackOff.Value","content":"BackOff.Value \nValue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-backoff.html#Array","title":"BackOff.Array","content":"BackOff.Array \nArray \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html","title":"BarMode","content":"BarMode \n\n For bar and histogram plots only. This sets how multiple bar objects are plotted together. In other words, this defines how bars at the same location\n appear on the plot. If set to \u0027stack\u0027 the bars are stacked on top of one another. If set to \u0027group\u0027, the bars are plotted next to one another, centered\n around the shared location. If set to \u0027overlay\u0027, the bars are simply plotted over one another, you may need to set the opacity to see this.\n \nBarMode.Convert \nConvert \nBarMode.toString \ntoString \nBarMode.convert \nconvert \nBarMode.Stack \nStack \nBarMode.Group \nGroup \nBarMode.Overlay \nOverlay \nBarMode.Relative \nRelative"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#Convert","title":"BarMode.Convert","content":"BarMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#toString","title":"BarMode.toString","content":"BarMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#convert","title":"BarMode.convert","content":"BarMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#Stack","title":"BarMode.Stack","content":"BarMode.Stack \nStack \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#Group","title":"BarMode.Group","content":"BarMode.Group \nGroup \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#Overlay","title":"BarMode.Overlay","content":"BarMode.Overlay \nOverlay \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barmode.html#Relative","title":"BarMode.Relative","content":"BarMode.Relative \nRelative \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barnorm.html","title":"BarNorm","content":"BarNorm \n \nBarNorm.Convert \nConvert \nBarNorm.toString \ntoString \nBarNorm.convert \nconvert \nBarNorm.NoNorm \nNoNorm \nBarNorm.Fraction \nFraction \nBarNorm.Percent \nPercent"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barnorm.html#Convert","title":"BarNorm.Convert","content":"BarNorm.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barnorm.html#toString","title":"BarNorm.toString","content":"BarNorm.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barnorm.html#convert","title":"BarNorm.convert","content":"BarNorm.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barnorm.html#NoNorm","title":"BarNorm.NoNorm","content":"BarNorm.NoNorm \nNoNorm \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barnorm.html#Fraction","title":"BarNorm.Fraction","content":"BarNorm.Fraction \nFraction \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-barnorm.html#Percent","title":"BarNorm.Percent","content":"BarNorm.Percent \nPercent \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmean.html","title":"BoxMean","content":"BoxMean \n \nBoxMean.Convert \nConvert \nBoxMean.convert \nconvert \nBoxMean.True \nTrue \nBoxMean.False \nFalse \nBoxMean.SD \nSD"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmean.html#Convert","title":"BoxMean.Convert","content":"BoxMean.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmean.html#convert","title":"BoxMean.convert","content":"BoxMean.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmean.html#True","title":"BoxMean.True","content":"BoxMean.True \nTrue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmean.html#False","title":"BoxMean.False","content":"BoxMean.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmean.html#SD","title":"BoxMean.SD","content":"BoxMean.SD \nSD \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmode.html","title":"BoxMode","content":"BoxMode \n \nBoxMode.Convert \nConvert \nBoxMode.toString \ntoString \nBoxMode.convert \nconvert \nBoxMode.Group \nGroup \nBoxMode.Overlay \nOverlay"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmode.html#Convert","title":"BoxMode.Convert","content":"BoxMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmode.html#toString","title":"BoxMode.toString","content":"BoxMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmode.html#convert","title":"BoxMode.convert","content":"BoxMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmode.html#Group","title":"BoxMode.Group","content":"BoxMode.Group \nGroup \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxmode.html#Overlay","title":"BoxMode.Overlay","content":"BoxMode.Overlay \nOverlay \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html","title":"BoxPoints","content":"BoxPoints \n \nBoxPoints.Convert \nConvert \nBoxPoints.convert \nconvert \nBoxPoints.Outliers \nOutliers \nBoxPoints.All \nAll \nBoxPoints.SuspectedOutliers \nSuspectedOutliers \nBoxPoints.False \nFalse"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#Convert","title":"BoxPoints.Convert","content":"BoxPoints.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#convert","title":"BoxPoints.convert","content":"BoxPoints.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#Outliers","title":"BoxPoints.Outliers","content":"BoxPoints.Outliers \nOutliers \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#All","title":"BoxPoints.All","content":"BoxPoints.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#SuspectedOutliers","title":"BoxPoints.SuspectedOutliers","content":"BoxPoints.SuspectedOutliers \nSuspectedOutliers \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-boxpoints.html#False","title":"BoxPoints.False","content":"BoxPoints.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-branchvalues.html","title":"BranchValues","content":"BranchValues \n \nBranchValues.Convert \nConvert \nBranchValues.toString \ntoString \nBranchValues.convert \nconvert \nBranchValues.Remainder \nRemainder \nBranchValues.Total \nTotal"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-branchvalues.html#Convert","title":"BranchValues.Convert","content":"BranchValues.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-branchvalues.html#toString","title":"BranchValues.toString","content":"BranchValues.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-branchvalues.html#convert","title":"BranchValues.convert","content":"BranchValues.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-branchvalues.html#Remainder","title":"BranchValues.Remainder","content":"BranchValues.Remainder \nRemainder \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-branchvalues.html#Total","title":"BranchValues.Total","content":"BranchValues.Total \nTotal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html","title":"Calendar","content":"Calendar \n\n Sets the calendar system to use with \u0060x y z\u0060 date data. Default: \u0022gregorian\u0022\n \nCalendar.Convert \nConvert \nCalendar.toString \ntoString \nCalendar.convert \nconvert \nCalendar.Gregorian \nGregorian \nCalendar.Chinese \nChinese \nCalendar.Coptic \nCoptic \nCalendar.Discworld \nDiscworld \nCalendar.Ethiopian \nEthiopian \nCalendar.Hebrew \nHebrew \nCalendar.Islamic \nIslamic \nCalendar.Julian \nJulian \nCalendar.Mayan \nMayan \nCalendar.Nanakshahi \nNanakshahi \nCalendar.Nepali \nNepali \nCalendar.Persian \nPersian \nCalendar.Jalali \nJalali \nCalendar.Taiwan \nTaiwan \nCalendar.Thai \nThai \nCalendar.Ummalqura \nUmmalqura"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Convert","title":"Calendar.Convert","content":"Calendar.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#toString","title":"Calendar.toString","content":"Calendar.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#convert","title":"Calendar.convert","content":"Calendar.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Gregorian","title":"Calendar.Gregorian","content":"Calendar.Gregorian \nGregorian \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Chinese","title":"Calendar.Chinese","content":"Calendar.Chinese \nChinese \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Coptic","title":"Calendar.Coptic","content":"Calendar.Coptic \nCoptic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Discworld","title":"Calendar.Discworld","content":"Calendar.Discworld \nDiscworld \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Ethiopian","title":"Calendar.Ethiopian","content":"Calendar.Ethiopian \nEthiopian \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Hebrew","title":"Calendar.Hebrew","content":"Calendar.Hebrew \nHebrew \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Islamic","title":"Calendar.Islamic","content":"Calendar.Islamic \nIslamic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Julian","title":"Calendar.Julian","content":"Calendar.Julian \nJulian \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Mayan","title":"Calendar.Mayan","content":"Calendar.Mayan \nMayan \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Nanakshahi","title":"Calendar.Nanakshahi","content":"Calendar.Nanakshahi \nNanakshahi \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Nepali","title":"Calendar.Nepali","content":"Calendar.Nepali \nNepali \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Persian","title":"Calendar.Persian","content":"Calendar.Persian \nPersian \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Jalali","title":"Calendar.Jalali","content":"Calendar.Jalali \nJalali \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Taiwan","title":"Calendar.Taiwan","content":"Calendar.Taiwan \nTaiwan \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Thai","title":"Calendar.Thai","content":"Calendar.Thai \nThai \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-calendar.html#Ummalqura","title":"Calendar.Ummalqura","content":"Calendar.Ummalqura \nUmmalqura \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cameraprojectiontype.html","title":"CameraProjectionType","content":"CameraProjectionType \n \nCameraProjectionType.Convert \nConvert \nCameraProjectionType.toString \ntoString \nCameraProjectionType.convert \nconvert \nCameraProjectionType.Perspective \nPerspective \nCameraProjectionType.Orthographic \nOrthographic"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cameraprojectiontype.html#Convert","title":"CameraProjectionType.Convert","content":"CameraProjectionType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cameraprojectiontype.html#toString","title":"CameraProjectionType.toString","content":"CameraProjectionType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cameraprojectiontype.html#convert","title":"CameraProjectionType.convert","content":"CameraProjectionType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cameraprojectiontype.html#Perspective","title":"CameraProjectionType.Perspective","content":"CameraProjectionType.Perspective \nPerspective \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cameraprojectiontype.html#Orthographic","title":"CameraProjectionType.Orthographic","content":"CameraProjectionType.Orthographic \nOrthographic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryarrangement.html","title":"CategoryArrangement","content":"CategoryArrangement \n \nCategoryArrangement.Convert \nConvert \nCategoryArrangement.toString \ntoString \nCategoryArrangement.convert \nconvert \nCategoryArrangement.Perpendicular \nPerpendicular \nCategoryArrangement.FreeForm \nFreeForm \nCategoryArrangement.Fixed \nFixed \nCategoryArrangement.Snap \nSnap"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryarrangement.html#Convert","title":"CategoryArrangement.Convert","content":"CategoryArrangement.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryarrangement.html#toString","title":"CategoryArrangement.toString","content":"CategoryArrangement.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryarrangement.html#convert","title":"CategoryArrangement.convert","content":"CategoryArrangement.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryarrangement.html#Perpendicular","title":"CategoryArrangement.Perpendicular","content":"CategoryArrangement.Perpendicular \nPerpendicular \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryarrangement.html#FreeForm","title":"CategoryArrangement.FreeForm","content":"CategoryArrangement.FreeForm \nFreeForm \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryarrangement.html#Fixed","title":"CategoryArrangement.Fixed","content":"CategoryArrangement.Fixed \nFixed \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryarrangement.html#Snap","title":"CategoryArrangement.Snap","content":"CategoryArrangement.Snap \nSnap \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html","title":"CategoryOrder","content":"CategoryOrder \n\n Specifies the ordering logic for the case of categorical variables. By default, plotly uses \u0022trace\u0022, which specifies the order that is present in the data supplied.\n Set \u0060categoryorder\u0060 to \u0022category ascending\u0022 or \u0022category descending\u0022 if order should be determined by the alphanumerical order of the category names.\n Set \u0060categoryorder\u0060 to \u0022array\u0022 to derive the ordering from the attribute \u0060categoryarray\u0060. If a category is not found in the \u0060categoryarray\u0060 array, the sorting behavior for that attribute will be identical to the \u0022trace\u0022 mode.\n The unspecified categories will follow the categories in \u0060categoryarray\u0060. Set \u0060categoryorder\u0060 to \u0022total ascending\u0022 or \u0022total descending\u0022 if order should be determined by the numerical order of the values.\n Similarly, the order can be determined by the min, max, sum, mean or median of all the values.\n \nCategoryOrder.Convert \nConvert \nCategoryOrder.toString \ntoString \nCategoryOrder.convert \nconvert \nCategoryOrder.Trace \nTrace \nCategoryOrder.CategoryAscending \nCategoryAscending \nCategoryOrder.CategoryDescending \nCategoryDescending \nCategoryOrder.Array \nArray \nCategoryOrder.TotalAscending \nTotalAscending \nCategoryOrder.TotalDescending \nTotalDescending \nCategoryOrder.MinAscending \nMinAscending \nCategoryOrder.MinDescending \nMinDescending \nCategoryOrder.MaxAscending \nMaxAscending \nCategoryOrder.MaxDescending \nMaxDescending \nCategoryOrder.SumAscending \nSumAscending \nCategoryOrder.SumDescending \nSumDescending \nCategoryOrder.MeanAscending \nMeanAscending \nCategoryOrder.MeanDescending \nMeanDescending \nCategoryOrder.MedianAscending \nMedianAscending \nCategoryOrder.MedianDescending \nMedianDescending"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#Convert","title":"CategoryOrder.Convert","content":"CategoryOrder.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#toString","title":"CategoryOrder.toString","content":"CategoryOrder.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#convert","title":"CategoryOrder.convert","content":"CategoryOrder.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#Trace","title":"CategoryOrder.Trace","content":"CategoryOrder.Trace \nTrace \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#CategoryAscending","title":"CategoryOrder.CategoryAscending","content":"CategoryOrder.CategoryAscending \nCategoryAscending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#CategoryDescending","title":"CategoryOrder.CategoryDescending","content":"CategoryOrder.CategoryDescending \nCategoryDescending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#Array","title":"CategoryOrder.Array","content":"CategoryOrder.Array \nArray \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#TotalAscending","title":"CategoryOrder.TotalAscending","content":"CategoryOrder.TotalAscending \nTotalAscending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#TotalDescending","title":"CategoryOrder.TotalDescending","content":"CategoryOrder.TotalDescending \nTotalDescending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#MinAscending","title":"CategoryOrder.MinAscending","content":"CategoryOrder.MinAscending \nMinAscending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#MinDescending","title":"CategoryOrder.MinDescending","content":"CategoryOrder.MinDescending \nMinDescending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#MaxAscending","title":"CategoryOrder.MaxAscending","content":"CategoryOrder.MaxAscending \nMaxAscending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#MaxDescending","title":"CategoryOrder.MaxDescending","content":"CategoryOrder.MaxDescending \nMaxDescending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#SumAscending","title":"CategoryOrder.SumAscending","content":"CategoryOrder.SumAscending \nSumAscending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#SumDescending","title":"CategoryOrder.SumDescending","content":"CategoryOrder.SumDescending \nSumDescending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#MeanAscending","title":"CategoryOrder.MeanAscending","content":"CategoryOrder.MeanAscending \nMeanAscending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#MeanDescending","title":"CategoryOrder.MeanDescending","content":"CategoryOrder.MeanDescending \nMeanDescending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#MedianAscending","title":"CategoryOrder.MedianAscending","content":"CategoryOrder.MedianAscending \nMedianAscending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categoryorder.html#MedianDescending","title":"CategoryOrder.MedianDescending","content":"CategoryOrder.MedianDescending \nMedianDescending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categorytickanchor.html","title":"CategoryTickAnchor","content":"CategoryTickAnchor \n \nCategoryTickAnchor.Convert \nConvert \nCategoryTickAnchor.toString \ntoString \nCategoryTickAnchor.convert \nconvert \nCategoryTickAnchor.Labels \nLabels \nCategoryTickAnchor.Boundaries \nBoundaries"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categorytickanchor.html#Convert","title":"CategoryTickAnchor.Convert","content":"CategoryTickAnchor.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categorytickanchor.html#toString","title":"CategoryTickAnchor.toString","content":"CategoryTickAnchor.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categorytickanchor.html#convert","title":"CategoryTickAnchor.convert","content":"CategoryTickAnchor.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categorytickanchor.html#Labels","title":"CategoryTickAnchor.Labels","content":"CategoryTickAnchor.Labels \nLabels \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-categorytickanchor.html#Boundaries","title":"CategoryTickAnchor.Boundaries","content":"CategoryTickAnchor.Boundaries \nBoundaries \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cheatertype.html","title":"CheaterType","content":"CheaterType \n \nCheaterType.Convert \nConvert \nCheaterType.toString \ntoString \nCheaterType.convert \nconvert \nCheaterType.Index \nIndex \nCheaterType.Value \nValue"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cheatertype.html#Convert","title":"CheaterType.Convert","content":"CheaterType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cheatertype.html#toString","title":"CheaterType.toString","content":"CheaterType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cheatertype.html#convert","title":"CheaterType.convert","content":"CheaterType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cheatertype.html#Index","title":"CheaterType.Index","content":"CheaterType.Index \nIndex \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cheatertype.html#Value","title":"CheaterType.Value","content":"CheaterType.Value \nValue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clickmode.html","title":"ClickMode","content":"ClickMode \n \nClickMode.Convert \nConvert \nClickMode.toString \ntoString \nClickMode.convert \nconvert \nClickMode.Event \nEvent \nClickMode.Select \nSelect \nClickMode.EventSelect \nEventSelect \nClickMode.NoClickMode \nNoClickMode"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clickmode.html#Convert","title":"ClickMode.Convert","content":"ClickMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clickmode.html#toString","title":"ClickMode.toString","content":"ClickMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clickmode.html#convert","title":"ClickMode.convert","content":"ClickMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clickmode.html#Event","title":"ClickMode.Event","content":"ClickMode.Event \nEvent \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clickmode.html#Select","title":"ClickMode.Select","content":"ClickMode.Select \nSelect \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clickmode.html#EventSelect","title":"ClickMode.EventSelect","content":"ClickMode.EventSelect \nEventSelect \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clickmode.html#NoClickMode","title":"ClickMode.NoClickMode","content":"ClickMode.NoClickMode \nNoClickMode \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clicktoshow.html","title":"ClickToShow","content":"ClickToShow \n \nClickToShow.Convert \nConvert \nClickToShow.convert \nconvert \nClickToShow.False \nFalse \nClickToShow.OnOff \nOnOff \nClickToShow.OnOut \nOnOut"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clicktoshow.html#Convert","title":"ClickToShow.Convert","content":"ClickToShow.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clicktoshow.html#convert","title":"ClickToShow.convert","content":"ClickToShow.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clicktoshow.html#False","title":"ClickToShow.False","content":"ClickToShow.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clicktoshow.html#OnOff","title":"ClickToShow.OnOff","content":"ClickToShow.OnOff \nOnOff \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-clicktoshow.html#OnOut","title":"ClickToShow.OnOut","content":"ClickToShow.OnOut \nOnOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorcomponentbound.html","title":"ColorComponentBound","content":"ColorComponentBound \n \nColorComponentBound.Convert \nConvert \nColorComponentBound.convert \nconvert \nColorComponentBound.RGB \nRGB \nColorComponentBound.RGBA \nRGBA \nColorComponentBound.RGBA256 \nRGBA256 \nColorComponentBound.HSL \nHSL \nColorComponentBound.HSLA \nHSLA"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorcomponentbound.html#Convert","title":"ColorComponentBound.Convert","content":"ColorComponentBound.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorcomponentbound.html#convert","title":"ColorComponentBound.convert","content":"ColorComponentBound.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorcomponentbound.html#RGB","title":"ColorComponentBound.RGB","content":"ColorComponentBound.RGB \nRGB \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorcomponentbound.html#RGBA","title":"ColorComponentBound.RGBA","content":"ColorComponentBound.RGBA \nRGBA \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorcomponentbound.html#RGBA256","title":"ColorComponentBound.RGBA256","content":"ColorComponentBound.RGBA256 \nRGBA256 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorcomponentbound.html#HSL","title":"ColorComponentBound.HSL","content":"ColorComponentBound.HSL \nHSL \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorcomponentbound.html#HSLA","title":"ColorComponentBound.HSLA","content":"ColorComponentBound.HSLA \nHSLA \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html","title":"ColorModel","content":"ColorModel \n \nColorModel.Convert \nConvert \nColorModel.toString \ntoString \nColorModel.convert \nconvert \nColorModel.RGB \nRGB \nColorModel.RGBA \nRGBA \nColorModel.RGBA256 \nRGBA256 \nColorModel.HSL \nHSL \nColorModel.HSLA \nHSLA"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html#Convert","title":"ColorModel.Convert","content":"ColorModel.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html#toString","title":"ColorModel.toString","content":"ColorModel.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html#convert","title":"ColorModel.convert","content":"ColorModel.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html#RGB","title":"ColorModel.RGB","content":"ColorModel.RGB \nRGB \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html#RGBA","title":"ColorModel.RGBA","content":"ColorModel.RGBA \nRGBA \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html#RGBA256","title":"ColorModel.RGBA256","content":"ColorModel.RGBA256 \nRGBA256 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html#HSL","title":"ColorModel.HSL","content":"ColorModel.HSL \nHSL \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colormodel.html#HSLA","title":"ColorModel.HSLA","content":"ColorModel.HSLA \nHSLA \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html","title":"Colorscale","content":"Colorscale \n\n The colorscale must be a collection containing a mapping of a normalized value (between 0.0 and 1.0) to it\u0027s color. At minimum, a mapping for the lowest (0.0) and highest (1.0) values are required.\n \nColorscale.Convert \nConvert \nColorscale.convert \nconvert \nColorscale.Custom \nCustom \nColorscale.RdBu \nRdBu \nColorscale.Earth \nEarth \nColorscale.Blackbody \nBlackbody \nColorscale.YIOrRd \nYIOrRd \nColorscale.YIGnBu \nYIGnBu \nColorscale.Bluered \nBluered \nColorscale.Portland \nPortland \nColorscale.Electric \nElectric \nColorscale.Jet \nJet \nColorscale.Hot \nHot \nColorscale.Greys \nGreys \nColorscale.Greens \nGreens \nColorscale.Picnic \nPicnic \nColorscale.Rainbow \nRainbow \nColorscale.Viridis \nViridis \nColorscale.Cividis \nCividis"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Convert","title":"Colorscale.Convert","content":"Colorscale.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#convert","title":"Colorscale.convert","content":"Colorscale.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Custom","title":"Colorscale.Custom","content":"Colorscale.Custom \nCustom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#RdBu","title":"Colorscale.RdBu","content":"Colorscale.RdBu \nRdBu \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Earth","title":"Colorscale.Earth","content":"Colorscale.Earth \nEarth \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Blackbody","title":"Colorscale.Blackbody","content":"Colorscale.Blackbody \nBlackbody \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#YIOrRd","title":"Colorscale.YIOrRd","content":"Colorscale.YIOrRd \nYIOrRd \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#YIGnBu","title":"Colorscale.YIGnBu","content":"Colorscale.YIGnBu \nYIGnBu \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Bluered","title":"Colorscale.Bluered","content":"Colorscale.Bluered \nBluered \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Portland","title":"Colorscale.Portland","content":"Colorscale.Portland \nPortland \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Electric","title":"Colorscale.Electric","content":"Colorscale.Electric \nElectric \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Jet","title":"Colorscale.Jet","content":"Colorscale.Jet \nJet \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Hot","title":"Colorscale.Hot","content":"Colorscale.Hot \nHot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Greys","title":"Colorscale.Greys","content":"Colorscale.Greys \nGreys \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Greens","title":"Colorscale.Greens","content":"Colorscale.Greens \nGreens \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Picnic","title":"Colorscale.Picnic","content":"Colorscale.Picnic \nPicnic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Rainbow","title":"Colorscale.Rainbow","content":"Colorscale.Rainbow \nRainbow \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Viridis","title":"Colorscale.Viridis","content":"Colorscale.Viridis \nViridis \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-colorscale.html#Cividis","title":"Colorscale.Cividis","content":"Colorscale.Cividis \nCividis \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coneanchor.html","title":"ConeAnchor","content":"ConeAnchor \n\n Sets the cones\u0027 anchor with respect to their x/y/z positions. Note that \u0022cm\u0022 denote the cone\u0027s center of mass which corresponds to 1/4 from the tail to tip.\n \nConeAnchor.Convert \nConvert \nConeAnchor.toString \ntoString \nConeAnchor.convert \nconvert \nConeAnchor.Tip \nTip \nConeAnchor.Tail \nTail \nConeAnchor.CenterOfMass \nCenterOfMass \nConeAnchor.Center \nCenter"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coneanchor.html#Convert","title":"ConeAnchor.Convert","content":"ConeAnchor.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coneanchor.html#toString","title":"ConeAnchor.toString","content":"ConeAnchor.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coneanchor.html#convert","title":"ConeAnchor.convert","content":"ConeAnchor.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coneanchor.html#Tip","title":"ConeAnchor.Tip","content":"ConeAnchor.Tip \nTip \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coneanchor.html#Tail","title":"ConeAnchor.Tail","content":"ConeAnchor.Tail \nTail \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coneanchor.html#CenterOfMass","title":"ConeAnchor.CenterOfMass","content":"ConeAnchor.CenterOfMass \nCenterOfMass \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coneanchor.html#Center","title":"ConeAnchor.Center","content":"ConeAnchor.Center \nCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-conesizemode.html","title":"ConeSizeMode","content":"ConeSizeMode \n\n Sets the cones\u0027 anchor with respect to their x/y/z positions. Note that \u0022cm\u0022 denote the cone\u0027s center of mass which corresponds to 1/4 from the tail to tip.\n \nConeSizeMode.Convert \nConvert \nConeSizeMode.toString \ntoString \nConeSizeMode.convert \nconvert \nConeSizeMode.Scaled \nScaled \nConeSizeMode.Absolute \nAbsolute"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-conesizemode.html#Convert","title":"ConeSizeMode.Convert","content":"ConeSizeMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-conesizemode.html#toString","title":"ConeSizeMode.toString","content":"ConeSizeMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-conesizemode.html#convert","title":"ConeSizeMode.convert","content":"ConeSizeMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-conesizemode.html#Scaled","title":"ConeSizeMode.Scaled","content":"ConeSizeMode.Scaled \nScaled \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-conesizemode.html#Absolute","title":"ConeSizeMode.Absolute","content":"ConeSizeMode.Absolute \nAbsolute \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-connectormode.html","title":"ConnectorMode","content":"ConnectorMode \n\nThe shape of connector lines in Waterfall charts.\n \nConnectorMode.Convert \nConvert \nConnectorMode.toString \ntoString \nConnectorMode.convert \nconvert \nConnectorMode.Spanning \nSpanning \nConnectorMode.Between \nBetween"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-connectormode.html#Convert","title":"ConnectorMode.Convert","content":"ConnectorMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-connectormode.html#toString","title":"ConnectorMode.toString","content":"ConnectorMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-connectormode.html#convert","title":"ConnectorMode.convert","content":"ConnectorMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-connectormode.html#Spanning","title":"ConnectorMode.Spanning","content":"ConnectorMode.Spanning \nSpanning \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-connectormode.html#Between","title":"ConnectorMode.Between","content":"ConnectorMode.Between \nBetween \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintext.html","title":"ConstrainText","content":"ConstrainText \n \nConstrainText.Convert \nConvert \nConstrainText.toString \ntoString \nConstrainText.convert \nconvert \nConstrainText.Inside \nInside \nConstrainText.Outside \nOutside \nConstrainText.Both \nBoth \nConstrainText.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintext.html#Convert","title":"ConstrainText.Convert","content":"ConstrainText.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintext.html#toString","title":"ConstrainText.toString","content":"ConstrainText.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintext.html#convert","title":"ConstrainText.convert","content":"ConstrainText.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintext.html#Inside","title":"ConstrainText.Inside","content":"ConstrainText.Inside \nInside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintext.html#Outside","title":"ConstrainText.Outside","content":"ConstrainText.Outside \nOutside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintext.html#Both","title":"ConstrainText.Both","content":"ConstrainText.Both \nBoth \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintext.html#None","title":"ConstrainText.None","content":"ConstrainText.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintoperation.html","title":"ConstraintOperation","content":"ConstraintOperation \n \nConstraintOperation.Convert \nConvert \nConstraintOperation.toString \ntoString \nConstraintOperation.convert \nconvert \nConstraintOperation.Equal \nEqual \nConstraintOperation.LesserThan \nLesserThan \nConstraintOperation.LesserThanOrEqual \nLesserThanOrEqual \nConstraintOperation.GreaterThan \nGreaterThan \nConstraintOperation.GreaterThanOrEqual \nGreaterThanOrEqual \nConstraintOperation.InsideInclusiveInterval \nInsideInclusiveInterval \nConstraintOperation.InsideLeftInclusiveInterval \nInsideLeftInclusiveInterval \nConstraintOperation.InsideRightInclusiveInterval \nInsideRightInclusiveInterval \nConstraintOperation.InsideExclusiveInterval \nInsideExclusiveInterval \nConstraintOperation.OutsideInclusiveInterval \nOutsideInclusiveInterval \nConstraintOperation.OutsideLeftInclusiveInterval \nOutsideLeftInclusiveInterval \nConstraintOperation.OutsideRightInclusiveInterval \nOutsideRightInclusiveInterval \nConstraintOperation.OutsideExclusiveInterval \nOutsideExclusiveInterval"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintoperation.html#Convert","title":"ConstraintOperation.Convert","content":"ConstraintOperation.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintoperation.html#toString","title":"ConstraintOperation.toString","content":"ConstraintOperation.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintoperation.html#convert","title":"ConstraintOperation.convert","content":"ConstraintOperation.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintoperation.html#Equal","title":"ConstraintOperation.Equal","content":"ConstraintOperation.Equal \nEqual \n\n \u0022=\u0022\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintoperation.html#LesserThan","title":"ConstraintOperation.LesserThan","content":"ConstraintOperation.LesserThan \nLesserThan \n\n \u0022\u003C\u0022\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintoperation.html#LesserThanOrEqual","title":"ConstraintOperation.LesserThanOrEqual","content":"ConstraintOperation.LesserThanOrEqual \nLesserThanOrEqual \n\n \u0022\u003C=\u0022\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintoperation.html#GreaterThan","title":"ConstraintOperation.GreaterThan","content":"ConstraintOperation.GreaterThan \nGreaterThan \n\n \u0022\u003E\u0022\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintoperation.html#GreaterThanOrEqual","title":"ConstraintOperation.GreaterThanOrEqual","content":"ConstraintOperation.GreaterThanOrEqual \nGreaterThanOrEqual \n\n \u0022\u003E=\u0022\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintoperation.html#InsideInclusiveInterval","title":"ConstraintOperation.InsideInclusiveInterval","content":"ConstraintOperation.InsideInclusiveInterval \nInsideInclusiveInterval \n\n \u0022[]\u0022\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintoperation.html#InsideLeftInclusiveInterval","title":"ConstraintOperation.InsideLeftInclusiveInterval","content":"ConstraintOperation.InsideLeftInclusiveInterval \nInsideLeftInclusiveInterval \n\n \u0022[)\u0022\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintoperation.html#InsideRightInclusiveInterval","title":"ConstraintOperation.InsideRightInclusiveInterval","content":"ConstraintOperation.InsideRightInclusiveInterval \nInsideRightInclusiveInterval \n\n \u0022(]\u0022\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintoperation.html#InsideExclusiveInterval","title":"ConstraintOperation.InsideExclusiveInterval","content":"ConstraintOperation.InsideExclusiveInterval \nInsideExclusiveInterval \n\n \u0022()\u0022\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintoperation.html#OutsideInclusiveInterval","title":"ConstraintOperation.OutsideInclusiveInterval","content":"ConstraintOperation.OutsideInclusiveInterval \nOutsideInclusiveInterval \n\n \u0022][\u0022\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintoperation.html#OutsideLeftInclusiveInterval","title":"ConstraintOperation.OutsideLeftInclusiveInterval","content":"ConstraintOperation.OutsideLeftInclusiveInterval \nOutsideLeftInclusiveInterval \n\n \u0022)(\u0022\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintoperation.html#OutsideRightInclusiveInterval","title":"ConstraintOperation.OutsideRightInclusiveInterval","content":"ConstraintOperation.OutsideRightInclusiveInterval \nOutsideRightInclusiveInterval \n\n \u0022](\u0022\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-constraintoperation.html#OutsideExclusiveInterval","title":"ConstraintOperation.OutsideExclusiveInterval","content":"ConstraintOperation.OutsideExclusiveInterval \nOutsideExclusiveInterval \n\n \u0022](\u0022\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-contourcoloring.html","title":"ContourColoring","content":"ContourColoring \n \nContourColoring.Convert \nConvert \nContourColoring.toString \ntoString \nContourColoring.convert \nconvert \nContourColoring.Fill \nFill \nContourColoring.Heatmap \nHeatmap \nContourColoring.Lines \nLines \nContourColoring.NoColoring \nNoColoring"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-contourcoloring.html#Convert","title":"ContourColoring.Convert","content":"ContourColoring.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-contourcoloring.html#toString","title":"ContourColoring.toString","content":"ContourColoring.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-contourcoloring.html#convert","title":"ContourColoring.convert","content":"ContourColoring.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-contourcoloring.html#Fill","title":"ContourColoring.Fill","content":"ContourColoring.Fill \nFill \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-contourcoloring.html#Heatmap","title":"ContourColoring.Heatmap","content":"ContourColoring.Heatmap \nHeatmap \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-contourcoloring.html#Lines","title":"ContourColoring.Lines","content":"ContourColoring.Lines \nLines \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-contourcoloring.html#NoColoring","title":"ContourColoring.NoColoring","content":"ContourColoring.NoColoring \nNoColoring \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-contourtype.html","title":"ContourType","content":"ContourType \n \nContourType.Convert \nConvert \nContourType.toString \ntoString \nContourType.convert \nconvert \nContourType.Levels \nLevels \nContourType.Constraint \nConstraint"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-contourtype.html#Convert","title":"ContourType.Convert","content":"ContourType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-contourtype.html#toString","title":"ContourType.toString","content":"ContourType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-contourtype.html#convert","title":"ContourType.convert","content":"ContourType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-contourtype.html#Levels","title":"ContourType.Levels","content":"ContourType.Levels \nLevels \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-contourtype.html#Constraint","title":"ContourType.Constraint","content":"ContourType.Constraint \nConstraint \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coordinatetype.html","title":"CoordinateType","content":"CoordinateType \n \nCoordinateType.Convert \nConvert \nCoordinateType.toString \ntoString \nCoordinateType.convert \nconvert \nCoordinateType.Array \nArray \nCoordinateType.Scaled \nScaled"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coordinatetype.html#Convert","title":"CoordinateType.Convert","content":"CoordinateType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coordinatetype.html#toString","title":"CoordinateType.toString","content":"CoordinateType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coordinatetype.html#convert","title":"CoordinateType.convert","content":"CoordinateType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coordinatetype.html#Array","title":"CoordinateType.Array","content":"CoordinateType.Array \nArray \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-coordinatetype.html#Scaled","title":"CoordinateType.Scaled","content":"CoordinateType.Scaled \nScaled \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cumulativedirection.html","title":"CumulativeDirection","content":"CumulativeDirection \n\n Only applies if cumulative is enabled. If \u0022increasing\u0022 (default) we sum all prior bins, so the result increases from left to right.\n If \u0022decreasing\u0022 we sum later bins so the result decreases from left to right.  default: \u0022increasing\u0022\n \nCumulativeDirection.Convert \nConvert \nCumulativeDirection.toString \ntoString \nCumulativeDirection.convert \nconvert \nCumulativeDirection.Increasing \nIncreasing \nCumulativeDirection.Decreasing \nDecreasing"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cumulativedirection.html#Convert","title":"CumulativeDirection.Convert","content":"CumulativeDirection.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cumulativedirection.html#toString","title":"CumulativeDirection.toString","content":"CumulativeDirection.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cumulativedirection.html#convert","title":"CumulativeDirection.convert","content":"CumulativeDirection.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cumulativedirection.html#Increasing","title":"CumulativeDirection.Increasing","content":"CumulativeDirection.Increasing \nIncreasing \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-cumulativedirection.html#Decreasing","title":"CumulativeDirection.Decreasing","content":"CumulativeDirection.Decreasing \nDecreasing \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html","title":"Currentbin","content":"Currentbin \n\n Only applies if cumulative is enabled. Sets whether the current bin is included, excluded, or has half of its value included in\n the current cumulative value. \u0022include\u0022 is the default for compatibility with various other tools, however it introduces\n a half-bin bias to the results. \u0022exclude\u0022 makes the opposite half-bin bias, and \u0022half\u0022 removes it.\n \nCurrentbin.Convert \nConvert \nCurrentbin.toString \ntoString \nCurrentbin.convert \nconvert \nCurrentbin.Include \nInclude \nCurrentbin.Exclude \nExclude \nCurrentbin.Half \nHalf"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html#Convert","title":"Currentbin.Convert","content":"Currentbin.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html#toString","title":"Currentbin.toString","content":"Currentbin.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html#convert","title":"Currentbin.convert","content":"Currentbin.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html#Include","title":"Currentbin.Include","content":"Currentbin.Include \nInclude \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html#Exclude","title":"Currentbin.Exclude","content":"Currentbin.Exclude \nExclude \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-currentbin.html#Half","title":"Currentbin.Half","content":"Currentbin.Half \nHalf \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html","title":"Delaunayaxis","content":"Delaunayaxis \n\n Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation.\n It has an effect if \u0060i\u0060, \u0060j\u0060, \u0060k\u0060 are not provided and \u0060alphahull\u0060 is set to indicate Delaunay triangulation.\n Default is \u0022z\u0022\n \nDelaunayaxis.Convert \nConvert \nDelaunayaxis.toString \ntoString \nDelaunayaxis.convert \nconvert \nDelaunayaxis.X \nX \nDelaunayaxis.Y \nY \nDelaunayaxis.Z \nZ"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html#Convert","title":"Delaunayaxis.Convert","content":"Delaunayaxis.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html#toString","title":"Delaunayaxis.toString","content":"Delaunayaxis.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html#convert","title":"Delaunayaxis.convert","content":"Delaunayaxis.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html#X","title":"Delaunayaxis.X","content":"Delaunayaxis.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html#Y","title":"Delaunayaxis.Y","content":"Delaunayaxis.Y \nY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-delaunayaxis.html#Z","title":"Delaunayaxis.Z","content":"Delaunayaxis.Z \nZ \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-direction.html","title":"Direction","content":"Direction \n\n Specifies the direction at which succeeding sectors follow one another.\n \nDirection.Convert \nConvert \nDirection.toString \ntoString \nDirection.convert \nconvert \nDirection.Clockwise \nClockwise \nDirection.CounterClockwise \nCounterClockwise"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-direction.html#Convert","title":"Direction.Convert","content":"Direction.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-direction.html#toString","title":"Direction.toString","content":"Direction.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-direction.html#convert","title":"Direction.convert","content":"Direction.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-direction.html#Clockwise","title":"Direction.Clockwise","content":"Direction.Clockwise \nClockwise \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-direction.html#CounterClockwise","title":"Direction.CounterClockwise","content":"Direction.CounterClockwise \nCounterClockwise \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-doubleclick.html","title":"DoubleClick","content":"DoubleClick \n \nDoubleClick.Convert \nConvert \nDoubleClick.convert \nconvert \nDoubleClick.Reset \nReset \nDoubleClick.Autosize \nAutosize \nDoubleClick.ResetAutosize \nResetAutosize \nDoubleClick.NoInteraction \nNoInteraction"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-doubleclick.html#Convert","title":"DoubleClick.Convert","content":"DoubleClick.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-doubleclick.html#convert","title":"DoubleClick.convert","content":"DoubleClick.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-doubleclick.html#Reset","title":"DoubleClick.Reset","content":"DoubleClick.Reset \nReset \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-doubleclick.html#Autosize","title":"DoubleClick.Autosize","content":"DoubleClick.Autosize \nAutosize \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-doubleclick.html#ResetAutosize","title":"DoubleClick.ResetAutosize","content":"DoubleClick.ResetAutosize \nResetAutosize \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-doubleclick.html#NoInteraction","title":"DoubleClick.NoInteraction","content":"DoubleClick.NoInteraction \nNoInteraction \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html","title":"DragMode","content":"DragMode \n\n Sets this figure\u0027s behavior when a user performs a mouse \u0027drag\u0027 in the plot area. When set to \u0027zoom\u0027, a portion of the plot will be highlighted,\n when the viewer exits the drag, this highlighted section will be zoomed in on. When set to \u0027pan\u0027, data in the plot will move along with the viewers\n dragging motions. A user can always depress the \u0027shift\u0027 key to access the whatever functionality has not been set as the default. In 3D plots, the\n default drag mode is \u0027rotate\u0027 which rotates the scene.\n \nDragMode.Convert \nConvert \nDragMode.convert \nconvert \nDragMode.Zoom \nZoom \nDragMode.Pan \nPan \nDragMode.Select \nSelect \nDragMode.Lasso \nLasso \nDragMode.DrawClosedPath \nDrawClosedPath \nDragMode.DrawOpenPath \nDrawOpenPath \nDragMode.DrawLine \nDrawLine \nDragMode.DrawRect \nDrawRect \nDragMode.DrawCircle \nDrawCircle \nDragMode.Orbit \nOrbit \nDragMode.TurnTable \nTurnTable \nDragMode.False \nFalse"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#Convert","title":"DragMode.Convert","content":"DragMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#convert","title":"DragMode.convert","content":"DragMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#Zoom","title":"DragMode.Zoom","content":"DragMode.Zoom \nZoom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#Pan","title":"DragMode.Pan","content":"DragMode.Pan \nPan \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#Select","title":"DragMode.Select","content":"DragMode.Select \nSelect \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#Lasso","title":"DragMode.Lasso","content":"DragMode.Lasso \nLasso \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#DrawClosedPath","title":"DragMode.DrawClosedPath","content":"DragMode.DrawClosedPath \nDrawClosedPath \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#DrawOpenPath","title":"DragMode.DrawOpenPath","content":"DragMode.DrawOpenPath \nDrawOpenPath \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#DrawLine","title":"DragMode.DrawLine","content":"DragMode.DrawLine \nDrawLine \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#DrawRect","title":"DragMode.DrawRect","content":"DragMode.DrawRect \nDrawRect \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#DrawCircle","title":"DragMode.DrawCircle","content":"DragMode.DrawCircle \nDrawCircle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#Orbit","title":"DragMode.Orbit","content":"DragMode.Orbit \nOrbit \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#TurnTable","title":"DragMode.TurnTable","content":"DragMode.TurnTable \nTurnTable \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-dragmode.html#False","title":"DragMode.False","content":"DragMode.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawdirection.html","title":"DrawDirection","content":"DrawDirection \n \nDrawDirection.Convert \nConvert \nDrawDirection.toString \ntoString \nDrawDirection.convert \nconvert \nDrawDirection.Ortho \nOrtho \nDrawDirection.Horizontal \nHorizontal \nDrawDirection.Vertical \nVertical \nDrawDirection.Diagonal \nDiagonal"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawdirection.html#Convert","title":"DrawDirection.Convert","content":"DrawDirection.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawdirection.html#toString","title":"DrawDirection.toString","content":"DrawDirection.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawdirection.html#convert","title":"DrawDirection.convert","content":"DrawDirection.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawdirection.html#Ortho","title":"DrawDirection.Ortho","content":"DrawDirection.Ortho \nOrtho \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawdirection.html#Horizontal","title":"DrawDirection.Horizontal","content":"DrawDirection.Horizontal \nHorizontal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawdirection.html#Vertical","title":"DrawDirection.Vertical","content":"DrawDirection.Vertical \nVertical \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawdirection.html#Diagonal","title":"DrawDirection.Diagonal","content":"DrawDirection.Diagonal \nDiagonal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html","title":"DrawingStyle","content":"DrawingStyle \n\n Dash: Sets the drawing style of the lines segments in this trace.\n Sets the style of the lines. Set to a dash string type or a dash length in px.\n \nDrawingStyle.Convert \nConvert \nDrawingStyle.toString \ntoString \nDrawingStyle.convert \nconvert \nDrawingStyle.Solid \nSolid \nDrawingStyle.Dash \nDash \nDrawingStyle.Dot \nDot \nDrawingStyle.DashDot \nDashDot \nDrawingStyle.LongDash \nLongDash \nDrawingStyle.LongDashDot \nLongDashDot \nDrawingStyle.User \nUser"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#Convert","title":"DrawingStyle.Convert","content":"DrawingStyle.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#toString","title":"DrawingStyle.toString","content":"DrawingStyle.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#convert","title":"DrawingStyle.convert","content":"DrawingStyle.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#Solid","title":"DrawingStyle.Solid","content":"DrawingStyle.Solid \nSolid \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#Dash","title":"DrawingStyle.Dash","content":"DrawingStyle.Dash \nDash \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#Dot","title":"DrawingStyle.Dot","content":"DrawingStyle.Dot \nDot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#DashDot","title":"DrawingStyle.DashDot","content":"DrawingStyle.DashDot \nDashDot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#LongDash","title":"DrawingStyle.LongDash","content":"DrawingStyle.LongDash \nLongDash \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#LongDashDot","title":"DrawingStyle.LongDashDot","content":"DrawingStyle.LongDashDot \nLongDashDot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-drawingstyle.html#User","title":"DrawingStyle.User","content":"DrawingStyle.User \nUser \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-entrywidthmode.html","title":"EntryWidthMode","content":"EntryWidthMode \n \nEntryWidthMode.Convert \nConvert \nEntryWidthMode.toString \ntoString \nEntryWidthMode.convert \nconvert \nEntryWidthMode.Fraction \nFraction \nEntryWidthMode.Pixels \nPixels"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-entrywidthmode.html#Convert","title":"EntryWidthMode.Convert","content":"EntryWidthMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-entrywidthmode.html#toString","title":"EntryWidthMode.toString","content":"EntryWidthMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-entrywidthmode.html#convert","title":"EntryWidthMode.convert","content":"EntryWidthMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-entrywidthmode.html#Fraction","title":"EntryWidthMode.Fraction","content":"EntryWidthMode.Fraction \nFraction \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-entrywidthmode.html#Pixels","title":"EntryWidthMode.Pixels","content":"EntryWidthMode.Pixels \nPixels \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-errortype.html","title":"ErrorType","content":"ErrorType \n \nErrorType.Convert \nConvert \nErrorType.toString \ntoString \nErrorType.convert \nconvert \nErrorType.Percent \nPercent \nErrorType.Constant \nConstant \nErrorType.Sqrt \nSqrt \nErrorType.Data \nData"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-errortype.html#Convert","title":"ErrorType.Convert","content":"ErrorType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-errortype.html#toString","title":"ErrorType.toString","content":"ErrorType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-errortype.html#convert","title":"ErrorType.convert","content":"ErrorType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-errortype.html#Percent","title":"ErrorType.Percent","content":"ErrorType.Percent \nPercent \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-errortype.html#Constant","title":"ErrorType.Constant","content":"ErrorType.Constant \nConstant \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-errortype.html#Sqrt","title":"ErrorType.Sqrt","content":"ErrorType.Sqrt \nSqrt \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-errortype.html#Data","title":"ErrorType.Data","content":"ErrorType.Data \nData \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html","title":"ExponentFormat","content":"ExponentFormat \n\n Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \u0022none\u0022, it appears as 1,000,000,000. If \u0022e\u0022, 1e\u002B9. If \u0022E\u0022, 1E\u002B9.\n If \u0022power\u0022, 1x10^9 (with 9 in a super script). If \u0022SI\u0022, 1G. If \u0022B\u0022, 1B.\n \nExponentFormat.Convert \nConvert \nExponentFormat.toString \ntoString \nExponentFormat.convert \nconvert \nExponentFormat.B \nB \nExponentFormat.SI \nSI \nExponentFormat.Power \nPower \nExponentFormat.Ecapital \nEcapital \nExponentFormat.E \nE \nExponentFormat.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#Convert","title":"ExponentFormat.Convert","content":"ExponentFormat.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#toString","title":"ExponentFormat.toString","content":"ExponentFormat.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#convert","title":"ExponentFormat.convert","content":"ExponentFormat.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#B","title":"ExponentFormat.B","content":"ExponentFormat.B \nB \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#SI","title":"ExponentFormat.SI","content":"ExponentFormat.SI \nSI \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#Power","title":"ExponentFormat.Power","content":"ExponentFormat.Power \nPower \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#Ecapital","title":"ExponentFormat.Ecapital","content":"ExponentFormat.Ecapital \nEcapital \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#E","title":"ExponentFormat.E","content":"ExponentFormat.E \nE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-exponentformat.html#None","title":"ExponentFormat.None","content":"ExponentFormat.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html","title":"Fill","content":"Fill \n\n Sets the area to fill with a solid color. (default: \u0022none\u0022 )\n \nFill.Convert \nConvert \nFill.toString \ntoString \nFill.convert \nconvert \nFill.None \nNone \nFill.ToZero_y \nToZero_y \nFill.ToZero_x \nToZero_x \nFill.ToNext_y \nToNext_y \nFill.ToNext_x \nToNext_x \nFill.ToSelf \nToSelf \nFill.ToNext \nToNext"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#Convert","title":"Fill.Convert","content":"Fill.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#toString","title":"Fill.toString","content":"Fill.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#convert","title":"Fill.convert","content":"Fill.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#None","title":"Fill.None","content":"Fill.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToZero_y","title":"Fill.ToZero_y","content":"Fill.ToZero_y \nToZero_y \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToZero_x","title":"Fill.ToZero_x","content":"Fill.ToZero_x \nToZero_x \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToNext_y","title":"Fill.ToNext_y","content":"Fill.ToNext_y \nToNext_y \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToNext_x","title":"Fill.ToNext_x","content":"Fill.ToNext_x \nToNext_x \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToSelf","title":"Fill.ToSelf","content":"Fill.ToSelf \nToSelf \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fill.html#ToNext","title":"Fill.ToNext","content":"Fill.ToNext \nToNext \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fillrule.html","title":"FillRule","content":"FillRule \n \nFillRule.Convert \nConvert \nFillRule.toString \ntoString \nFillRule.convert \nconvert \nFillRule.EvenOdd \nEvenOdd \nFillRule.NonZero \nNonZero"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fillrule.html#Convert","title":"FillRule.Convert","content":"FillRule.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fillrule.html#toString","title":"FillRule.toString","content":"FillRule.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fillrule.html#convert","title":"FillRule.convert","content":"FillRule.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fillrule.html#EvenOdd","title":"FillRule.EvenOdd","content":"FillRule.EvenOdd \nEvenOdd \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fillrule.html#NonZero","title":"FillRule.NonZero","content":"FillRule.NonZero \nNonZero \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html","title":"FontFamily","content":"FontFamily \n\n Names of installed font families\n \nFontFamily.Convert \nConvert \nFontFamily.toString \ntoString \nFontFamily.convert \nconvert \nFontFamily.Arial \nArial \nFontFamily.Balto \nBalto \nFontFamily.Courier_New \nCourier_New \nFontFamily.Consolas \nConsolas \nFontFamily.Droid_Sans \nDroid_Sans \nFontFamily.Droid_Serif \nDroid_Serif \nFontFamily.Droid_Sans_Mono \nDroid_Sans_Mono \nFontFamily.Gravitas_One \nGravitas_One \nFontFamily.Old_Standard_TT \nOld_Standard_TT \nFontFamily.Open_Sans \nOpen_Sans \nFontFamily.Overpass \nOverpass \nFontFamily.PT_Sans_Narrow \nPT_Sans_Narrow \nFontFamily.Raleway \nRaleway \nFontFamily.Times_New_Roman \nTimes_New_Roman \nFontFamily.Custom \nCustom"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Convert","title":"FontFamily.Convert","content":"FontFamily.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#toString","title":"FontFamily.toString","content":"FontFamily.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#convert","title":"FontFamily.convert","content":"FontFamily.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Arial","title":"FontFamily.Arial","content":"FontFamily.Arial \nArial \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Balto","title":"FontFamily.Balto","content":"FontFamily.Balto \nBalto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Courier_New","title":"FontFamily.Courier_New","content":"FontFamily.Courier_New \nCourier_New \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Consolas","title":"FontFamily.Consolas","content":"FontFamily.Consolas \nConsolas \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Droid_Sans","title":"FontFamily.Droid_Sans","content":"FontFamily.Droid_Sans \nDroid_Sans \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Droid_Serif","title":"FontFamily.Droid_Serif","content":"FontFamily.Droid_Serif \nDroid_Serif \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Droid_Sans_Mono","title":"FontFamily.Droid_Sans_Mono","content":"FontFamily.Droid_Sans_Mono \nDroid_Sans_Mono \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Gravitas_One","title":"FontFamily.Gravitas_One","content":"FontFamily.Gravitas_One \nGravitas_One \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Old_Standard_TT","title":"FontFamily.Old_Standard_TT","content":"FontFamily.Old_Standard_TT \nOld_Standard_TT \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Open_Sans","title":"FontFamily.Open_Sans","content":"FontFamily.Open_Sans \nOpen_Sans \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Overpass","title":"FontFamily.Overpass","content":"FontFamily.Overpass \nOverpass \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#PT_Sans_Narrow","title":"FontFamily.PT_Sans_Narrow","content":"FontFamily.PT_Sans_Narrow \nPT_Sans_Narrow \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Raleway","title":"FontFamily.Raleway","content":"FontFamily.Raleway \nRaleway \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Times_New_Roman","title":"FontFamily.Times_New_Roman","content":"FontFamily.Times_New_Roman \nTimes_New_Roman \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-fontfamily.html#Custom","title":"FontFamily.Custom","content":"FontFamily.Custom \nCustom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-funnelmode.html","title":"FunnelMode","content":"FunnelMode \n \nFunnelMode.Convert \nConvert \nFunnelMode.toString \ntoString \nFunnelMode.convert \nconvert \nFunnelMode.Stack \nStack \nFunnelMode.Group \nGroup \nFunnelMode.Overlay \nOverlay"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-funnelmode.html#Convert","title":"FunnelMode.Convert","content":"FunnelMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-funnelmode.html#toString","title":"FunnelMode.toString","content":"FunnelMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-funnelmode.html#convert","title":"FunnelMode.convert","content":"FunnelMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-funnelmode.html#Stack","title":"FunnelMode.Stack","content":"FunnelMode.Stack \nStack \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-funnelmode.html#Group","title":"FunnelMode.Group","content":"FunnelMode.Group \nGroup \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-funnelmode.html#Overlay","title":"FunnelMode.Overlay","content":"FunnelMode.Overlay \nOverlay \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html","title":"GeoFitBounds","content":"GeoFitBounds \n\nUsed for the Layout.geo field. Determines if this subplot\u0027s view settings are auto-computed to fit trace data. On scoped maps, setting \u0060fitbounds\u0060 leads to \u0060center.lon\u0060 and \u0060center.lat\u0060 getting auto-filled. On maps with a non-clipped projection, setting \u0060fitbounds\u0060 leads to \u0060center.lon\u0060, \u0060center.lat\u0060, and \u0060projection.rotation.lon\u0060 getting auto-filled. On maps with a clipped projection, setting \u0060fitbounds\u0060 leads to \u0060center.lon\u0060, \u0060center.lat\u0060, \u0060projection.rotation.lon\u0060, \u0060projection.rotation.lat\u0060, \u0060lonaxis.range\u0060 and \u0060lonaxis.range\u0060 getting auto-filled. If \u0022locations\u0022, only the trace\u0027s visible locations are considered in the \u0060fitbounds\u0060 computations. If \u0022geojson\u0022, the entire trace input \u0060geojson\u0060 (if provided) is considered in the \u0060fitbounds\u0060 computations, Defaults to \u0022false\u0022.\n \nGeoFitBounds.Convert \nConvert \nGeoFitBounds.convert \nconvert \nGeoFitBounds.False \nFalse \nGeoFitBounds.Locations \nLocations \nGeoFitBounds.GeoJson \nGeoJson"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html#Convert","title":"GeoFitBounds.Convert","content":"GeoFitBounds.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html#convert","title":"GeoFitBounds.convert","content":"GeoFitBounds.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html#False","title":"GeoFitBounds.False","content":"GeoFitBounds.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html#Locations","title":"GeoFitBounds.Locations","content":"GeoFitBounds.Locations \nLocations \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geofitbounds.html#GeoJson","title":"GeoFitBounds.GeoJson","content":"GeoFitBounds.GeoJson \nGeoJson \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html","title":"GeoProjectionType","content":"GeoProjectionType \n \nGeoProjectionType.Convert \nConvert \nGeoProjectionType.toString \ntoString \nGeoProjectionType.convert \nconvert \nGeoProjectionType.EquiRectangular \nEquiRectangular \nGeoProjectionType.Mercator \nMercator \nGeoProjectionType.Orthographic \nOrthographic \nGeoProjectionType.NaturalEarth \nNaturalEarth \nGeoProjectionType.Kavrayskiy7 \nKavrayskiy7 \nGeoProjectionType.Miller \nMiller \nGeoProjectionType.Robinson \nRobinson \nGeoProjectionType.Eckert4 \nEckert4 \nGeoProjectionType.AzimuthalEqualArea \nAzimuthalEqualArea \nGeoProjectionType.AzimuthalEquidistant \nAzimuthalEquidistant \nGeoProjectionType.ConicEqualArea \nConicEqualArea \nGeoProjectionType.ConicConformal \nConicConformal \nGeoProjectionType.ConicEquidistant \nConicEquidistant \nGeoProjectionType.Gnomonic \nGnomonic \nGeoProjectionType.Stereographic \nStereographic \nGeoProjectionType.Mollweide \nMollweide \nGeoProjectionType.Hammer \nHammer \nGeoProjectionType.TransverseMercator \nTransverseMercator \nGeoProjectionType.AlbersUSA \nAlbersUSA \nGeoProjectionType.WinkelTripel \nWinkelTripel \nGeoProjectionType.Aitoff \nAitoff \nGeoProjectionType.Sinusoidal \nSinusoidal"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Convert","title":"GeoProjectionType.Convert","content":"GeoProjectionType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#toString","title":"GeoProjectionType.toString","content":"GeoProjectionType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#convert","title":"GeoProjectionType.convert","content":"GeoProjectionType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#EquiRectangular","title":"GeoProjectionType.EquiRectangular","content":"GeoProjectionType.EquiRectangular \nEquiRectangular \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Mercator","title":"GeoProjectionType.Mercator","content":"GeoProjectionType.Mercator \nMercator \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Orthographic","title":"GeoProjectionType.Orthographic","content":"GeoProjectionType.Orthographic \nOrthographic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#NaturalEarth","title":"GeoProjectionType.NaturalEarth","content":"GeoProjectionType.NaturalEarth \nNaturalEarth \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Kavrayskiy7","title":"GeoProjectionType.Kavrayskiy7","content":"GeoProjectionType.Kavrayskiy7 \nKavrayskiy7 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Miller","title":"GeoProjectionType.Miller","content":"GeoProjectionType.Miller \nMiller \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Robinson","title":"GeoProjectionType.Robinson","content":"GeoProjectionType.Robinson \nRobinson \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Eckert4","title":"GeoProjectionType.Eckert4","content":"GeoProjectionType.Eckert4 \nEckert4 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#AzimuthalEqualArea","title":"GeoProjectionType.AzimuthalEqualArea","content":"GeoProjectionType.AzimuthalEqualArea \nAzimuthalEqualArea \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#AzimuthalEquidistant","title":"GeoProjectionType.AzimuthalEquidistant","content":"GeoProjectionType.AzimuthalEquidistant \nAzimuthalEquidistant \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#ConicEqualArea","title":"GeoProjectionType.ConicEqualArea","content":"GeoProjectionType.ConicEqualArea \nConicEqualArea \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#ConicConformal","title":"GeoProjectionType.ConicConformal","content":"GeoProjectionType.ConicConformal \nConicConformal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#ConicEquidistant","title":"GeoProjectionType.ConicEquidistant","content":"GeoProjectionType.ConicEquidistant \nConicEquidistant \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Gnomonic","title":"GeoProjectionType.Gnomonic","content":"GeoProjectionType.Gnomonic \nGnomonic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Stereographic","title":"GeoProjectionType.Stereographic","content":"GeoProjectionType.Stereographic \nStereographic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Mollweide","title":"GeoProjectionType.Mollweide","content":"GeoProjectionType.Mollweide \nMollweide \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Hammer","title":"GeoProjectionType.Hammer","content":"GeoProjectionType.Hammer \nHammer \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#TransverseMercator","title":"GeoProjectionType.TransverseMercator","content":"GeoProjectionType.TransverseMercator \nTransverseMercator \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#AlbersUSA","title":"GeoProjectionType.AlbersUSA","content":"GeoProjectionType.AlbersUSA \nAlbersUSA \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#WinkelTripel","title":"GeoProjectionType.WinkelTripel","content":"GeoProjectionType.WinkelTripel \nWinkelTripel \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Aitoff","title":"GeoProjectionType.Aitoff","content":"GeoProjectionType.Aitoff \nAitoff \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoprojectiontype.html#Sinusoidal","title":"GeoProjectionType.Sinusoidal","content":"GeoProjectionType.Sinusoidal \nSinusoidal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-georesolution.html","title":"GeoResolution","content":"GeoResolution \n\nUsed for the Layout.geo field. Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.\n \nGeoResolution.Convert \nConvert \nGeoResolution.toString \ntoString \nGeoResolution.convert \nconvert \nGeoResolution.R110 \nR110 \nGeoResolution.R50 \nR50"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-georesolution.html#Convert","title":"GeoResolution.Convert","content":"GeoResolution.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-georesolution.html#toString","title":"GeoResolution.toString","content":"GeoResolution.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-georesolution.html#convert","title":"GeoResolution.convert","content":"GeoResolution.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-georesolution.html#R110","title":"GeoResolution.R110","content":"GeoResolution.R110 \nR110 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-georesolution.html#R50","title":"GeoResolution.R50","content":"GeoResolution.R50 \nR50 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html","title":"GeoScope","content":"GeoScope \n \nGeoScope.Convert \nConvert \nGeoScope.toString \ntoString \nGeoScope.convert \nconvert \nGeoScope.World \nWorld \nGeoScope.Usa \nUsa \nGeoScope.Europe \nEurope \nGeoScope.Asia \nAsia \nGeoScope.Africa \nAfrica \nGeoScope.NorthAmerica \nNorthAmerica \nGeoScope.SouthAmerica \nSouthAmerica"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#Convert","title":"GeoScope.Convert","content":"GeoScope.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#toString","title":"GeoScope.toString","content":"GeoScope.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#convert","title":"GeoScope.convert","content":"GeoScope.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#World","title":"GeoScope.World","content":"GeoScope.World \nWorld \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#Usa","title":"GeoScope.Usa","content":"GeoScope.Usa \nUsa \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#Europe","title":"GeoScope.Europe","content":"GeoScope.Europe \nEurope \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#Asia","title":"GeoScope.Asia","content":"GeoScope.Asia \nAsia \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#Africa","title":"GeoScope.Africa","content":"GeoScope.Africa \nAfrica \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#NorthAmerica","title":"GeoScope.NorthAmerica","content":"GeoScope.NorthAmerica \nNorthAmerica \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-geoscope.html#SouthAmerica","title":"GeoScope.SouthAmerica","content":"GeoScope.SouthAmerica \nSouthAmerica \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-gradienttype.html","title":"GradientType","content":"GradientType \n \nGradientType.Convert \nConvert \nGradientType.toString \ntoString \nGradientType.convert \nconvert \nGradientType.Radial \nRadial \nGradientType.Horizontal \nHorizontal \nGradientType.Vertical \nVertical \nGradientType.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-gradienttype.html#Convert","title":"GradientType.Convert","content":"GradientType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-gradienttype.html#toString","title":"GradientType.toString","content":"GradientType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-gradienttype.html#convert","title":"GradientType.convert","content":"GradientType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-gradienttype.html#Radial","title":"GradientType.Radial","content":"GradientType.Radial \nRadial \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-gradienttype.html#Horizontal","title":"GradientType.Horizontal","content":"GradientType.Horizontal \nHorizontal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-gradienttype.html#Vertical","title":"GradientType.Vertical","content":"GradientType.Vertical \nVertical \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-gradienttype.html#None","title":"GradientType.None","content":"GradientType.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html","title":"GroupNorm","content":"GroupNorm \n \nGroupNorm.Convert \nConvert \nGroupNorm.toString \ntoString \nGroupNorm.convert \nconvert \nGroupNorm.None \nNone \nGroupNorm.Fraction \nFraction \nGroupNorm.Percent \nPercent"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html#Convert","title":"GroupNorm.Convert","content":"GroupNorm.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html#toString","title":"GroupNorm.toString","content":"GroupNorm.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html#convert","title":"GroupNorm.convert","content":"GroupNorm.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html#None","title":"GroupNorm.None","content":"GroupNorm.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html#Fraction","title":"GroupNorm.Fraction","content":"GroupNorm.Fraction \nFraction \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-groupnorm.html#Percent","title":"GroupNorm.Percent","content":"GroupNorm.Percent \nPercent \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html","title":"HistFunc","content":"HistFunc \n\n Sets the binning function used for this histogram trace. The default value is \u0027count\u0027 where the histogram values are computed\n by counting the number of values lying inside each bin. With \u0027histfunc\u0027 set to \u0027sum\u0027, \u0027avg\u0027, \u0027min\u0027 or \u0027max\u0027, the histogram values\n are computed using the sum, the average, the minimum or the \u0027maximum\u0027 of the values lying inside each bin respectively.\n default: Count\n \nHistFunc.Convert \nConvert \nHistFunc.toString \ntoString \nHistFunc.convert \nconvert \nHistFunc.Count \nCount \nHistFunc.Sum \nSum \nHistFunc.Avg \nAvg \nHistFunc.Min \nMin \nHistFunc.Max \nMax"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#Convert","title":"HistFunc.Convert","content":"HistFunc.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#toString","title":"HistFunc.toString","content":"HistFunc.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#convert","title":"HistFunc.convert","content":"HistFunc.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#Count","title":"HistFunc.Count","content":"HistFunc.Count \nCount \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#Sum","title":"HistFunc.Sum","content":"HistFunc.Sum \nSum \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#Avg","title":"HistFunc.Avg","content":"HistFunc.Avg \nAvg \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#Min","title":"HistFunc.Min","content":"HistFunc.Min \nMin \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histfunc.html#Max","title":"HistFunc.Max","content":"HistFunc.Max \nMax \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html","title":"HistNorm","content":"HistNorm \n\n Sets the type of normalization for this histogram trace. By default (\u0027histnorm\u0027 set to \u0027\u0027) the height of each bar\n displays the frequency of occurrence, i.e., the number of times this value was found in the corresponding bin.\n If set to \u0027percent\u0027, the height of each bar displays the percentage of total occurrences found within the corresponding bin.\n If set to \u0027probability\u0027, the height of each bar displays the probability that an event will fall into the corresponding bin.\n If set to \u0027density\u0027, the height of each bar is equal to the number of occurrences in a bin divided by the size of the bin\n interval such that summing the area of all bins will yield the total number of occurrences. If set to \u0027probability density\u0027,\n the height of each bar is equal to the number of probability that an event will fall into the corresponding bin divided by\n the size of the bin interval such that summing the area of all bins will yield 1.\n default: None\n \nHistNorm.Convert \nConvert \nHistNorm.toString \ntoString \nHistNorm.convert \nconvert \nHistNorm.None \nNone \nHistNorm.Percent \nPercent \nHistNorm.Probability \nProbability \nHistNorm.Density \nDensity \nHistNorm.ProbabilityDensity \nProbabilityDensity"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#Convert","title":"HistNorm.Convert","content":"HistNorm.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#toString","title":"HistNorm.toString","content":"HistNorm.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#convert","title":"HistNorm.convert","content":"HistNorm.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#None","title":"HistNorm.None","content":"HistNorm.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#Percent","title":"HistNorm.Percent","content":"HistNorm.Percent \nPercent \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#Probability","title":"HistNorm.Probability","content":"HistNorm.Probability \nProbability \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#Density","title":"HistNorm.Density","content":"HistNorm.Density \nDensity \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-histnorm.html#ProbabilityDensity","title":"HistNorm.ProbabilityDensity","content":"HistNorm.ProbabilityDensity \nProbabilityDensity \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html","title":"HorizontalAlign","content":"HorizontalAlign \n \nHorizontalAlign.Convert \nConvert \nHorizontalAlign.toString \ntoString \nHorizontalAlign.convert \nconvert \nHorizontalAlign.Left \nLeft \nHorizontalAlign.Center \nCenter \nHorizontalAlign.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html#Convert","title":"HorizontalAlign.Convert","content":"HorizontalAlign.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html#toString","title":"HorizontalAlign.toString","content":"HorizontalAlign.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html#convert","title":"HorizontalAlign.convert","content":"HorizontalAlign.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html#Left","title":"HorizontalAlign.Left","content":"HorizontalAlign.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html#Center","title":"HorizontalAlign.Center","content":"HorizontalAlign.Center \nCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-horizontalalign.html#Right","title":"HorizontalAlign.Right","content":"HorizontalAlign.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html","title":"HoverInfo","content":"HoverInfo \n \nHoverInfo.Convert \nConvert \nHoverInfo.toString \ntoString \nHoverInfo.convert \nconvert \nHoverInfo.X \nX \nHoverInfo.XY \nXY \nHoverInfo.XYZ \nXYZ \nHoverInfo.XYZText \nXYZText \nHoverInfo.Y \nY \nHoverInfo.YZ \nYZ \nHoverInfo.YZText \nYZText \nHoverInfo.YZTextNames \nYZTextNames \nHoverInfo.Z \nZ \nHoverInfo.ZText \nZText \nHoverInfo.ZTextName \nZTextName \nHoverInfo.Text \nText \nHoverInfo.TextName \nTextName \nHoverInfo.Name \nName \nHoverInfo.All \nAll"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#Convert","title":"HoverInfo.Convert","content":"HoverInfo.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#toString","title":"HoverInfo.toString","content":"HoverInfo.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#convert","title":"HoverInfo.convert","content":"HoverInfo.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#X","title":"HoverInfo.X","content":"HoverInfo.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#XY","title":"HoverInfo.XY","content":"HoverInfo.XY \nXY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#XYZ","title":"HoverInfo.XYZ","content":"HoverInfo.XYZ \nXYZ \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#XYZText","title":"HoverInfo.XYZText","content":"HoverInfo.XYZText \nXYZText \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#Y","title":"HoverInfo.Y","content":"HoverInfo.Y \nY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#YZ","title":"HoverInfo.YZ","content":"HoverInfo.YZ \nYZ \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#YZText","title":"HoverInfo.YZText","content":"HoverInfo.YZText \nYZText \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#YZTextNames","title":"HoverInfo.YZTextNames","content":"HoverInfo.YZTextNames \nYZTextNames \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#Z","title":"HoverInfo.Z","content":"HoverInfo.Z \nZ \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#ZText","title":"HoverInfo.ZText","content":"HoverInfo.ZText \nZText \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#ZTextName","title":"HoverInfo.ZTextName","content":"HoverInfo.ZTextName \nZTextName \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#Text","title":"HoverInfo.Text","content":"HoverInfo.Text \nText \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#TextName","title":"HoverInfo.TextName","content":"HoverInfo.TextName \nTextName \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#Name","title":"HoverInfo.Name","content":"HoverInfo.Name \nName \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoverinfo.html#All","title":"HoverInfo.All","content":"HoverInfo.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html","title":"HoverMode","content":"HoverMode \n\n Sets this figure\u0027s behavior when a user hovers over it. When set to \u0027x\u0027, all data sharing the same \u0027x\u0027 coordinate will be shown on screen\n with corresponding trace labels. When set to \u0027y\u0027 all data sharing the same \u0027y\u0027 coordinates will be shown on the screen with corresponding\n trace labels. When set to \u0027closest\u0027, information about the data point closest to where the viewer is hovering will appear.\n \nHoverMode.Convert \nConvert \nHoverMode.convert \nconvert \nHoverMode.Closest \nClosest \nHoverMode.X \nX \nHoverMode.Y \nY \nHoverMode.False \nFalse \nHoverMode.XUnified \nXUnified \nHoverMode.YUnified \nYUnified"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#Convert","title":"HoverMode.Convert","content":"HoverMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#convert","title":"HoverMode.convert","content":"HoverMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#Closest","title":"HoverMode.Closest","content":"HoverMode.Closest \nClosest \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#X","title":"HoverMode.X","content":"HoverMode.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#Y","title":"HoverMode.Y","content":"HoverMode.Y \nY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#False","title":"HoverMode.False","content":"HoverMode.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#XUnified","title":"HoverMode.XUnified","content":"HoverMode.XUnified \nXUnified \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hovermode.html#YUnified","title":"HoverMode.YUnified","content":"HoverMode.YUnified \nYUnified \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoveron.html","title":"HoverOn","content":"HoverOn \n \nHoverOn.Convert \nConvert \nHoverOn.toString \ntoString \nHoverOn.convert \nconvert \nHoverOn.Points \nPoints \nHoverOn.Fills \nFills \nHoverOn.PointsFills \nPointsFills"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoveron.html#Convert","title":"HoverOn.Convert","content":"HoverOn.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoveron.html#toString","title":"HoverOn.toString","content":"HoverOn.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoveron.html#convert","title":"HoverOn.convert","content":"HoverOn.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoveron.html#Points","title":"HoverOn.Points","content":"HoverOn.Points \nPoints \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoveron.html#Fills","title":"HoverOn.Fills","content":"HoverOn.Fills \nFills \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-hoveron.html#PointsFills","title":"HoverOn.PointsFills","content":"HoverOn.PointsFills \nPointsFills \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-iciclecount.html","title":"IcicleCount","content":"IcicleCount \n \nIcicleCount.Convert \nConvert \nIcicleCount.toString \ntoString \nIcicleCount.convert \nconvert \nIcicleCount.Branches \nBranches \nIcicleCount.Leaves \nLeaves \nIcicleCount.BranchesLeaves \nBranchesLeaves"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-iciclecount.html#Convert","title":"IcicleCount.Convert","content":"IcicleCount.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-iciclecount.html#toString","title":"IcicleCount.toString","content":"IcicleCount.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-iciclecount.html#convert","title":"IcicleCount.convert","content":"IcicleCount.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-iciclecount.html#Branches","title":"IcicleCount.Branches","content":"IcicleCount.Branches \nBranches \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-iciclecount.html#Leaves","title":"IcicleCount.Leaves","content":"IcicleCount.Leaves \nLeaves \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-iciclecount.html#BranchesLeaves","title":"IcicleCount.BranchesLeaves","content":"IcicleCount.BranchesLeaves \nBranchesLeaves \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html","title":"ImageFormat","content":"ImageFormat \n \nImageFormat.Convert \nConvert \nImageFormat.toString \ntoString \nImageFormat.convert \nconvert \nImageFormat.SVG \nSVG \nImageFormat.PNG \nPNG \nImageFormat.JPEG \nJPEG"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html#Convert","title":"ImageFormat.Convert","content":"ImageFormat.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html#toString","title":"ImageFormat.toString","content":"ImageFormat.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html#convert","title":"ImageFormat.convert","content":"ImageFormat.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html#SVG","title":"ImageFormat.SVG","content":"ImageFormat.SVG \nSVG \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html#PNG","title":"ImageFormat.PNG","content":"ImageFormat.PNG \nPNG \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-imageformat.html#JPEG","title":"ImageFormat.JPEG","content":"ImageFormat.JPEG \nJPEG \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatoralignment.html","title":"IndicatorAlignment","content":"IndicatorAlignment \n \nIndicatorAlignment.Convert \nConvert \nIndicatorAlignment.toString \ntoString \nIndicatorAlignment.convert \nconvert \nIndicatorAlignment.Left \nLeft \nIndicatorAlignment.Center \nCenter \nIndicatorAlignment.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatoralignment.html#Convert","title":"IndicatorAlignment.Convert","content":"IndicatorAlignment.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatoralignment.html#toString","title":"IndicatorAlignment.toString","content":"IndicatorAlignment.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatoralignment.html#convert","title":"IndicatorAlignment.convert","content":"IndicatorAlignment.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatoralignment.html#Left","title":"IndicatorAlignment.Left","content":"IndicatorAlignment.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatoralignment.html#Center","title":"IndicatorAlignment.Center","content":"IndicatorAlignment.Center \nCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatoralignment.html#Right","title":"IndicatorAlignment.Right","content":"IndicatorAlignment.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatordeltaposition.html","title":"IndicatorDeltaPosition","content":"IndicatorDeltaPosition \n \nIndicatorDeltaPosition.Convert \nConvert \nIndicatorDeltaPosition.toString \ntoString \nIndicatorDeltaPosition.convert \nconvert \nIndicatorDeltaPosition.Top \nTop \nIndicatorDeltaPosition.Bottom \nBottom \nIndicatorDeltaPosition.Left \nLeft \nIndicatorDeltaPosition.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatordeltaposition.html#Convert","title":"IndicatorDeltaPosition.Convert","content":"IndicatorDeltaPosition.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatordeltaposition.html#toString","title":"IndicatorDeltaPosition.toString","content":"IndicatorDeltaPosition.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatordeltaposition.html#convert","title":"IndicatorDeltaPosition.convert","content":"IndicatorDeltaPosition.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatordeltaposition.html#Top","title":"IndicatorDeltaPosition.Top","content":"IndicatorDeltaPosition.Top \nTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatordeltaposition.html#Bottom","title":"IndicatorDeltaPosition.Bottom","content":"IndicatorDeltaPosition.Bottom \nBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatordeltaposition.html#Left","title":"IndicatorDeltaPosition.Left","content":"IndicatorDeltaPosition.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatordeltaposition.html#Right","title":"IndicatorDeltaPosition.Right","content":"IndicatorDeltaPosition.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatorgaugeshape.html","title":"IndicatorGaugeShape","content":"IndicatorGaugeShape \n \nIndicatorGaugeShape.Convert \nConvert \nIndicatorGaugeShape.toString \ntoString \nIndicatorGaugeShape.convert \nconvert \nIndicatorGaugeShape.Angular \nAngular \nIndicatorGaugeShape.Bullet \nBullet"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatorgaugeshape.html#Convert","title":"IndicatorGaugeShape.Convert","content":"IndicatorGaugeShape.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatorgaugeshape.html#toString","title":"IndicatorGaugeShape.toString","content":"IndicatorGaugeShape.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatorgaugeshape.html#convert","title":"IndicatorGaugeShape.convert","content":"IndicatorGaugeShape.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatorgaugeshape.html#Angular","title":"IndicatorGaugeShape.Angular","content":"IndicatorGaugeShape.Angular \nAngular \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatorgaugeshape.html#Bullet","title":"IndicatorGaugeShape.Bullet","content":"IndicatorGaugeShape.Bullet \nBullet \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html","title":"IndicatorMode","content":"IndicatorMode \n \nIndicatorMode.Convert \nConvert \nIndicatorMode.toString \ntoString \nIndicatorMode.convert \nconvert \nIndicatorMode.Number \nNumber \nIndicatorMode.Delta \nDelta \nIndicatorMode.Gauge \nGauge \nIndicatorMode.NumberDelta \nNumberDelta \nIndicatorMode.NumberGauge \nNumberGauge \nIndicatorMode.DeltaGauge \nDeltaGauge \nIndicatorMode.NumberDeltaGauge \nNumberDeltaGauge"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#Convert","title":"IndicatorMode.Convert","content":"IndicatorMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#toString","title":"IndicatorMode.toString","content":"IndicatorMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#convert","title":"IndicatorMode.convert","content":"IndicatorMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#Number","title":"IndicatorMode.Number","content":"IndicatorMode.Number \nNumber \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#Delta","title":"IndicatorMode.Delta","content":"IndicatorMode.Delta \nDelta \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#Gauge","title":"IndicatorMode.Gauge","content":"IndicatorMode.Gauge \nGauge \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#NumberDelta","title":"IndicatorMode.NumberDelta","content":"IndicatorMode.NumberDelta \nNumberDelta \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#NumberGauge","title":"IndicatorMode.NumberGauge","content":"IndicatorMode.NumberGauge \nNumberGauge \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#DeltaGauge","title":"IndicatorMode.DeltaGauge","content":"IndicatorMode.DeltaGauge \nDeltaGauge \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-indicatormode.html#NumberDeltaGauge","title":"IndicatorMode.NumberDeltaGauge","content":"IndicatorMode.NumberDeltaGauge \nNumberDeltaGauge \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextanchor.html","title":"InsideTextAnchor","content":"InsideTextAnchor \n \nInsideTextAnchor.Convert \nConvert \nInsideTextAnchor.toString \ntoString \nInsideTextAnchor.convert \nconvert \nInsideTextAnchor.End \nEnd \nInsideTextAnchor.Middle \nMiddle \nInsideTextAnchor.Start \nStart"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextanchor.html#Convert","title":"InsideTextAnchor.Convert","content":"InsideTextAnchor.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextanchor.html#toString","title":"InsideTextAnchor.toString","content":"InsideTextAnchor.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextanchor.html#convert","title":"InsideTextAnchor.convert","content":"InsideTextAnchor.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextanchor.html#End","title":"InsideTextAnchor.End","content":"InsideTextAnchor.End \nEnd \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextanchor.html#Middle","title":"InsideTextAnchor.Middle","content":"InsideTextAnchor.Middle \nMiddle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextanchor.html#Start","title":"InsideTextAnchor.Start","content":"InsideTextAnchor.Start \nStart \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextorientation.html","title":"InsideTextOrientation","content":"InsideTextOrientation \n \nInsideTextOrientation.Convert \nConvert \nInsideTextOrientation.toString \ntoString \nInsideTextOrientation.convert \nconvert \nInsideTextOrientation.Horizontal \nHorizontal \nInsideTextOrientation.Radial \nRadial \nInsideTextOrientation.Tangential \nTangential \nInsideTextOrientation.Auto \nAuto"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextorientation.html#Convert","title":"InsideTextOrientation.Convert","content":"InsideTextOrientation.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextorientation.html#toString","title":"InsideTextOrientation.toString","content":"InsideTextOrientation.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextorientation.html#convert","title":"InsideTextOrientation.convert","content":"InsideTextOrientation.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextorientation.html#Horizontal","title":"InsideTextOrientation.Horizontal","content":"InsideTextOrientation.Horizontal \nHorizontal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextorientation.html#Radial","title":"InsideTextOrientation.Radial","content":"InsideTextOrientation.Radial \nRadial \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextorientation.html#Tangential","title":"InsideTextOrientation.Tangential","content":"InsideTextOrientation.Tangential \nTangential \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-insidetextorientation.html#Auto","title":"InsideTextOrientation.Auto","content":"InsideTextOrientation.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-intensitymode.html","title":"IntensityMode","content":"IntensityMode \n \nIntensityMode.Convert \nConvert \nIntensityMode.toString \ntoString \nIntensityMode.convert \nconvert \nIntensityMode.Vertex \nVertex \nIntensityMode.Cell \nCell"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-intensitymode.html#Convert","title":"IntensityMode.Convert","content":"IntensityMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-intensitymode.html#toString","title":"IntensityMode.toString","content":"IntensityMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-intensitymode.html#convert","title":"IntensityMode.convert","content":"IntensityMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-intensitymode.html#Vertex","title":"IntensityMode.Vertex","content":"IntensityMode.Vertex \nVertex \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-intensitymode.html#Cell","title":"IntensityMode.Cell","content":"IntensityMode.Cell \nCell \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-jitterpoints.html","title":"JitterPoints","content":"JitterPoints \n \nJitterPoints.convert \nconvert"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-jitterpoints.html#convert","title":"JitterPoints.convert","content":"JitterPoints.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html","title":"Layer","content":"Layer \n\n Specifies whether shapes are drawn below or above traces. Default is Above\n \nLayer.Convert \nConvert \nLayer.toString \ntoString \nLayer.convert \nconvert \nLayer.Below \nBelow \nLayer.Above \nAbove \nLayer.AboveTraces \nAboveTraces \nLayer.BelowTraces \nBelowTraces"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#Convert","title":"Layer.Convert","content":"Layer.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#toString","title":"Layer.toString","content":"Layer.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#convert","title":"Layer.convert","content":"Layer.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#Below","title":"Layer.Below","content":"Layer.Below \nBelow \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#Above","title":"Layer.Above","content":"Layer.Above \nAbove \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#AboveTraces","title":"Layer.AboveTraces","content":"Layer.AboveTraces \nAboveTraces \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layer.html#BelowTraces","title":"Layer.BelowTraces","content":"Layer.BelowTraces \nBelowTraces \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridpattern.html","title":"LayoutGridPattern","content":"LayoutGridPattern \n\n Pattern to use for autogenerating Axis Ids when not specifically specifying subplot axes IDs in LayoutGrids\n \nLayoutGridPattern.Convert \nConvert \nLayoutGridPattern.toString \ntoString \nLayoutGridPattern.convert \nconvert \nLayoutGridPattern.Independent \nIndependent \nLayoutGridPattern.Coupled \nCoupled"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridpattern.html#Convert","title":"LayoutGridPattern.Convert","content":"LayoutGridPattern.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridpattern.html#toString","title":"LayoutGridPattern.toString","content":"LayoutGridPattern.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridpattern.html#convert","title":"LayoutGridPattern.convert","content":"LayoutGridPattern.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridpattern.html#Independent","title":"LayoutGridPattern.Independent","content":"LayoutGridPattern.Independent \nIndependent \n\n Uses a new xy pair for each cell, left-to-right across each row then iterating rows according to \u0060roworder\u0060\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridpattern.html#Coupled","title":"LayoutGridPattern.Coupled","content":"LayoutGridPattern.Coupled \nCoupled \n\n Gives one x axis per column and one y axis per row\n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridroworder.html","title":"LayoutGridRowOrder","content":"LayoutGridRowOrder \n\n Determines whether the rows of a LayoutGrid are enumerated from the top or the bottom.\n \nLayoutGridRowOrder.Convert \nConvert \nLayoutGridRowOrder.toString \ntoString \nLayoutGridRowOrder.convert \nconvert \nLayoutGridRowOrder.TopToBottom \nTopToBottom \nLayoutGridRowOrder.BottomToTop \nBottomToTop"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridroworder.html#Convert","title":"LayoutGridRowOrder.Convert","content":"LayoutGridRowOrder.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridroworder.html#toString","title":"LayoutGridRowOrder.toString","content":"LayoutGridRowOrder.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridroworder.html#convert","title":"LayoutGridRowOrder.convert","content":"LayoutGridRowOrder.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridroworder.html#TopToBottom","title":"LayoutGridRowOrder.TopToBottom","content":"LayoutGridRowOrder.TopToBottom \nTopToBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridroworder.html#BottomToTop","title":"LayoutGridRowOrder.BottomToTop","content":"LayoutGridRowOrder.BottomToTop \nBottomToTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html","title":"LayoutGridXSide","content":"LayoutGridXSide \n\n Sets where the x axis labels and titles go on a layout grid.\n \nLayoutGridXSide.Convert \nConvert \nLayoutGridXSide.toString \ntoString \nLayoutGridXSide.convert \nconvert \nLayoutGridXSide.Bottom \nBottom \nLayoutGridXSide.BottomPlot \nBottomPlot \nLayoutGridXSide.Top \nTop \nLayoutGridXSide.TopPlot \nTopPlot"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#Convert","title":"LayoutGridXSide.Convert","content":"LayoutGridXSide.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#toString","title":"LayoutGridXSide.toString","content":"LayoutGridXSide.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#convert","title":"LayoutGridXSide.convert","content":"LayoutGridXSide.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#Bottom","title":"LayoutGridXSide.Bottom","content":"LayoutGridXSide.Bottom \nBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#BottomPlot","title":"LayoutGridXSide.BottomPlot","content":"LayoutGridXSide.BottomPlot \nBottomPlot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#Top","title":"LayoutGridXSide.Top","content":"LayoutGridXSide.Top \nTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridxside.html#TopPlot","title":"LayoutGridXSide.TopPlot","content":"LayoutGridXSide.TopPlot \nTopPlot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html","title":"LayoutGridYSide","content":"LayoutGridYSide \n\n Sets where the y axis labels and titles go on a layout grid.\n \nLayoutGridYSide.Convert \nConvert \nLayoutGridYSide.toString \ntoString \nLayoutGridYSide.convert \nconvert \nLayoutGridYSide.Left \nLeft \nLayoutGridYSide.LeftPlot \nLeftPlot \nLayoutGridYSide.Right \nRight \nLayoutGridYSide.RightPlot \nRightPlot"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#Convert","title":"LayoutGridYSide.Convert","content":"LayoutGridYSide.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#toString","title":"LayoutGridYSide.toString","content":"LayoutGridYSide.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#convert","title":"LayoutGridYSide.convert","content":"LayoutGridYSide.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#Left","title":"LayoutGridYSide.Left","content":"LayoutGridYSide.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#LeftPlot","title":"LayoutGridYSide.LeftPlot","content":"LayoutGridYSide.LeftPlot \nLeftPlot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#Right","title":"LayoutGridYSide.Right","content":"LayoutGridYSide.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutgridyside.html#RightPlot","title":"LayoutGridYSide.RightPlot","content":"LayoutGridYSide.RightPlot \nRightPlot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutimagesizing.html","title":"LayoutImageSizing","content":"LayoutImageSizing \n\n Specifies whether shapes are drawn below or above traces. Default is Above\n \nLayoutImageSizing.Convert \nConvert \nLayoutImageSizing.toString \ntoString \nLayoutImageSizing.convert \nconvert \nLayoutImageSizing.Fill \nFill \nLayoutImageSizing.Contain \nContain \nLayoutImageSizing.Stretch \nStretch"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutimagesizing.html#Convert","title":"LayoutImageSizing.Convert","content":"LayoutImageSizing.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutimagesizing.html#toString","title":"LayoutImageSizing.toString","content":"LayoutImageSizing.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutimagesizing.html#convert","title":"LayoutImageSizing.convert","content":"LayoutImageSizing.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutimagesizing.html#Fill","title":"LayoutImageSizing.Fill","content":"LayoutImageSizing.Fill \nFill \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutimagesizing.html#Contain","title":"LayoutImageSizing.Contain","content":"LayoutImageSizing.Contain \nContain \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-layoutimagesizing.html#Stretch","title":"LayoutImageSizing.Stretch","content":"LayoutImageSizing.Stretch \nStretch \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-linearaxisid.html","title":"LinearAxisId","content":"LinearAxisId \n \nLinearAxisId.Convert \nConvert \nLinearAxisId.toString \ntoString \nLinearAxisId.convert \nconvert \nLinearAxisId.Free \nFree \nLinearAxisId.X \nX \nLinearAxisId.Y \nY"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-linearaxisid.html#Convert","title":"LinearAxisId.Convert","content":"LinearAxisId.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-linearaxisid.html#toString","title":"LinearAxisId.toString","content":"LinearAxisId.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-linearaxisid.html#convert","title":"LinearAxisId.convert","content":"LinearAxisId.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-linearaxisid.html#Free","title":"LinearAxisId.Free","content":"LinearAxisId.Free \nFree \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-linearaxisid.html#X","title":"LinearAxisId.X","content":"LinearAxisId.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-linearaxisid.html#Y","title":"LinearAxisId.Y","content":"LinearAxisId.Y \nY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html","title":"LocationFormat","content":"LocationFormat \n\n Determines the set of locations used to match entries in \u0060locations\u0060 to regions on the map. Default: ISO-3\n \nLocationFormat.Convert \nConvert \nLocationFormat.toString \ntoString \nLocationFormat.convert \nconvert \nLocationFormat.CountryNames \nCountryNames \nLocationFormat.ISO_3 \nISO_3 \nLocationFormat.USA_states \nUSA_states \nLocationFormat.GeoJson_Id \nGeoJson_Id"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#Convert","title":"LocationFormat.Convert","content":"LocationFormat.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#toString","title":"LocationFormat.toString","content":"LocationFormat.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#convert","title":"LocationFormat.convert","content":"LocationFormat.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#CountryNames","title":"LocationFormat.CountryNames","content":"LocationFormat.CountryNames \nCountryNames \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#ISO_3","title":"LocationFormat.ISO_3","content":"LocationFormat.ISO_3 \nISO_3 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#USA_states","title":"LocationFormat.USA_states","content":"LocationFormat.USA_states \nUSA_states \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-locationformat.html#GeoJson_Id","title":"LocationFormat.GeoJson_Id","content":"LocationFormat.GeoJson_Id \nGeoJson_Id \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersourcetype.html","title":"MapboxLayerSourceType","content":"MapboxLayerSourceType \n \nMapboxLayerSourceType.Convert \nConvert \nMapboxLayerSourceType.toString \ntoString \nMapboxLayerSourceType.convert \nconvert \nMapboxLayerSourceType.GeoJson \nGeoJson \nMapboxLayerSourceType.Vector \nVector \nMapboxLayerSourceType.Raster \nRaster \nMapboxLayerSourceType.Image \nImage"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersourcetype.html#Convert","title":"MapboxLayerSourceType.Convert","content":"MapboxLayerSourceType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersourcetype.html#toString","title":"MapboxLayerSourceType.toString","content":"MapboxLayerSourceType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersourcetype.html#convert","title":"MapboxLayerSourceType.convert","content":"MapboxLayerSourceType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersourcetype.html#GeoJson","title":"MapboxLayerSourceType.GeoJson","content":"MapboxLayerSourceType.GeoJson \nGeoJson \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersourcetype.html#Vector","title":"MapboxLayerSourceType.Vector","content":"MapboxLayerSourceType.Vector \nVector \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersourcetype.html#Raster","title":"MapboxLayerSourceType.Raster","content":"MapboxLayerSourceType.Raster \nRaster \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersourcetype.html#Image","title":"MapboxLayerSourceType.Image","content":"MapboxLayerSourceType.Image \nImage \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersymbolplacement.html","title":"MapboxLayerSymbolPlacement","content":"MapboxLayerSymbolPlacement \n \nMapboxLayerSymbolPlacement.Convert \nConvert \nMapboxLayerSymbolPlacement.toString \ntoString \nMapboxLayerSymbolPlacement.convert \nconvert \nMapboxLayerSymbolPlacement.Point \nPoint \nMapboxLayerSymbolPlacement.Line \nLine \nMapboxLayerSymbolPlacement.LineCenter \nLineCenter"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersymbolplacement.html#Convert","title":"MapboxLayerSymbolPlacement.Convert","content":"MapboxLayerSymbolPlacement.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersymbolplacement.html#toString","title":"MapboxLayerSymbolPlacement.toString","content":"MapboxLayerSymbolPlacement.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersymbolplacement.html#convert","title":"MapboxLayerSymbolPlacement.convert","content":"MapboxLayerSymbolPlacement.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersymbolplacement.html#Point","title":"MapboxLayerSymbolPlacement.Point","content":"MapboxLayerSymbolPlacement.Point \nPoint \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersymbolplacement.html#Line","title":"MapboxLayerSymbolPlacement.Line","content":"MapboxLayerSymbolPlacement.Line \nLine \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayersymbolplacement.html#LineCenter","title":"MapboxLayerSymbolPlacement.LineCenter","content":"MapboxLayerSymbolPlacement.LineCenter \nLineCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html","title":"MapboxLayerType","content":"MapboxLayerType \n \nMapboxLayerType.Convert \nConvert \nMapboxLayerType.toString \ntoString \nMapboxLayerType.convert \nconvert \nMapboxLayerType.Circle \nCircle \nMapboxLayerType.Line \nLine \nMapboxLayerType.Fill \nFill \nMapboxLayerType.Symbol \nSymbol \nMapboxLayerType.Raster \nRaster"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html#Convert","title":"MapboxLayerType.Convert","content":"MapboxLayerType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html#toString","title":"MapboxLayerType.toString","content":"MapboxLayerType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html#convert","title":"MapboxLayerType.convert","content":"MapboxLayerType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html#Circle","title":"MapboxLayerType.Circle","content":"MapboxLayerType.Circle \nCircle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html#Line","title":"MapboxLayerType.Line","content":"MapboxLayerType.Line \nLine \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html#Fill","title":"MapboxLayerType.Fill","content":"MapboxLayerType.Fill \nFill \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html#Symbol","title":"MapboxLayerType.Symbol","content":"MapboxLayerType.Symbol \nSymbol \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxlayertype.html#Raster","title":"MapboxLayerType.Raster","content":"MapboxLayerType.Raster \nRaster \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html","title":"MapboxStyle","content":"MapboxStyle \n\n Defines the map layers that are rendered by default below the trace layers defined in \u0060data\u0060, which are themselves by default rendered below the layers defined in \u0060layout.mapbox.layers\u0060.\n These layers can be defined either explicitly as a Mapbox Style object which can contain multiple layer definitions that load data from any public or private Tile Map Service (TMS or XYZ) or Web Map Service (WMS) or implicitly by using one of the built-in style objects which use WMSes which do not require any access tokens,\n or by using a default Mapbox style or custom Mapbox style URL, both of which require a Mapbox access token Note that Mapbox access token can be set in the \u0060accesstoken\u0060 attribute or in the \u0060mapboxAccessToken\u0060 config option.\n Mapbox Style objects are of the form described in the Mapbox GL JS documentation available at https://docs.mapbox.com/mapbox-gl-js/style-spec The built-in plotly.js styles objects are: open-street-map, white-bg, carto-positron, carto-darkmatter, stamen-terrain, stamen-toner, stamen-watercolor\n The built-in Mapbox styles are: basic, streets, outdoors, light, dark, satellite, satellite-streets Mapbox style URLs are of the form: mapbox://mapbox.mapbox-\u003Cname\u003E-\u003Cversion\u003E\n \nMapboxStyle.Convert \nConvert \nMapboxStyle.toString \ntoString \nMapboxStyle.convert \nconvert \nMapboxStyle.OpenStreetMap \nOpenStreetMap \nMapboxStyle.WhiteBG \nWhiteBG \nMapboxStyle.CartoPositron \nCartoPositron \nMapboxStyle.CartoDarkmatter \nCartoDarkmatter \nMapboxStyle.StamenTerrain \nStamenTerrain \nMapboxStyle.StamenToner \nStamenToner \nMapboxStyle.StamenWatercolor \nStamenWatercolor \nMapboxStyle.MapboxBasic \nMapboxBasic \nMapboxStyle.MapboxStreets \nMapboxStreets \nMapboxStyle.MapboxOutdoors \nMapboxOutdoors \nMapboxStyle.MapboxLight \nMapboxLight \nMapboxStyle.MapboxDark \nMapboxDark \nMapboxStyle.MapboxSatellite \nMapboxSatellite \nMapboxStyle.MapboxSatelliteStreets \nMapboxSatelliteStreets \nMapboxStyle.Custom \nCustom"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#Convert","title":"MapboxStyle.Convert","content":"MapboxStyle.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#toString","title":"MapboxStyle.toString","content":"MapboxStyle.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#convert","title":"MapboxStyle.convert","content":"MapboxStyle.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#OpenStreetMap","title":"MapboxStyle.OpenStreetMap","content":"MapboxStyle.OpenStreetMap \nOpenStreetMap \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#WhiteBG","title":"MapboxStyle.WhiteBG","content":"MapboxStyle.WhiteBG \nWhiteBG \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#CartoPositron","title":"MapboxStyle.CartoPositron","content":"MapboxStyle.CartoPositron \nCartoPositron \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#CartoDarkmatter","title":"MapboxStyle.CartoDarkmatter","content":"MapboxStyle.CartoDarkmatter \nCartoDarkmatter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#StamenTerrain","title":"MapboxStyle.StamenTerrain","content":"MapboxStyle.StamenTerrain \nStamenTerrain \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#StamenToner","title":"MapboxStyle.StamenToner","content":"MapboxStyle.StamenToner \nStamenToner \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#StamenWatercolor","title":"MapboxStyle.StamenWatercolor","content":"MapboxStyle.StamenWatercolor \nStamenWatercolor \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#MapboxBasic","title":"MapboxStyle.MapboxBasic","content":"MapboxStyle.MapboxBasic \nMapboxBasic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#MapboxStreets","title":"MapboxStyle.MapboxStreets","content":"MapboxStyle.MapboxStreets \nMapboxStreets \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#MapboxOutdoors","title":"MapboxStyle.MapboxOutdoors","content":"MapboxStyle.MapboxOutdoors \nMapboxOutdoors \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#MapboxLight","title":"MapboxStyle.MapboxLight","content":"MapboxStyle.MapboxLight \nMapboxLight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#MapboxDark","title":"MapboxStyle.MapboxDark","content":"MapboxStyle.MapboxDark \nMapboxDark \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#MapboxSatellite","title":"MapboxStyle.MapboxSatellite","content":"MapboxStyle.MapboxSatellite \nMapboxSatellite \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#MapboxSatelliteStreets","title":"MapboxStyle.MapboxSatelliteStreets","content":"MapboxStyle.MapboxSatelliteStreets \nMapboxSatelliteStreets \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mapboxstyle.html#Custom","title":"MapboxStyle.Custom","content":"MapboxStyle.Custom \nCustom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersizemode.html","title":"MarkerSizeMode","content":"MarkerSizeMode \n \nMarkerSizeMode.Convert \nConvert \nMarkerSizeMode.toString \ntoString \nMarkerSizeMode.convert \nconvert \nMarkerSizeMode.Diameter \nDiameter \nMarkerSizeMode.Area \nArea"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersizemode.html#Convert","title":"MarkerSizeMode.Convert","content":"MarkerSizeMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersizemode.html#toString","title":"MarkerSizeMode.toString","content":"MarkerSizeMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersizemode.html#convert","title":"MarkerSizeMode.convert","content":"MarkerSizeMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersizemode.html#Diameter","title":"MarkerSizeMode.Diameter","content":"MarkerSizeMode.Diameter \nDiameter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersizemode.html#Area","title":"MarkerSizeMode.Area","content":"MarkerSizeMode.Area \nArea \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html","title":"MarkerSymbol","content":"MarkerSymbol \n \nMarkerSymbol.Convert \nConvert \nMarkerSymbol.toInteger \ntoInteger \nMarkerSymbol.convert \nconvert \nMarkerSymbol.Modified \nModified \nMarkerSymbol.Circle \nCircle \nMarkerSymbol.Square \nSquare \nMarkerSymbol.Diamond \nDiamond \nMarkerSymbol.Cross \nCross \nMarkerSymbol.X \nX \nMarkerSymbol.TriangleUp \nTriangleUp \nMarkerSymbol.TriangleDown \nTriangleDown \nMarkerSymbol.TriangleLeft \nTriangleLeft \nMarkerSymbol.TriangleRight \nTriangleRight \nMarkerSymbol.TriangleNE \nTriangleNE \nMarkerSymbol.TriangleSE \nTriangleSE \nMarkerSymbol.TriangleSW \nTriangleSW \nMarkerSymbol.TriangleNW \nTriangleNW \nMarkerSymbol.Pentagon \nPentagon \nMarkerSymbol.Hexagon \nHexagon \nMarkerSymbol.Hexagon2 \nHexagon2 \nMarkerSymbol.Octagon \nOctagon \nMarkerSymbol.Star \nStar \nMarkerSymbol.Hexagram \nHexagram \nMarkerSymbol.StarTriangleUp \nStarTriangleUp \nMarkerSymbol.StarTriangleDown \nStarTriangleDown \nMarkerSymbol.StarSquare \nStarSquare \nMarkerSymbol.StarDiamond \nStarDiamond \nMarkerSymbol.DiamondTall \nDiamondTall \nMarkerSymbol.DiamondWide \nDiamondWide \nMarkerSymbol.Hourglass \nHourglass \nMarkerSymbol.Bowtie \nBowtie \nMarkerSymbol.CircleCross \nCircleCross \nMarkerSymbol.CircleX \nCircleX \nMarkerSymbol.SquareCross \nSquareCross \nMarkerSymbol.SquareX \nSquareX \nMarkerSymbol.DiamondCross \nDiamondCross \nMarkerSymbol.DiamondX \nDiamondX \nMarkerSymbol.CrossThin \nCrossThin \nMarkerSymbol.XThin \nXThin \nMarkerSymbol.Asterisk \nAsterisk \nMarkerSymbol.Hash \nHash \nMarkerSymbol.YUp \nYUp \nMarkerSymbol.YDown \nYDown \nMarkerSymbol.YLeft \nYLeft \nMarkerSymbol.YRight \nYRight \nMarkerSymbol.LineEW \nLineEW \nMarkerSymbol.LineNS \nLineNS \nMarkerSymbol.LineNE \nLineNE \nMarkerSymbol.LineNW \nLineNW \nMarkerSymbol.ArrowUp \nArrowUp \nMarkerSymbol.ArrowDown \nArrowDown \nMarkerSymbol.ArrowLeft \nArrowLeft \nMarkerSymbol.ArrowRight \nArrowRight \nMarkerSymbol.ArrowBarUp \nArrowBarUp \nMarkerSymbol.ArrowBarDown \nArrowBarDown \nMarkerSymbol.ArrowBarLeft \nArrowBarLeft \nMarkerSymbol.ArrowBarRight \nArrowBarRight \nMarkerSymbol.Arrow \nArrow \nMarkerSymbol.ArrowWide \nArrowWide"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Convert","title":"MarkerSymbol.Convert","content":"MarkerSymbol.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#toInteger","title":"MarkerSymbol.toInteger","content":"MarkerSymbol.toInteger \ntoInteger \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#convert","title":"MarkerSymbol.convert","content":"MarkerSymbol.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Modified","title":"MarkerSymbol.Modified","content":"MarkerSymbol.Modified \nModified \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Circle","title":"MarkerSymbol.Circle","content":"MarkerSymbol.Circle \nCircle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Square","title":"MarkerSymbol.Square","content":"MarkerSymbol.Square \nSquare \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Diamond","title":"MarkerSymbol.Diamond","content":"MarkerSymbol.Diamond \nDiamond \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Cross","title":"MarkerSymbol.Cross","content":"MarkerSymbol.Cross \nCross \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#X","title":"MarkerSymbol.X","content":"MarkerSymbol.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#TriangleUp","title":"MarkerSymbol.TriangleUp","content":"MarkerSymbol.TriangleUp \nTriangleUp \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#TriangleDown","title":"MarkerSymbol.TriangleDown","content":"MarkerSymbol.TriangleDown \nTriangleDown \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#TriangleLeft","title":"MarkerSymbol.TriangleLeft","content":"MarkerSymbol.TriangleLeft \nTriangleLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#TriangleRight","title":"MarkerSymbol.TriangleRight","content":"MarkerSymbol.TriangleRight \nTriangleRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#TriangleNE","title":"MarkerSymbol.TriangleNE","content":"MarkerSymbol.TriangleNE \nTriangleNE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#TriangleSE","title":"MarkerSymbol.TriangleSE","content":"MarkerSymbol.TriangleSE \nTriangleSE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#TriangleSW","title":"MarkerSymbol.TriangleSW","content":"MarkerSymbol.TriangleSW \nTriangleSW \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#TriangleNW","title":"MarkerSymbol.TriangleNW","content":"MarkerSymbol.TriangleNW \nTriangleNW \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Pentagon","title":"MarkerSymbol.Pentagon","content":"MarkerSymbol.Pentagon \nPentagon \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Hexagon","title":"MarkerSymbol.Hexagon","content":"MarkerSymbol.Hexagon \nHexagon \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Hexagon2","title":"MarkerSymbol.Hexagon2","content":"MarkerSymbol.Hexagon2 \nHexagon2 \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Octagon","title":"MarkerSymbol.Octagon","content":"MarkerSymbol.Octagon \nOctagon \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Star","title":"MarkerSymbol.Star","content":"MarkerSymbol.Star \nStar \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Hexagram","title":"MarkerSymbol.Hexagram","content":"MarkerSymbol.Hexagram \nHexagram \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#StarTriangleUp","title":"MarkerSymbol.StarTriangleUp","content":"MarkerSymbol.StarTriangleUp \nStarTriangleUp \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#StarTriangleDown","title":"MarkerSymbol.StarTriangleDown","content":"MarkerSymbol.StarTriangleDown \nStarTriangleDown \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#StarSquare","title":"MarkerSymbol.StarSquare","content":"MarkerSymbol.StarSquare \nStarSquare \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#StarDiamond","title":"MarkerSymbol.StarDiamond","content":"MarkerSymbol.StarDiamond \nStarDiamond \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#DiamondTall","title":"MarkerSymbol.DiamondTall","content":"MarkerSymbol.DiamondTall \nDiamondTall \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#DiamondWide","title":"MarkerSymbol.DiamondWide","content":"MarkerSymbol.DiamondWide \nDiamondWide \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Hourglass","title":"MarkerSymbol.Hourglass","content":"MarkerSymbol.Hourglass \nHourglass \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Bowtie","title":"MarkerSymbol.Bowtie","content":"MarkerSymbol.Bowtie \nBowtie \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#CircleCross","title":"MarkerSymbol.CircleCross","content":"MarkerSymbol.CircleCross \nCircleCross \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#CircleX","title":"MarkerSymbol.CircleX","content":"MarkerSymbol.CircleX \nCircleX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#SquareCross","title":"MarkerSymbol.SquareCross","content":"MarkerSymbol.SquareCross \nSquareCross \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#SquareX","title":"MarkerSymbol.SquareX","content":"MarkerSymbol.SquareX \nSquareX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#DiamondCross","title":"MarkerSymbol.DiamondCross","content":"MarkerSymbol.DiamondCross \nDiamondCross \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#DiamondX","title":"MarkerSymbol.DiamondX","content":"MarkerSymbol.DiamondX \nDiamondX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#CrossThin","title":"MarkerSymbol.CrossThin","content":"MarkerSymbol.CrossThin \nCrossThin \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#XThin","title":"MarkerSymbol.XThin","content":"MarkerSymbol.XThin \nXThin \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Asterisk","title":"MarkerSymbol.Asterisk","content":"MarkerSymbol.Asterisk \nAsterisk \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Hash","title":"MarkerSymbol.Hash","content":"MarkerSymbol.Hash \nHash \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#YUp","title":"MarkerSymbol.YUp","content":"MarkerSymbol.YUp \nYUp \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#YDown","title":"MarkerSymbol.YDown","content":"MarkerSymbol.YDown \nYDown \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#YLeft","title":"MarkerSymbol.YLeft","content":"MarkerSymbol.YLeft \nYLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#YRight","title":"MarkerSymbol.YRight","content":"MarkerSymbol.YRight \nYRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#LineEW","title":"MarkerSymbol.LineEW","content":"MarkerSymbol.LineEW \nLineEW \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#LineNS","title":"MarkerSymbol.LineNS","content":"MarkerSymbol.LineNS \nLineNS \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#LineNE","title":"MarkerSymbol.LineNE","content":"MarkerSymbol.LineNE \nLineNE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#LineNW","title":"MarkerSymbol.LineNW","content":"MarkerSymbol.LineNW \nLineNW \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#ArrowUp","title":"MarkerSymbol.ArrowUp","content":"MarkerSymbol.ArrowUp \nArrowUp \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#ArrowDown","title":"MarkerSymbol.ArrowDown","content":"MarkerSymbol.ArrowDown \nArrowDown \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#ArrowLeft","title":"MarkerSymbol.ArrowLeft","content":"MarkerSymbol.ArrowLeft \nArrowLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#ArrowRight","title":"MarkerSymbol.ArrowRight","content":"MarkerSymbol.ArrowRight \nArrowRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#ArrowBarUp","title":"MarkerSymbol.ArrowBarUp","content":"MarkerSymbol.ArrowBarUp \nArrowBarUp \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#ArrowBarDown","title":"MarkerSymbol.ArrowBarDown","content":"MarkerSymbol.ArrowBarDown \nArrowBarDown \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#ArrowBarLeft","title":"MarkerSymbol.ArrowBarLeft","content":"MarkerSymbol.ArrowBarLeft \nArrowBarLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#ArrowBarRight","title":"MarkerSymbol.ArrowBarRight","content":"MarkerSymbol.ArrowBarRight \nArrowBarRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#Arrow","title":"MarkerSymbol.Arrow","content":"MarkerSymbol.Arrow \nArrow \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol.html#ArrowWide","title":"MarkerSymbol.ArrowWide","content":"MarkerSymbol.ArrowWide \nArrowWide \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol3d.html","title":"MarkerSymbol3D","content":"MarkerSymbol3D \n \nMarkerSymbol3D.Convert \nConvert \nMarkerSymbol3D.toString \ntoString \nMarkerSymbol3D.convert \nconvert \nMarkerSymbol3D.Circle \nCircle \nMarkerSymbol3D.CircleOpen \nCircleOpen \nMarkerSymbol3D.Cross \nCross \nMarkerSymbol3D.Diamond \nDiamond \nMarkerSymbol3D.DiamondOpen \nDiamondOpen \nMarkerSymbol3D.Square \nSquare \nMarkerSymbol3D.SquareOpen \nSquareOpen \nMarkerSymbol3D.X \nX"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol3d.html#Convert","title":"MarkerSymbol3D.Convert","content":"MarkerSymbol3D.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol3d.html#toString","title":"MarkerSymbol3D.toString","content":"MarkerSymbol3D.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol3d.html#convert","title":"MarkerSymbol3D.convert","content":"MarkerSymbol3D.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol3d.html#Circle","title":"MarkerSymbol3D.Circle","content":"MarkerSymbol3D.Circle \nCircle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol3d.html#CircleOpen","title":"MarkerSymbol3D.CircleOpen","content":"MarkerSymbol3D.CircleOpen \nCircleOpen \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol3d.html#Cross","title":"MarkerSymbol3D.Cross","content":"MarkerSymbol3D.Cross \nCross \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol3d.html#Diamond","title":"MarkerSymbol3D.Diamond","content":"MarkerSymbol3D.Diamond \nDiamond \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol3d.html#DiamondOpen","title":"MarkerSymbol3D.DiamondOpen","content":"MarkerSymbol3D.DiamondOpen \nDiamondOpen \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol3d.html#Square","title":"MarkerSymbol3D.Square","content":"MarkerSymbol3D.Square \nSquare \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol3d.html#SquareOpen","title":"MarkerSymbol3D.SquareOpen","content":"MarkerSymbol3D.SquareOpen \nSquareOpen \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-markersymbol3d.html#X","title":"MarkerSymbol3D.X","content":"MarkerSymbol3D.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-method.html","title":"Method","content":"Method \n \nMethod.Convert \nConvert \nMethod.toString \ntoString \nMethod.convert \nconvert \nMethod.Restyle \nRestyle \nMethod.Relayout \nRelayout \nMethod.Animate \nAnimate \nMethod.Update \nUpdate \nMethod.Skip \nSkip"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-method.html#Convert","title":"Method.Convert","content":"Method.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-method.html#toString","title":"Method.toString","content":"Method.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-method.html#convert","title":"Method.convert","content":"Method.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-method.html#Restyle","title":"Method.Restyle","content":"Method.Restyle \nRestyle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-method.html#Relayout","title":"Method.Relayout","content":"Method.Relayout \nRelayout \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-method.html#Animate","title":"Method.Animate","content":"Method.Animate \nAnimate \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-method.html#Update","title":"Method.Update","content":"Method.Update \nUpdate \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-method.html#Skip","title":"Method.Skip","content":"Method.Skip \nSkip \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html","title":"Mirror","content":"Mirror \n\n Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If \u0022true\u0022, the axis lines are mirrored.\n If \u0022ticks\u0022, the axis lines and ticks are mirrored. If \u0022false\u0022, mirroring is disable. If \u0022all\u0022, axis lines are mirrored on all shared-axes subplots. If \u0022allticks\u0022, axis lines and ticks are mirrored on all shared-axes subplots.\n \nMirror.Convert \nConvert \nMirror.convert \nconvert \nMirror.True \nTrue \nMirror.Ticks \nTicks \nMirror.False \nFalse \nMirror.All \nAll \nMirror.AllTicks \nAllTicks"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#Convert","title":"Mirror.Convert","content":"Mirror.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#convert","title":"Mirror.convert","content":"Mirror.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#True","title":"Mirror.True","content":"Mirror.True \nTrue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#Ticks","title":"Mirror.Ticks","content":"Mirror.Ticks \nTicks \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#False","title":"Mirror.False","content":"Mirror.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#All","title":"Mirror.All","content":"Mirror.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mirror.html#AllTicks","title":"Mirror.AllTicks","content":"Mirror.AllTicks \nAllTicks \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html","title":"Mode","content":"Mode \n \nMode.Convert \nConvert \nMode.toString \ntoString \nMode.convert \nconvert \nMode.None \nNone \nMode.Lines \nLines \nMode.Lines_Markers \nLines_Markers \nMode.Lines_Text \nLines_Text \nMode.Lines_Markers_Text \nLines_Markers_Text \nMode.Markers \nMarkers \nMode.Markers_Text \nMarkers_Text \nMode.Text \nText"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Convert","title":"Mode.Convert","content":"Mode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#toString","title":"Mode.toString","content":"Mode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#convert","title":"Mode.convert","content":"Mode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#None","title":"Mode.None","content":"Mode.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Lines","title":"Mode.Lines","content":"Mode.Lines \nLines \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Lines_Markers","title":"Mode.Lines_Markers","content":"Mode.Lines_Markers \nLines_Markers \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Lines_Text","title":"Mode.Lines_Text","content":"Mode.Lines_Text \nLines_Text \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Lines_Markers_Text","title":"Mode.Lines_Markers_Text","content":"Mode.Lines_Markers_Text \nLines_Markers_Text \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Markers","title":"Mode.Markers","content":"Mode.Markers \nMarkers \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Markers_Text","title":"Mode.Markers_Text","content":"Mode.Markers_Text \nMarkers_Text \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-mode.html#Text","title":"Mode.Text","content":"Mode.Text \nText \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html","title":"ModeBarButton","content":"ModeBarButton \n \nModeBarButton.Convert \nConvert \nModeBarButton.ofString \nofString \nModeBarButton.toString \ntoString \nModeBarButton.convert \nconvert \nModeBarButton.ToImage \nToImage \nModeBarButton.SendDataToCloud \nSendDataToCloud \nModeBarButton.EditInChartStudio \nEditInChartStudio \nModeBarButton.Zoom2d \nZoom2d \nModeBarButton.Pan2d \nPan2d \nModeBarButton.Select2d \nSelect2d \nModeBarButton.Lasso2d \nLasso2d \nModeBarButton.DrawClosedPath \nDrawClosedPath \nModeBarButton.DrawOpenPath \nDrawOpenPath \nModeBarButton.DrawLine \nDrawLine \nModeBarButton.DrawRect \nDrawRect \nModeBarButton.DrawCircle \nDrawCircle \nModeBarButton.EraseShape \nEraseShape \nModeBarButton.ZoomIn2d \nZoomIn2d \nModeBarButton.ZoomOut2d \nZoomOut2d \nModeBarButton.AutoScale2d \nAutoScale2d \nModeBarButton.ResetScale2d \nResetScale2d \nModeBarButton.HoverClosestCartesian \nHoverClosestCartesian \nModeBarButton.HoverCompareCartesian \nHoverCompareCartesian \nModeBarButton.Zoom3d \nZoom3d \nModeBarButton.Pan3d \nPan3d \nModeBarButton.OrbitRotation \nOrbitRotation \nModeBarButton.TableRotation \nTableRotation \nModeBarButton.ResetCameraDefault3d \nResetCameraDefault3d \nModeBarButton.ResetCameraLastSave3d \nResetCameraLastSave3d \nModeBarButton.HoverClosest3d \nHoverClosest3d \nModeBarButton.ZoomInGeo \nZoomInGeo \nModeBarButton.ZoomOutGeo \nZoomOutGeo \nModeBarButton.ResetGeo \nResetGeo \nModeBarButton.HoverClosestGeo \nHoverClosestGeo \nModeBarButton.HoverClosestGl2d \nHoverClosestGl2d \nModeBarButton.HoverClosestPie \nHoverClosestPie \nModeBarButton.ResetSankeyGroup \nResetSankeyGroup \nModeBarButton.ToggleHover \nToggleHover \nModeBarButton.HoverMode \nHoverMode \nModeBarButton.ResetViews \nResetViews \nModeBarButton.ToggleSpikelines \nToggleSpikelines \nModeBarButton.ResetViewMapbox \nResetViewMapbox \nModeBarButton.ZoomInMapbox \nZoomInMapbox \nModeBarButton.ZoomOutMapbox \nZoomOutMapbox"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#Convert","title":"ModeBarButton.Convert","content":"ModeBarButton.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ofString","title":"ModeBarButton.ofString","content":"ModeBarButton.ofString \nofString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#toString","title":"ModeBarButton.toString","content":"ModeBarButton.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#convert","title":"ModeBarButton.convert","content":"ModeBarButton.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ToImage","title":"ModeBarButton.ToImage","content":"ModeBarButton.ToImage \nToImage \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#SendDataToCloud","title":"ModeBarButton.SendDataToCloud","content":"ModeBarButton.SendDataToCloud \nSendDataToCloud \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#EditInChartStudio","title":"ModeBarButton.EditInChartStudio","content":"ModeBarButton.EditInChartStudio \nEditInChartStudio \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#Zoom2d","title":"ModeBarButton.Zoom2d","content":"ModeBarButton.Zoom2d \nZoom2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#Pan2d","title":"ModeBarButton.Pan2d","content":"ModeBarButton.Pan2d \nPan2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#Select2d","title":"ModeBarButton.Select2d","content":"ModeBarButton.Select2d \nSelect2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#Lasso2d","title":"ModeBarButton.Lasso2d","content":"ModeBarButton.Lasso2d \nLasso2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#DrawClosedPath","title":"ModeBarButton.DrawClosedPath","content":"ModeBarButton.DrawClosedPath \nDrawClosedPath \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#DrawOpenPath","title":"ModeBarButton.DrawOpenPath","content":"ModeBarButton.DrawOpenPath \nDrawOpenPath \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#DrawLine","title":"ModeBarButton.DrawLine","content":"ModeBarButton.DrawLine \nDrawLine \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#DrawRect","title":"ModeBarButton.DrawRect","content":"ModeBarButton.DrawRect \nDrawRect \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#DrawCircle","title":"ModeBarButton.DrawCircle","content":"ModeBarButton.DrawCircle \nDrawCircle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#EraseShape","title":"ModeBarButton.EraseShape","content":"ModeBarButton.EraseShape \nEraseShape \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ZoomIn2d","title":"ModeBarButton.ZoomIn2d","content":"ModeBarButton.ZoomIn2d \nZoomIn2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ZoomOut2d","title":"ModeBarButton.ZoomOut2d","content":"ModeBarButton.ZoomOut2d \nZoomOut2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#AutoScale2d","title":"ModeBarButton.AutoScale2d","content":"ModeBarButton.AutoScale2d \nAutoScale2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ResetScale2d","title":"ModeBarButton.ResetScale2d","content":"ModeBarButton.ResetScale2d \nResetScale2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#HoverClosestCartesian","title":"ModeBarButton.HoverClosestCartesian","content":"ModeBarButton.HoverClosestCartesian \nHoverClosestCartesian \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#HoverCompareCartesian","title":"ModeBarButton.HoverCompareCartesian","content":"ModeBarButton.HoverCompareCartesian \nHoverCompareCartesian \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#Zoom3d","title":"ModeBarButton.Zoom3d","content":"ModeBarButton.Zoom3d \nZoom3d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#Pan3d","title":"ModeBarButton.Pan3d","content":"ModeBarButton.Pan3d \nPan3d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#OrbitRotation","title":"ModeBarButton.OrbitRotation","content":"ModeBarButton.OrbitRotation \nOrbitRotation \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#TableRotation","title":"ModeBarButton.TableRotation","content":"ModeBarButton.TableRotation \nTableRotation \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ResetCameraDefault3d","title":"ModeBarButton.ResetCameraDefault3d","content":"ModeBarButton.ResetCameraDefault3d \nResetCameraDefault3d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ResetCameraLastSave3d","title":"ModeBarButton.ResetCameraLastSave3d","content":"ModeBarButton.ResetCameraLastSave3d \nResetCameraLastSave3d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#HoverClosest3d","title":"ModeBarButton.HoverClosest3d","content":"ModeBarButton.HoverClosest3d \nHoverClosest3d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ZoomInGeo","title":"ModeBarButton.ZoomInGeo","content":"ModeBarButton.ZoomInGeo \nZoomInGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ZoomOutGeo","title":"ModeBarButton.ZoomOutGeo","content":"ModeBarButton.ZoomOutGeo \nZoomOutGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ResetGeo","title":"ModeBarButton.ResetGeo","content":"ModeBarButton.ResetGeo \nResetGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#HoverClosestGeo","title":"ModeBarButton.HoverClosestGeo","content":"ModeBarButton.HoverClosestGeo \nHoverClosestGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#HoverClosestGl2d","title":"ModeBarButton.HoverClosestGl2d","content":"ModeBarButton.HoverClosestGl2d \nHoverClosestGl2d \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#HoverClosestPie","title":"ModeBarButton.HoverClosestPie","content":"ModeBarButton.HoverClosestPie \nHoverClosestPie \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ResetSankeyGroup","title":"ModeBarButton.ResetSankeyGroup","content":"ModeBarButton.ResetSankeyGroup \nResetSankeyGroup \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ToggleHover","title":"ModeBarButton.ToggleHover","content":"ModeBarButton.ToggleHover \nToggleHover \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#HoverMode","title":"ModeBarButton.HoverMode","content":"ModeBarButton.HoverMode \nHoverMode \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ResetViews","title":"ModeBarButton.ResetViews","content":"ModeBarButton.ResetViews \nResetViews \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ToggleSpikelines","title":"ModeBarButton.ToggleSpikelines","content":"ModeBarButton.ToggleSpikelines \nToggleSpikelines \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ResetViewMapbox","title":"ModeBarButton.ResetViewMapbox","content":"ModeBarButton.ResetViewMapbox \nResetViewMapbox \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ZoomInMapbox","title":"ModeBarButton.ZoomInMapbox","content":"ModeBarButton.ZoomInMapbox \nZoomInMapbox \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-modebarbutton.html#ZoomOutMapbox","title":"ModeBarButton.ZoomOutMapbox","content":"ModeBarButton.ZoomOutMapbox \nZoomOutMapbox \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-newselectionmode.html","title":"NewSelectionMode","content":"NewSelectionMode \n \nNewSelectionMode.Convert \nConvert \nNewSelectionMode.toString \ntoString \nNewSelectionMode.convert \nconvert \nNewSelectionMode.Immediate \nImmediate \nNewSelectionMode.Gradual \nGradual"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-newselectionmode.html#Convert","title":"NewSelectionMode.Convert","content":"NewSelectionMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-newselectionmode.html#toString","title":"NewSelectionMode.toString","content":"NewSelectionMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-newselectionmode.html#convert","title":"NewSelectionMode.convert","content":"NewSelectionMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-newselectionmode.html#Immediate","title":"NewSelectionMode.Immediate","content":"NewSelectionMode.Immediate \nImmediate \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-newselectionmode.html#Gradual","title":"NewSelectionMode.Gradual","content":"NewSelectionMode.Gradual \nGradual \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-orientation.html","title":"Orientation","content":"Orientation \n \nOrientation.Convert \nConvert \nOrientation.toString \ntoString \nOrientation.convert \nconvert \nOrientation.Horizontal \nHorizontal \nOrientation.Vertical \nVertical"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-orientation.html#Convert","title":"Orientation.Convert","content":"Orientation.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-orientation.html#toString","title":"Orientation.toString","content":"Orientation.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-orientation.html#convert","title":"Orientation.convert","content":"Orientation.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-orientation.html#Horizontal","title":"Orientation.Horizontal","content":"Orientation.Horizontal \nHorizontal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-orientation.html#Vertical","title":"Orientation.Vertical","content":"Orientation.Vertical \nVertical \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html","title":"PathbarEdgeShape","content":"PathbarEdgeShape \n \nPathbarEdgeShape.Convert \nConvert \nPathbarEdgeShape.toString \ntoString \nPathbarEdgeShape.convert \nconvert \nPathbarEdgeShape.ArrowRight \nArrowRight \nPathbarEdgeShape.ArrowLeft \nArrowLeft \nPathbarEdgeShape.Straight \nStraight \nPathbarEdgeShape.Slash \nSlash \nPathbarEdgeShape.BackSlash \nBackSlash"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html#Convert","title":"PathbarEdgeShape.Convert","content":"PathbarEdgeShape.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html#toString","title":"PathbarEdgeShape.toString","content":"PathbarEdgeShape.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html#convert","title":"PathbarEdgeShape.convert","content":"PathbarEdgeShape.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html#ArrowRight","title":"PathbarEdgeShape.ArrowRight","content":"PathbarEdgeShape.ArrowRight \nArrowRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html#ArrowLeft","title":"PathbarEdgeShape.ArrowLeft","content":"PathbarEdgeShape.ArrowLeft \nArrowLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html#Straight","title":"PathbarEdgeShape.Straight","content":"PathbarEdgeShape.Straight \nStraight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html#Slash","title":"PathbarEdgeShape.Slash","content":"PathbarEdgeShape.Slash \nSlash \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-pathbaredgeshape.html#BackSlash","title":"PathbarEdgeShape.BackSlash","content":"PathbarEdgeShape.BackSlash \nBackSlash \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternfillmode.html","title":"PatternFillMode","content":"PatternFillMode \n \nPatternFillMode.Convert \nConvert \nPatternFillMode.toString \ntoString \nPatternFillMode.convert \nconvert \nPatternFillMode.Replace \nReplace \nPatternFillMode.Overlay \nOverlay"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternfillmode.html#Convert","title":"PatternFillMode.Convert","content":"PatternFillMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternfillmode.html#toString","title":"PatternFillMode.toString","content":"PatternFillMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternfillmode.html#convert","title":"PatternFillMode.convert","content":"PatternFillMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternfillmode.html#Replace","title":"PatternFillMode.Replace","content":"PatternFillMode.Replace \nReplace \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternfillmode.html#Overlay","title":"PatternFillMode.Overlay","content":"PatternFillMode.Overlay \nOverlay \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html","title":"PatternShape","content":"PatternShape \n \nPatternShape.Convert \nConvert \nPatternShape.toString \ntoString \nPatternShape.convert \nconvert \nPatternShape.None \nNone \nPatternShape.DiagonalDescending \nDiagonalDescending \nPatternShape.DiagonalAscending \nDiagonalAscending \nPatternShape.DiagonalChecked \nDiagonalChecked \nPatternShape.HorizontalLines \nHorizontalLines \nPatternShape.VerticalLines \nVerticalLines \nPatternShape.Checked \nChecked \nPatternShape.Dots \nDots"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#Convert","title":"PatternShape.Convert","content":"PatternShape.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#toString","title":"PatternShape.toString","content":"PatternShape.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#convert","title":"PatternShape.convert","content":"PatternShape.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#None","title":"PatternShape.None","content":"PatternShape.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#DiagonalDescending","title":"PatternShape.DiagonalDescending","content":"PatternShape.DiagonalDescending \nDiagonalDescending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#DiagonalAscending","title":"PatternShape.DiagonalAscending","content":"PatternShape.DiagonalAscending \nDiagonalAscending \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#DiagonalChecked","title":"PatternShape.DiagonalChecked","content":"PatternShape.DiagonalChecked \nDiagonalChecked \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#HorizontalLines","title":"PatternShape.HorizontalLines","content":"PatternShape.HorizontalLines \nHorizontalLines \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#VerticalLines","title":"PatternShape.VerticalLines","content":"PatternShape.VerticalLines \nVerticalLines \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#Checked","title":"PatternShape.Checked","content":"PatternShape.Checked \nChecked \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-patternshape.html#Dots","title":"PatternShape.Dots","content":"PatternShape.Dots \nDots \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-periodalignment.html","title":"PeriodAlignment","content":"PeriodAlignment \n \nPeriodAlignment.Convert \nConvert \nPeriodAlignment.toString \ntoString \nPeriodAlignment.convert \nconvert \nPeriodAlignment.Start \nStart \nPeriodAlignment.Middle \nMiddle \nPeriodAlignment.End \nEnd"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-periodalignment.html#Convert","title":"PeriodAlignment.Convert","content":"PeriodAlignment.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-periodalignment.html#toString","title":"PeriodAlignment.toString","content":"PeriodAlignment.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-periodalignment.html#convert","title":"PeriodAlignment.convert","content":"PeriodAlignment.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-periodalignment.html#Start","title":"PeriodAlignment.Start","content":"PeriodAlignment.Start \nStart \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-periodalignment.html#Middle","title":"PeriodAlignment.Middle","content":"PeriodAlignment.Middle \nMiddle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-periodalignment.html#End","title":"PeriodAlignment.End","content":"PeriodAlignment.End \nEnd \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-polargridshape.html","title":"PolarGridShape","content":"PolarGridShape \n\n Sets the method used to compute the sample\u0027s Q1 and Q3 quartiles\n \nPolarGridShape.Convert \nConvert \nPolarGridShape.toString \ntoString \nPolarGridShape.convert \nconvert \nPolarGridShape.Circular \nCircular \nPolarGridShape.Linear \nLinear"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-polargridshape.html#Convert","title":"PolarGridShape.Convert","content":"PolarGridShape.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-polargridshape.html#toString","title":"PolarGridShape.toString","content":"PolarGridShape.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-polargridshape.html#convert","title":"PolarGridShape.convert","content":"PolarGridShape.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-polargridshape.html#Circular","title":"PolarGridShape.Circular","content":"PolarGridShape.Circular \nCircular \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-polargridshape.html#Linear","title":"PolarGridShape.Linear","content":"PolarGridShape.Linear \nLinear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html","title":"QuartileMethod","content":"QuartileMethod \n\n Sets the method used to compute the sample\u0027s Q1 and Q3 quartiles\n \nQuartileMethod.Convert \nConvert \nQuartileMethod.toString \ntoString \nQuartileMethod.convert \nconvert \nQuartileMethod.Linear \nLinear \nQuartileMethod.Exclusive \nExclusive \nQuartileMethod.Inclusive \nInclusive"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html#Convert","title":"QuartileMethod.Convert","content":"QuartileMethod.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html#toString","title":"QuartileMethod.toString","content":"QuartileMethod.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html#convert","title":"QuartileMethod.convert","content":"QuartileMethod.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html#Linear","title":"QuartileMethod.Linear","content":"QuartileMethod.Linear \nLinear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html#Exclusive","title":"QuartileMethod.Exclusive","content":"QuartileMethod.Exclusive \nExclusive \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-quartilemethod.html#Inclusive","title":"QuartileMethod.Inclusive","content":"QuartileMethod.Inclusive \nInclusive \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-range.html","title":"Range","content":"Range \n\n Defines a Range between min and max value\n \nRange.Convert \nConvert \nRange.ofMinMax \nofMinMax \nRange.ofValues \nofValues \nRange.convert \nconvert \nRange.MinMax \nMinMax \nRange.Values \nValues"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-range.html#Convert","title":"Range.Convert","content":"Range.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-range.html#ofMinMax","title":"Range.ofMinMax","content":"Range.ofMinMax \nofMinMax \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-range.html#ofValues","title":"Range.ofValues","content":"Range.ofValues \nofValues \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-range.html#convert","title":"Range.convert","content":"Range.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-range.html#MinMax","title":"Range.MinMax","content":"Range.MinMax \nMinMax \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-range.html#Values","title":"Range.Values","content":"Range.Values \nValues \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html","title":"RangeMode","content":"RangeMode \n\n If \u0022normal\u0022, the range is computed in relation to the extrema of the input data. If \u0022tozero\u0022\u0060, the range extends to 0, regardless of the input data If \u0022nonnegative\u0022, the range is non-negative, regardless of the input data.\n \nRangeMode.Convert \nConvert \nRangeMode.toString \ntoString \nRangeMode.convert \nconvert \nRangeMode.Normal \nNormal \nRangeMode.ToZero \nToZero \nRangeMode.NonNegative \nNonNegative"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html#Convert","title":"RangeMode.Convert","content":"RangeMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html#toString","title":"RangeMode.toString","content":"RangeMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html#convert","title":"RangeMode.convert","content":"RangeMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html#Normal","title":"RangeMode.Normal","content":"RangeMode.Normal \nNormal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html#ToZero","title":"RangeMode.ToZero","content":"RangeMode.ToZero \nToZero \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangemode.html#NonNegative","title":"RangeMode.NonNegative","content":"RangeMode.NonNegative \nNonNegative \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangebreakpattern.html","title":"RangebreakPattern","content":"RangebreakPattern \n\n Determines a pattern on the time line that generates breaks.\n \nRangebreakPattern.Convert \nConvert \nRangebreakPattern.toString \ntoString \nRangebreakPattern.convert \nconvert \nRangebreakPattern.DayOfWeek \nDayOfWeek \nRangebreakPattern.Hour \nHour \nRangebreakPattern.NoPattern \nNoPattern"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangebreakpattern.html#Convert","title":"RangebreakPattern.Convert","content":"RangebreakPattern.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangebreakpattern.html#toString","title":"RangebreakPattern.toString","content":"RangebreakPattern.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangebreakpattern.html#convert","title":"RangebreakPattern.convert","content":"RangebreakPattern.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangebreakpattern.html#DayOfWeek","title":"RangebreakPattern.DayOfWeek","content":"RangebreakPattern.DayOfWeek \nDayOfWeek \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangebreakpattern.html#Hour","title":"RangebreakPattern.Hour","content":"RangebreakPattern.Hour \nHour \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangebreakpattern.html#NoPattern","title":"RangebreakPattern.NoPattern","content":"RangebreakPattern.NoPattern \nNoPattern \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangesliderrangemode.html","title":"RangesliderRangeMode","content":"RangesliderRangeMode \n \nRangesliderRangeMode.Convert \nConvert \nRangesliderRangeMode.toString \ntoString \nRangesliderRangeMode.convert \nconvert \nRangesliderRangeMode.Auto \nAuto \nRangesliderRangeMode.Fixed \nFixed \nRangesliderRangeMode.Match \nMatch"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangesliderrangemode.html#Convert","title":"RangesliderRangeMode.Convert","content":"RangesliderRangeMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangesliderrangemode.html#toString","title":"RangesliderRangeMode.toString","content":"RangesliderRangeMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangesliderrangemode.html#convert","title":"RangesliderRangeMode.convert","content":"RangesliderRangeMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangesliderrangemode.html#Auto","title":"RangesliderRangeMode.Auto","content":"RangesliderRangeMode.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangesliderrangemode.html#Fixed","title":"RangesliderRangeMode.Fixed","content":"RangesliderRangeMode.Fixed \nFixed \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-rangesliderrangemode.html#Match","title":"RangesliderRangeMode.Match","content":"RangesliderRangeMode.Match \nMatch \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scalemode.html","title":"ScaleMode","content":"ScaleMode \n \nScaleMode.Convert \nConvert \nScaleMode.toString \ntoString \nScaleMode.convert \nconvert \nScaleMode.Width \nWidth \nScaleMode.Count \nCount"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scalemode.html#Convert","title":"ScaleMode.Convert","content":"ScaleMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scalemode.html#toString","title":"ScaleMode.toString","content":"ScaleMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scalemode.html#convert","title":"ScaleMode.convert","content":"ScaleMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scalemode.html#Width","title":"ScaleMode.Width","content":"ScaleMode.Width \nWidth \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scalemode.html#Count","title":"ScaleMode.Count","content":"ScaleMode.Count \nCount \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scattermode.html","title":"ScatterMode","content":"ScatterMode \n \nScatterMode.Convert \nConvert \nScatterMode.toString \ntoString \nScatterMode.convert \nconvert \nScatterMode.Group \nGroup \nScatterMode.Overlay \nOverlay"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scattermode.html#Convert","title":"ScatterMode.Convert","content":"ScatterMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scattermode.html#toString","title":"ScatterMode.toString","content":"ScatterMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scattermode.html#convert","title":"ScatterMode.convert","content":"ScatterMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scattermode.html#Group","title":"ScatterMode.Group","content":"ScatterMode.Group \nGroup \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scattermode.html#Overlay","title":"ScatterMode.Overlay","content":"ScatterMode.Overlay \nOverlay \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scrollzoom.html","title":"ScrollZoom","content":"ScrollZoom \n \nScrollZoom.Convert \nConvert \nScrollZoom.convert \nconvert \nScrollZoom.Cartesian \nCartesian \nScrollZoom.GL3D \nGL3D \nScrollZoom.Geo \nGeo \nScrollZoom.Mapbox \nMapbox \nScrollZoom.All \nAll \nScrollZoom.NoZoom \nNoZoom"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scrollzoom.html#Convert","title":"ScrollZoom.Convert","content":"ScrollZoom.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scrollzoom.html#convert","title":"ScrollZoom.convert","content":"ScrollZoom.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scrollzoom.html#Cartesian","title":"ScrollZoom.Cartesian","content":"ScrollZoom.Cartesian \nCartesian \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scrollzoom.html#GL3D","title":"ScrollZoom.GL3D","content":"ScrollZoom.GL3D \nGL3D \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scrollzoom.html#Geo","title":"ScrollZoom.Geo","content":"ScrollZoom.Geo \nGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scrollzoom.html#Mapbox","title":"ScrollZoom.Mapbox","content":"ScrollZoom.Mapbox \nMapbox \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scrollzoom.html#All","title":"ScrollZoom.All","content":"ScrollZoom.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-scrollzoom.html#NoZoom","title":"ScrollZoom.NoZoom","content":"ScrollZoom.NoZoom \nNoZoom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectdirection.html","title":"SelectDirection","content":"SelectDirection \n \nSelectDirection.Convert \nConvert \nSelectDirection.toString \ntoString \nSelectDirection.convert \nconvert \nSelectDirection.Horizontal \nHorizontal \nSelectDirection.Vertical \nVertical \nSelectDirection.Diagonal \nDiagonal \nSelectDirection.Any \nAny"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectdirection.html#Convert","title":"SelectDirection.Convert","content":"SelectDirection.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectdirection.html#toString","title":"SelectDirection.toString","content":"SelectDirection.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectdirection.html#convert","title":"SelectDirection.convert","content":"SelectDirection.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectdirection.html#Horizontal","title":"SelectDirection.Horizontal","content":"SelectDirection.Horizontal \nHorizontal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectdirection.html#Vertical","title":"SelectDirection.Vertical","content":"SelectDirection.Vertical \nVertical \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectdirection.html#Diagonal","title":"SelectDirection.Diagonal","content":"SelectDirection.Diagonal \nDiagonal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectdirection.html#Any","title":"SelectDirection.Any","content":"SelectDirection.Any \nAny \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectiontype.html","title":"SelectionType","content":"SelectionType \n \nSelectionType.Convert \nConvert \nSelectionType.toString \ntoString \nSelectionType.convert \nconvert \nSelectionType.Rectangle \nRectangle \nSelectionType.SvgPath \nSvgPath"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectiontype.html#Convert","title":"SelectionType.Convert","content":"SelectionType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectiontype.html#toString","title":"SelectionType.toString","content":"SelectionType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectiontype.html#convert","title":"SelectionType.convert","content":"SelectionType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectiontype.html#Rectangle","title":"SelectionType.Rectangle","content":"SelectionType.Rectangle \nRectangle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-selectiontype.html#SvgPath","title":"SelectionType.SvgPath","content":"SelectionType.SvgPath \nSvgPath \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html","title":"Shape","content":"Shape \n\n Determines the line shape. With \u0022spline\u0022 the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.\n \nShape.Convert \nConvert \nShape.toString \ntoString \nShape.convert \nconvert \nShape.Linear \nLinear \nShape.Spline \nSpline \nShape.Hv \nHv \nShape.Vh \nVh \nShape.Hvh \nHvh \nShape.Vhv \nVhv"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Convert","title":"Shape.Convert","content":"Shape.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#toString","title":"Shape.toString","content":"Shape.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#convert","title":"Shape.convert","content":"Shape.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Linear","title":"Shape.Linear","content":"Shape.Linear \nLinear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Spline","title":"Shape.Spline","content":"Shape.Spline \nSpline \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Hv","title":"Shape.Hv","content":"Shape.Hv \nHv \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Vh","title":"Shape.Vh","content":"Shape.Vh \nVh \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Hvh","title":"Shape.Hvh","content":"Shape.Hvh \nHvh \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shape.html#Vhv","title":"Shape.Vhv","content":"Shape.Vhv \nVhv \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapesizemode.html","title":"ShapeSizeMode","content":"ShapeSizeMode \n \nShapeSizeMode.Convert \nConvert \nShapeSizeMode.toString \ntoString \nShapeSizeMode.convert \nconvert \nShapeSizeMode.Scaled \nScaled \nShapeSizeMode.Pixel \nPixel"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapesizemode.html#Convert","title":"ShapeSizeMode.Convert","content":"ShapeSizeMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapesizemode.html#toString","title":"ShapeSizeMode.toString","content":"ShapeSizeMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapesizemode.html#convert","title":"ShapeSizeMode.convert","content":"ShapeSizeMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapesizemode.html#Scaled","title":"ShapeSizeMode.Scaled","content":"ShapeSizeMode.Scaled \nScaled \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapesizemode.html#Pixel","title":"ShapeSizeMode.Pixel","content":"ShapeSizeMode.Pixel \nPixel \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html","title":"ShapeType","content":"ShapeType \n\n Specifies the shape type to be drawn. If \u0022line\u0022, a line is drawn from (\u0060x0\u0060,\u0060y0\u0060) to (\u0060x1\u0060,\u0060y1\u0060) If \u0022circle\u0022, a circle is drawn from ((\u0060x0\u0060\u002B\u0060x1\u0060)/2, (\u0060y0\u0060\u002B\u0060y1\u0060)/2))\n with radius (|(\u0060x0\u0060\u002B\u0060x1\u0060)/2 - \u0060x0\u0060|, |(\u0060y0\u0060\u002B\u0060y1\u0060)/2 -\u0060y0\u0060)|) If \u0022rect\u0022, a rectangle is drawn linking (\u0060x0\u0060,\u0060y0\u0060), (\u0060x1\u0060,\u0060y0\u0060), (\u0060x1\u0060,\u0060y1\u0060), (\u0060x0\u0060,\u0060y1\u0060), (\u0060x0\u0060,\u0060y0\u0060)\n If \u0022path\u0022, draw a custom SVG path using \u0060path\u0060.\n \nShapeType.Convert \nConvert \nShapeType.toString \ntoString \nShapeType.convert \nconvert \nShapeType.Circle \nCircle \nShapeType.Rectangle \nRectangle \nShapeType.SvgPath \nSvgPath \nShapeType.Line \nLine"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#Convert","title":"ShapeType.Convert","content":"ShapeType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#toString","title":"ShapeType.toString","content":"ShapeType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#convert","title":"ShapeType.convert","content":"ShapeType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#Circle","title":"ShapeType.Circle","content":"ShapeType.Circle \nCircle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#Rectangle","title":"ShapeType.Rectangle","content":"ShapeType.Rectangle \nRectangle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#SvgPath","title":"ShapeType.SvgPath","content":"ShapeType.SvgPath \nSvgPath \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-shapetype.html#Line","title":"ShapeType.Line","content":"ShapeType.Line \nLine \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html","title":"ShowExponent","content":"ShowExponent \n\n If \u0022all\u0022, all exponents are shown besides their significands. If \u0022first\u0022, only the exponent of the first tick is shown. If \u0022last\u0022, only the exponent of the last tick is shown. If \u0022none\u0022, no exponents appear.\n \nShowExponent.Convert \nConvert \nShowExponent.toString \ntoString \nShowExponent.convert \nconvert \nShowExponent.All \nAll \nShowExponent.First \nFirst \nShowExponent.Last \nLast \nShowExponent.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#Convert","title":"ShowExponent.Convert","content":"ShowExponent.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#toString","title":"ShowExponent.toString","content":"ShowExponent.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#convert","title":"ShowExponent.convert","content":"ShowExponent.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#All","title":"ShowExponent.All","content":"ShowExponent.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#First","title":"ShowExponent.First","content":"ShowExponent.First \nFirst \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#Last","title":"ShowExponent.Last","content":"ShowExponent.Last \nLast \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showexponent.html#None","title":"ShowExponent.None","content":"ShowExponent.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html","title":"ShowTickOption","content":"ShowTickOption \n\n If \u0022all\u0022, all tick labels are displayed with a prefix. If \u0022first\u0022, only the first tick is displayed with a prefix. If \u0022last\u0022, only the last tick is displayed with a suffix. If \u0022none\u0022, tick prefixes are hidden.\n \nShowTickOption.Convert \nConvert \nShowTickOption.toString \ntoString \nShowTickOption.convert \nconvert \nShowTickOption.All \nAll \nShowTickOption.First \nFirst \nShowTickOption.Last \nLast \nShowTickOption.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#Convert","title":"ShowTickOption.Convert","content":"ShowTickOption.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#toString","title":"ShowTickOption.toString","content":"ShowTickOption.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#convert","title":"ShowTickOption.convert","content":"ShowTickOption.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#All","title":"ShowTickOption.All","content":"ShowTickOption.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#First","title":"ShowTickOption.First","content":"ShowTickOption.First \nFirst \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#Last","title":"ShowTickOption.Last","content":"ShowTickOption.Last \nLast \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-showtickoption.html#None","title":"ShowTickOption.None","content":"ShowTickOption.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html","title":"Side","content":"Side \n \nSide.Convert \nConvert \nSide.toString \ntoString \nSide.convert \nconvert \nSide.Top \nTop \nSide.TopLeft \nTopLeft \nSide.Bottom \nBottom \nSide.Left \nLeft \nSide.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#Convert","title":"Side.Convert","content":"Side.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#toString","title":"Side.toString","content":"Side.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#convert","title":"Side.convert","content":"Side.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#Top","title":"Side.Top","content":"Side.Top \nTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#TopLeft","title":"Side.TopLeft","content":"Side.TopLeft \nTopLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#Bottom","title":"Side.Bottom","content":"Side.Bottom \nBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#Left","title":"Side.Left","content":"Side.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-side.html#Right","title":"Side.Right","content":"Side.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html","title":"SmoothAlg","content":"SmoothAlg \n\n Choose between algorithms (\u0027best\u0027 or \u0027fast\u0027) to smooth data linked to \u0027z\u0027. The default value is false corresponding to no smoothing.\n \nSmoothAlg.Convert \nConvert \nSmoothAlg.convert \nconvert \nSmoothAlg.False \nFalse \nSmoothAlg.Best \nBest \nSmoothAlg.Fast \nFast"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html#Convert","title":"SmoothAlg.Convert","content":"SmoothAlg.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html#convert","title":"SmoothAlg.convert","content":"SmoothAlg.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html#False","title":"SmoothAlg.False","content":"SmoothAlg.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html#Best","title":"SmoothAlg.Best","content":"SmoothAlg.Best \nBest \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-smoothalg.html#Fast","title":"SmoothAlg.Fast","content":"SmoothAlg.Fast \nFast \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-sortalgorithm.html","title":"SortAlgorithm","content":"SortAlgorithm \n \nSortAlgorithm.Convert \nConvert \nSortAlgorithm.toString \ntoString \nSortAlgorithm.convert \nconvert \nSortAlgorithm.Forward \nForward \nSortAlgorithm.Backward \nBackward"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-sortalgorithm.html#Convert","title":"SortAlgorithm.Convert","content":"SortAlgorithm.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-sortalgorithm.html#toString","title":"SortAlgorithm.toString","content":"SortAlgorithm.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-sortalgorithm.html#convert","title":"SortAlgorithm.convert","content":"SortAlgorithm.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-sortalgorithm.html#Forward","title":"SortAlgorithm.Forward","content":"SortAlgorithm.Forward \nForward \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-sortalgorithm.html#Backward","title":"SortAlgorithm.Backward","content":"SortAlgorithm.Backward \nBackward \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spanmode.html","title":"SpanMode","content":"SpanMode \n \nSpanMode.Convert \nConvert \nSpanMode.toString \ntoString \nSpanMode.convert \nconvert \nSpanMode.Soft \nSoft \nSpanMode.Hard \nHard \nSpanMode.Manual \nManual"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spanmode.html#Convert","title":"SpanMode.Convert","content":"SpanMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spanmode.html#toString","title":"SpanMode.toString","content":"SpanMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spanmode.html#convert","title":"SpanMode.convert","content":"SpanMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spanmode.html#Soft","title":"SpanMode.Soft","content":"SpanMode.Soft \nSoft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spanmode.html#Hard","title":"SpanMode.Hard","content":"SpanMode.Hard \nHard \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spanmode.html#Manual","title":"SpanMode.Manual","content":"SpanMode.Manual \nManual \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html","title":"SpikeMode","content":"SpikeMode \n\n Determines the drawing mode for the spike line\n \nSpikeMode.Convert \nConvert \nSpikeMode.toString \ntoString \nSpikeMode.convert \nconvert \nSpikeMode.Axis \nAxis \nSpikeMode.Across \nAcross \nSpikeMode.AxisAcross \nAxisAcross \nSpikeMode.Marker \nMarker \nSpikeMode.AxisMarker \nAxisMarker \nSpikeMode.AxisAcrossMarker \nAxisAcrossMarker"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#Convert","title":"SpikeMode.Convert","content":"SpikeMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#toString","title":"SpikeMode.toString","content":"SpikeMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#convert","title":"SpikeMode.convert","content":"SpikeMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#Axis","title":"SpikeMode.Axis","content":"SpikeMode.Axis \nAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#Across","title":"SpikeMode.Across","content":"SpikeMode.Across \nAcross \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#AxisAcross","title":"SpikeMode.AxisAcross","content":"SpikeMode.AxisAcross \nAxisAcross \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#Marker","title":"SpikeMode.Marker","content":"SpikeMode.Marker \nMarker \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#AxisMarker","title":"SpikeMode.AxisMarker","content":"SpikeMode.AxisMarker \nAxisMarker \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikemode.html#AxisAcrossMarker","title":"SpikeMode.AxisAcrossMarker","content":"SpikeMode.AxisAcrossMarker \nAxisAcrossMarker \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikesnap.html","title":"SpikeSnap","content":"SpikeSnap \n\n Determines whether spikelines are stuck to the cursor or to the closest datapoints.\n \nSpikeSnap.Convert \nConvert \nSpikeSnap.toString \ntoString \nSpikeSnap.convert \nconvert \nSpikeSnap.Data \nData \nSpikeSnap.Cursor \nCursor \nSpikeSnap.HoveredData \nHoveredData"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikesnap.html#Convert","title":"SpikeSnap.Convert","content":"SpikeSnap.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikesnap.html#toString","title":"SpikeSnap.toString","content":"SpikeSnap.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikesnap.html#convert","title":"SpikeSnap.convert","content":"SpikeSnap.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikesnap.html#Data","title":"SpikeSnap.Data","content":"SpikeSnap.Data \nData \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikesnap.html#Cursor","title":"SpikeSnap.Cursor","content":"SpikeSnap.Cursor \nCursor \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-spikesnap.html#HoveredData","title":"SpikeSnap.HoveredData","content":"SpikeSnap.HoveredData \nHoveredData \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-stackgaps.html","title":"StackGaps","content":"StackGaps \n \nStackGaps.Convert \nConvert \nStackGaps.toString \ntoString \nStackGaps.convert \nconvert \nStackGaps.InferZero \nInferZero \nStackGaps.Interpolate \nInterpolate"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-stackgaps.html#Convert","title":"StackGaps.Convert","content":"StackGaps.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-stackgaps.html#toString","title":"StackGaps.toString","content":"StackGaps.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-stackgaps.html#convert","title":"StackGaps.convert","content":"StackGaps.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-stackgaps.html#InferZero","title":"StackGaps.InferZero","content":"StackGaps.InferZero \nInferZero \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-stackgaps.html#Interpolate","title":"StackGaps.Interpolate","content":"StackGaps.Interpolate \nInterpolate \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html","title":"SubPlotId","content":"SubPlotId \n \nSubPlotId.Convert \nConvert \nSubPlotId.toString \ntoString \nSubPlotId.convert \nconvert \nSubPlotId.XAxis \nXAxis \nSubPlotId.YAxis \nYAxis \nSubPlotId.ZAxis \nZAxis \nSubPlotId.ColorAxis \nColorAxis \nSubPlotId.Geo \nGeo \nSubPlotId.Mapbox \nMapbox \nSubPlotId.Polar \nPolar \nSubPlotId.Ternary \nTernary \nSubPlotId.Scene \nScene \nSubPlotId.Carpet \nCarpet \nSubPlotId.Smith \nSmith"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#Convert","title":"SubPlotId.Convert","content":"SubPlotId.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#toString","title":"SubPlotId.toString","content":"SubPlotId.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#convert","title":"SubPlotId.convert","content":"SubPlotId.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#XAxis","title":"SubPlotId.XAxis","content":"SubPlotId.XAxis \nXAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#YAxis","title":"SubPlotId.YAxis","content":"SubPlotId.YAxis \nYAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#ZAxis","title":"SubPlotId.ZAxis","content":"SubPlotId.ZAxis \nZAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#ColorAxis","title":"SubPlotId.ColorAxis","content":"SubPlotId.ColorAxis \nColorAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#Geo","title":"SubPlotId.Geo","content":"SubPlotId.Geo \nGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#Mapbox","title":"SubPlotId.Mapbox","content":"SubPlotId.Mapbox \nMapbox \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#Polar","title":"SubPlotId.Polar","content":"SubPlotId.Polar \nPolar \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#Ternary","title":"SubPlotId.Ternary","content":"SubPlotId.Ternary \nTernary \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#Scene","title":"SubPlotId.Scene","content":"SubPlotId.Scene \nScene \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#Carpet","title":"SubPlotId.Carpet","content":"SubPlotId.Carpet \nCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-subplotid.html#Smith","title":"SubPlotId.Smith","content":"SubPlotId.Smith \nSmith \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfaceaxis.html","title":"SurfaceAxis","content":"SurfaceAxis \n \nSurfaceAxis.Convert \nConvert \nSurfaceAxis.toString \ntoString \nSurfaceAxis.convert \nconvert \nSurfaceAxis.NoSurfaceAxis \nNoSurfaceAxis \nSurfaceAxis.X \nX \nSurfaceAxis.Y \nY \nSurfaceAxis.Z \nZ"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfaceaxis.html#Convert","title":"SurfaceAxis.Convert","content":"SurfaceAxis.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfaceaxis.html#toString","title":"SurfaceAxis.toString","content":"SurfaceAxis.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfaceaxis.html#convert","title":"SurfaceAxis.convert","content":"SurfaceAxis.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfaceaxis.html#NoSurfaceAxis","title":"SurfaceAxis.NoSurfaceAxis","content":"SurfaceAxis.NoSurfaceAxis \nNoSurfaceAxis \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfaceaxis.html#X","title":"SurfaceAxis.X","content":"SurfaceAxis.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfaceaxis.html#Y","title":"SurfaceAxis.Y","content":"SurfaceAxis.Y \nY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfaceaxis.html#Z","title":"SurfaceAxis.Z","content":"SurfaceAxis.Z \nZ \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html","title":"SurfacePattern","content":"SurfacePattern \n\n Sets the surface pattern of the iso-surface 3-D sections. The default pattern of the surface is \u0060all\u0060 meaning that the rest of surface elements would be shaded. The check options (either 1 or 2) could be used to draw half of the squares on the surface. Using various combinations of capital \u0060A\u0060, \u0060B\u0060, \u0060C\u0060, \u0060D\u0060 and \u0060E\u0060 may also be used to reduce the number of triangles on the iso-surfaces and creating other patterns of interest.\n \nSurfacePattern.Convert \nConvert \nSurfacePattern.toString \ntoString \nSurfacePattern.convert \nconvert \nSurfacePattern.A \nA \nSurfacePattern.B \nB \nSurfacePattern.C \nC \nSurfacePattern.D \nD \nSurfacePattern.E \nE \nSurfacePattern.AB \nAB \nSurfacePattern.AC \nAC \nSurfacePattern.AD \nAD \nSurfacePattern.AE \nAE \nSurfacePattern.BC \nBC \nSurfacePattern.BD \nBD \nSurfacePattern.BE \nBE \nSurfacePattern.CD \nCD \nSurfacePattern.CE \nCE \nSurfacePattern.ABC \nABC \nSurfacePattern.ABD \nABD \nSurfacePattern.ABE \nABE \nSurfacePattern.BCD \nBCD \nSurfacePattern.BDE \nBDE \nSurfacePattern.ABCD \nABCD \nSurfacePattern.BCDE \nBCDE \nSurfacePattern.Odd \nOdd \nSurfacePattern.Even \nEven \nSurfacePattern.All \nAll"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#Convert","title":"SurfacePattern.Convert","content":"SurfacePattern.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#toString","title":"SurfacePattern.toString","content":"SurfacePattern.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#convert","title":"SurfacePattern.convert","content":"SurfacePattern.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#A","title":"SurfacePattern.A","content":"SurfacePattern.A \nA \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#B","title":"SurfacePattern.B","content":"SurfacePattern.B \nB \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#C","title":"SurfacePattern.C","content":"SurfacePattern.C \nC \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#D","title":"SurfacePattern.D","content":"SurfacePattern.D \nD \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#E","title":"SurfacePattern.E","content":"SurfacePattern.E \nE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#AB","title":"SurfacePattern.AB","content":"SurfacePattern.AB \nAB \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#AC","title":"SurfacePattern.AC","content":"SurfacePattern.AC \nAC \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#AD","title":"SurfacePattern.AD","content":"SurfacePattern.AD \nAD \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#AE","title":"SurfacePattern.AE","content":"SurfacePattern.AE \nAE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#BC","title":"SurfacePattern.BC","content":"SurfacePattern.BC \nBC \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#BD","title":"SurfacePattern.BD","content":"SurfacePattern.BD \nBD \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#BE","title":"SurfacePattern.BE","content":"SurfacePattern.BE \nBE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#CD","title":"SurfacePattern.CD","content":"SurfacePattern.CD \nCD \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#CE","title":"SurfacePattern.CE","content":"SurfacePattern.CE \nCE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#ABC","title":"SurfacePattern.ABC","content":"SurfacePattern.ABC \nABC \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#ABD","title":"SurfacePattern.ABD","content":"SurfacePattern.ABD \nABD \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#ABE","title":"SurfacePattern.ABE","content":"SurfacePattern.ABE \nABE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#BCD","title":"SurfacePattern.BCD","content":"SurfacePattern.BCD \nBCD \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#BDE","title":"SurfacePattern.BDE","content":"SurfacePattern.BDE \nBDE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#ABCD","title":"SurfacePattern.ABCD","content":"SurfacePattern.ABCD \nABCD \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#BCDE","title":"SurfacePattern.BCDE","content":"SurfacePattern.BCDE \nBCDE \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#Odd","title":"SurfacePattern.Odd","content":"SurfacePattern.Odd \nOdd \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#Even","title":"SurfacePattern.Even","content":"SurfacePattern.Even \nEven \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-surfacepattern.html#All","title":"SurfacePattern.All","content":"SurfacePattern.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html","title":"SymbolStyle","content":"SymbolStyle \n \nSymbolStyle.Convert \nConvert \nSymbolStyle.toModifier \ntoModifier \nSymbolStyle.toString \ntoString \nSymbolStyle.convert \nconvert \nSymbolStyle.Open \nOpen \nSymbolStyle.Dot \nDot \nSymbolStyle.OpenDot \nOpenDot"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#Convert","title":"SymbolStyle.Convert","content":"SymbolStyle.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#toModifier","title":"SymbolStyle.toModifier","content":"SymbolStyle.toModifier \ntoModifier \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#toString","title":"SymbolStyle.toString","content":"SymbolStyle.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#convert","title":"SymbolStyle.convert","content":"SymbolStyle.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#Open","title":"SymbolStyle.Open","content":"SymbolStyle.Open \nOpen \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#Dot","title":"SymbolStyle.Dot","content":"SymbolStyle.Dot \nDot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-symbolstyle.html#OpenDot","title":"SymbolStyle.OpenDot","content":"SymbolStyle.OpenDot \nOpenDot \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textangle.html","title":"TextAngle","content":"TextAngle \n \nTextAngle.Convert \nConvert \nTextAngle.convert \nconvert \nTextAngle.Auto \nAuto \nTextAngle.Degrees \nDegrees"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textangle.html#Convert","title":"TextAngle.Convert","content":"TextAngle.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textangle.html#convert","title":"TextAngle.convert","content":"TextAngle.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textangle.html#Auto","title":"TextAngle.Auto","content":"TextAngle.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textangle.html#Degrees","title":"TextAngle.Degrees","content":"TextAngle.Degrees \nDegrees \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html","title":"TextInfo","content":"TextInfo \n\n Determines which trace information appear on the graph and on hover (HoverInfo)\n \nTextInfo.Convert \nConvert \nTextInfo.toConcatString \ntoConcatString \nTextInfo.toString \ntoString \nTextInfo.convert \nconvert \nTextInfo.All \nAll \nTextInfo.None \nNone \nTextInfo.Label \nLabel \nTextInfo.Text \nText \nTextInfo.Value \nValue \nTextInfo.Percent \nPercent"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#Convert","title":"TextInfo.Convert","content":"TextInfo.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#toConcatString","title":"TextInfo.toConcatString","content":"TextInfo.toConcatString \ntoConcatString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#toString","title":"TextInfo.toString","content":"TextInfo.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#convert","title":"TextInfo.convert","content":"TextInfo.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#All","title":"TextInfo.All","content":"TextInfo.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#None","title":"TextInfo.None","content":"TextInfo.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#Label","title":"TextInfo.Label","content":"TextInfo.Label \nLabel \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#Text","title":"TextInfo.Text","content":"TextInfo.Text \nText \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#Value","title":"TextInfo.Value","content":"TextInfo.Value \nValue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textinfo.html#Percent","title":"TextInfo.Percent","content":"TextInfo.Percent \nPercent \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html","title":"TextPosition","content":"TextPosition \n\n Sets the positions of the \u0060text\u0060 elements. Note that not all options work for every type of trace, e.g. Pie Charts only support \u0022inside\u0022 | \u0022outside\u0022 | \u0022auto\u0022 | \u0022none\u0022\n\n - Cartesian plots: Sets the positions of the \u0060text\u0060 elements with respects to the (x,y) coordinates.\n\n - Pie Charts and derivatives: Specifies the location of the text with respects to the sector.\n \nTextPosition.Convert \nConvert \nTextPosition.toString \ntoString \nTextPosition.convert \nconvert \nTextPosition.TopLeft \nTopLeft \nTextPosition.TopCenter \nTopCenter \nTextPosition.TopRight \nTopRight \nTextPosition.MiddleLeft \nMiddleLeft \nTextPosition.MiddleCenter \nMiddleCenter \nTextPosition.MiddleRight \nMiddleRight \nTextPosition.BottomLeft \nBottomLeft \nTextPosition.BottomCenter \nBottomCenter \nTextPosition.BottomRight \nBottomRight \nTextPosition.Auto \nAuto \nTextPosition.Inside \nInside \nTextPosition.Outside \nOutside \nTextPosition.None \nNone"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#Convert","title":"TextPosition.Convert","content":"TextPosition.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#toString","title":"TextPosition.toString","content":"TextPosition.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#convert","title":"TextPosition.convert","content":"TextPosition.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#TopLeft","title":"TextPosition.TopLeft","content":"TextPosition.TopLeft \nTopLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#TopCenter","title":"TextPosition.TopCenter","content":"TextPosition.TopCenter \nTopCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#TopRight","title":"TextPosition.TopRight","content":"TextPosition.TopRight \nTopRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#MiddleLeft","title":"TextPosition.MiddleLeft","content":"TextPosition.MiddleLeft \nMiddleLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#MiddleCenter","title":"TextPosition.MiddleCenter","content":"TextPosition.MiddleCenter \nMiddleCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#MiddleRight","title":"TextPosition.MiddleRight","content":"TextPosition.MiddleRight \nMiddleRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#BottomLeft","title":"TextPosition.BottomLeft","content":"TextPosition.BottomLeft \nBottomLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#BottomCenter","title":"TextPosition.BottomCenter","content":"TextPosition.BottomCenter \nBottomCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#BottomRight","title":"TextPosition.BottomRight","content":"TextPosition.BottomRight \nBottomRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#Auto","title":"TextPosition.Auto","content":"TextPosition.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#Inside","title":"TextPosition.Inside","content":"TextPosition.Inside \nInside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#Outside","title":"TextPosition.Outside","content":"TextPosition.Outside \nOutside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-textposition.html#None","title":"TextPosition.None","content":"TextPosition.None \nNone \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickautomargin.html","title":"TickAutoMargin","content":"TickAutoMargin \n \nTickAutoMargin.Convert \nConvert \nTickAutoMargin.toString \ntoString \nTickAutoMargin.convert \nconvert \nTickAutoMargin.Height \nHeight \nTickAutoMargin.Width \nWidth \nTickAutoMargin.Left \nLeft \nTickAutoMargin.Right \nRight \nTickAutoMargin.Top \nTop \nTickAutoMargin.Bottom \nBottom \nTickAutoMargin.All \nAll \nTickAutoMargin.Custom \nCustom"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickautomargin.html#Convert","title":"TickAutoMargin.Convert","content":"TickAutoMargin.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickautomargin.html#toString","title":"TickAutoMargin.toString","content":"TickAutoMargin.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickautomargin.html#convert","title":"TickAutoMargin.convert","content":"TickAutoMargin.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickautomargin.html#Height","title":"TickAutoMargin.Height","content":"TickAutoMargin.Height \nHeight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickautomargin.html#Width","title":"TickAutoMargin.Width","content":"TickAutoMargin.Width \nWidth \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickautomargin.html#Left","title":"TickAutoMargin.Left","content":"TickAutoMargin.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickautomargin.html#Right","title":"TickAutoMargin.Right","content":"TickAutoMargin.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickautomargin.html#Top","title":"TickAutoMargin.Top","content":"TickAutoMargin.Top \nTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickautomargin.html#Bottom","title":"TickAutoMargin.Bottom","content":"TickAutoMargin.Bottom \nBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickautomargin.html#All","title":"TickAutoMargin.All","content":"TickAutoMargin.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickautomargin.html#Custom","title":"TickAutoMargin.Custom","content":"TickAutoMargin.Custom \nCustom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelmode.html","title":"TickLabelMode","content":"TickLabelMode \n \nTickLabelMode.Convert \nConvert \nTickLabelMode.toString \ntoString \nTickLabelMode.convert \nconvert \nTickLabelMode.Instant \nInstant \nTickLabelMode.Period \nPeriod"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelmode.html#Convert","title":"TickLabelMode.Convert","content":"TickLabelMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelmode.html#toString","title":"TickLabelMode.toString","content":"TickLabelMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelmode.html#convert","title":"TickLabelMode.convert","content":"TickLabelMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelmode.html#Instant","title":"TickLabelMode.Instant","content":"TickLabelMode.Instant \nInstant \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelmode.html#Period","title":"TickLabelMode.Period","content":"TickLabelMode.Period \nPeriod \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabeloverflow.html","title":"TickLabelOverflow","content":"TickLabelOverflow \n \nTickLabelOverflow.Convert \nConvert \nTickLabelOverflow.toString \ntoString \nTickLabelOverflow.convert \nconvert \nTickLabelOverflow.Allow \nAllow \nTickLabelOverflow.HidePastDiv \nHidePastDiv \nTickLabelOverflow.HidePastDomain \nHidePastDomain"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabeloverflow.html#Convert","title":"TickLabelOverflow.Convert","content":"TickLabelOverflow.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabeloverflow.html#toString","title":"TickLabelOverflow.toString","content":"TickLabelOverflow.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabeloverflow.html#convert","title":"TickLabelOverflow.convert","content":"TickLabelOverflow.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabeloverflow.html#Allow","title":"TickLabelOverflow.Allow","content":"TickLabelOverflow.Allow \nAllow \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabeloverflow.html#HidePastDiv","title":"TickLabelOverflow.HidePastDiv","content":"TickLabelOverflow.HidePastDiv \nHidePastDiv \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabeloverflow.html#HidePastDomain","title":"TickLabelOverflow.HidePastDomain","content":"TickLabelOverflow.HidePastDomain \nHidePastDomain \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html","title":"TickLabelPosition","content":"TickLabelPosition \n \nTickLabelPosition.Convert \nConvert \nTickLabelPosition.toString \ntoString \nTickLabelPosition.convert \nconvert \nTickLabelPosition.Outside \nOutside \nTickLabelPosition.Inside \nInside \nTickLabelPosition.OutsideTop \nOutsideTop \nTickLabelPosition.InsideTop \nInsideTop \nTickLabelPosition.OutsideLeft \nOutsideLeft \nTickLabelPosition.InsideLeft \nInsideLeft \nTickLabelPosition.OutsideRight \nOutsideRight \nTickLabelPosition.InsideRight \nInsideRight \nTickLabelPosition.OutsideBottom \nOutsideBottom \nTickLabelPosition.InsideBottom \nInsideBottom"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#Convert","title":"TickLabelPosition.Convert","content":"TickLabelPosition.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#toString","title":"TickLabelPosition.toString","content":"TickLabelPosition.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#convert","title":"TickLabelPosition.convert","content":"TickLabelPosition.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#Outside","title":"TickLabelPosition.Outside","content":"TickLabelPosition.Outside \nOutside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#Inside","title":"TickLabelPosition.Inside","content":"TickLabelPosition.Inside \nInside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#OutsideTop","title":"TickLabelPosition.OutsideTop","content":"TickLabelPosition.OutsideTop \nOutsideTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#InsideTop","title":"TickLabelPosition.InsideTop","content":"TickLabelPosition.InsideTop \nInsideTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#OutsideLeft","title":"TickLabelPosition.OutsideLeft","content":"TickLabelPosition.OutsideLeft \nOutsideLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#InsideLeft","title":"TickLabelPosition.InsideLeft","content":"TickLabelPosition.InsideLeft \nInsideLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#OutsideRight","title":"TickLabelPosition.OutsideRight","content":"TickLabelPosition.OutsideRight \nOutsideRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#InsideRight","title":"TickLabelPosition.InsideRight","content":"TickLabelPosition.InsideRight \nInsideRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#OutsideBottom","title":"TickLabelPosition.OutsideBottom","content":"TickLabelPosition.OutsideBottom \nOutsideBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-ticklabelposition.html#InsideBottom","title":"TickLabelPosition.InsideBottom","content":"TickLabelPosition.InsideBottom \nInsideBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html","title":"TickMode","content":"TickMode \n\n Sets the tick mode for this axis. If \u0022auto\u0022, the number of ticks is set via \u0060nticks\u0060. If \u0022linear\u0022, the placement of the ticks is determined by a starting position \u0060tick0\u0060 and a tick step \u0060dtick\u0060 (\u0022linear\u0022 is the default value if \u0060tick0\u0060 and \u0060dtick\u0060 are provided). If \u0022array\u0022, the placement of the ticks is set via \u0060tickvals\u0060 and the tick text is \u0060ticktext\u0060. (\u0022array\u0022 is the default value if \u0060tickvals\u0060 is provided). If \u0022sync\u0022, the number of ticks will sync with the overlayed axis set by \u0060overlaying\u0060 property.\n \nTickMode.Convert \nConvert \nTickMode.toString \ntoString \nTickMode.convert \nconvert \nTickMode.Auto \nAuto \nTickMode.Linear \nLinear \nTickMode.Array \nArray \nTickMode.Sync \nSync"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#Convert","title":"TickMode.Convert","content":"TickMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#toString","title":"TickMode.toString","content":"TickMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#convert","title":"TickMode.convert","content":"TickMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#Auto","title":"TickMode.Auto","content":"TickMode.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#Linear","title":"TickMode.Linear","content":"TickMode.Linear \nLinear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#Array","title":"TickMode.Array","content":"TickMode.Array \nArray \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickmode.html#Sync","title":"TickMode.Sync","content":"TickMode.Sync \nSync \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html","title":"TickOptions","content":"TickOptions \n\n Determines whether ticks are drawn or not. If \u0022\u0022, this axis\u0027 ticks are not drawn. If \u0022outside\u0022 (\u0022inside\u0022), this axis\u0027 are drawn outside (inside) the axis lines.\n \nTickOptions.Convert \nConvert \nTickOptions.toString \ntoString \nTickOptions.convert \nconvert \nTickOptions.Outside \nOutside \nTickOptions.Inside \nInside \nTickOptions.Empty \nEmpty"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html#Convert","title":"TickOptions.Convert","content":"TickOptions.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html#toString","title":"TickOptions.toString","content":"TickOptions.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html#convert","title":"TickOptions.convert","content":"TickOptions.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html#Outside","title":"TickOptions.Outside","content":"TickOptions.Outside \nOutside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html#Inside","title":"TickOptions.Inside","content":"TickOptions.Inside \nInside \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tickoptions.html#Empty","title":"TickOptions.Empty","content":"TickOptions.Empty \nEmpty \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tilingflip.html","title":"TilingFlip","content":"TilingFlip \n \nTilingFlip.Convert \nConvert \nTilingFlip.toString \ntoString \nTilingFlip.convert \nconvert \nTilingFlip.X \nX \nTilingFlip.Y \nY \nTilingFlip.XY \nXY"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tilingflip.html#Convert","title":"TilingFlip.Convert","content":"TilingFlip.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tilingflip.html#toString","title":"TilingFlip.toString","content":"TilingFlip.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tilingflip.html#convert","title":"TilingFlip.convert","content":"TilingFlip.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tilingflip.html#X","title":"TilingFlip.X","content":"TilingFlip.X \nX \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tilingflip.html#Y","title":"TilingFlip.Y","content":"TilingFlip.Y \nY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tilingflip.html#XY","title":"TilingFlip.XY","content":"TilingFlip.XY \nXY \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html","title":"TimeStep","content":"TimeStep \n \nTimeStep.Convert \nConvert \nTimeStep.toString \ntoString \nTimeStep.convert \nconvert \nTimeStep.Month \nMonth \nTimeStep.Year \nYear \nTimeStep.Day \nDay \nTimeStep.Hour \nHour \nTimeStep.Minute \nMinute \nTimeStep.Second \nSecond \nTimeStep.All \nAll"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#Convert","title":"TimeStep.Convert","content":"TimeStep.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#toString","title":"TimeStep.toString","content":"TimeStep.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#convert","title":"TimeStep.convert","content":"TimeStep.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#Month","title":"TimeStep.Month","content":"TimeStep.Month \nMonth \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#Year","title":"TimeStep.Year","content":"TimeStep.Year \nYear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#Day","title":"TimeStep.Day","content":"TimeStep.Day \nDay \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#Hour","title":"TimeStep.Hour","content":"TimeStep.Hour \nHour \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#Minute","title":"TimeStep.Minute","content":"TimeStep.Minute \nMinute \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#Second","title":"TimeStep.Second","content":"TimeStep.Second \nSecond \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestep.html#All","title":"TimeStep.All","content":"TimeStep.All \nAll \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestepmode.html","title":"TimeStepMode","content":"TimeStepMode \n\n Determines whether spikelines are stuck to the cursor or to the closest datapoints.\n \nTimeStepMode.Convert \nConvert \nTimeStepMode.toString \ntoString \nTimeStepMode.convert \nconvert \nTimeStepMode.Backward \nBackward \nTimeStepMode.ToDate \nToDate"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestepmode.html#Convert","title":"TimeStepMode.Convert","content":"TimeStepMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestepmode.html#toString","title":"TimeStepMode.toString","content":"TimeStepMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestepmode.html#convert","title":"TimeStepMode.convert","content":"TimeStepMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestepmode.html#Backward","title":"TimeStepMode.Backward","content":"TimeStepMode.Backward \nBackward \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-timestepmode.html#ToDate","title":"TimeStepMode.ToDate","content":"TimeStepMode.ToDate \nToDate \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tracegroupclickoptions.html","title":"TraceGroupClickOptions","content":"TraceGroupClickOptions \n \nTraceGroupClickOptions.Convert \nConvert \nTraceGroupClickOptions.toString \ntoString \nTraceGroupClickOptions.convert \nconvert \nTraceGroupClickOptions.ToggleItem \nToggleItem \nTraceGroupClickOptions.ToggleGroup \nToggleGroup"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tracegroupclickoptions.html#Convert","title":"TraceGroupClickOptions.Convert","content":"TraceGroupClickOptions.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tracegroupclickoptions.html#toString","title":"TraceGroupClickOptions.toString","content":"TraceGroupClickOptions.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tracegroupclickoptions.html#convert","title":"TraceGroupClickOptions.convert","content":"TraceGroupClickOptions.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tracegroupclickoptions.html#ToggleItem","title":"TraceGroupClickOptions.ToggleItem","content":"TraceGroupClickOptions.ToggleItem \nToggleItem \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-tracegroupclickoptions.html#ToggleGroup","title":"TraceGroupClickOptions.ToggleGroup","content":"TraceGroupClickOptions.ToggleGroup \nToggleGroup \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html","title":"TraceItemClickOptions","content":"TraceItemClickOptions \n \nTraceItemClickOptions.Convert \nConvert \nTraceItemClickOptions.convert \nconvert \nTraceItemClickOptions.Toggle \nToggle \nTraceItemClickOptions.ToggleOthers \nToggleOthers \nTraceItemClickOptions.False \nFalse"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html#Convert","title":"TraceItemClickOptions.Convert","content":"TraceItemClickOptions.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html#convert","title":"TraceItemClickOptions.convert","content":"TraceItemClickOptions.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html#Toggle","title":"TraceItemClickOptions.Toggle","content":"TraceItemClickOptions.Toggle \nToggle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html#ToggleOthers","title":"TraceItemClickOptions.ToggleOthers","content":"TraceItemClickOptions.ToggleOthers \nToggleOthers \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemclickoptions.html#False","title":"TraceItemClickOptions.False","content":"TraceItemClickOptions.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemsizing.html","title":"TraceItemSizing","content":"TraceItemSizing \n \nTraceItemSizing.Convert \nConvert \nTraceItemSizing.toString \ntoString \nTraceItemSizing.convert \nconvert \nTraceItemSizing.Trace \nTrace \nTraceItemSizing.Constant \nConstant"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemsizing.html#Convert","title":"TraceItemSizing.Convert","content":"TraceItemSizing.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemsizing.html#toString","title":"TraceItemSizing.toString","content":"TraceItemSizing.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemsizing.html#convert","title":"TraceItemSizing.convert","content":"TraceItemSizing.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemsizing.html#Trace","title":"TraceItemSizing.Trace","content":"TraceItemSizing.Trace \nTrace \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceitemsizing.html#Constant","title":"TraceItemSizing.Constant","content":"TraceItemSizing.Constant \nConstant \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html","title":"TraceOrder","content":"TraceOrder \n \nTraceOrder.Convert \nConvert \nTraceOrder.toString \ntoString \nTraceOrder.convert \nconvert \nTraceOrder.Normal \nNormal \nTraceOrder.Reversed \nReversed \nTraceOrder.Grouped \nGrouped \nTraceOrder.ReversedGrouped \nReversedGrouped"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#Convert","title":"TraceOrder.Convert","content":"TraceOrder.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#toString","title":"TraceOrder.toString","content":"TraceOrder.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#convert","title":"TraceOrder.convert","content":"TraceOrder.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#Normal","title":"TraceOrder.Normal","content":"TraceOrder.Normal \nNormal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#Reversed","title":"TraceOrder.Reversed","content":"TraceOrder.Reversed \nReversed \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#Grouped","title":"TraceOrder.Grouped","content":"TraceOrder.Grouped \nGrouped \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-traceorder.html#ReversedGrouped","title":"TraceOrder.ReversedGrouped","content":"TraceOrder.ReversedGrouped \nReversedGrouped \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html","title":"TransitionEasing","content":"TransitionEasing \n \nTransitionEasing.Convert \nConvert \nTransitionEasing.toString \ntoString \nTransitionEasing.convert \nconvert \nTransitionEasing.Linear \nLinear \nTransitionEasing.Quad \nQuad \nTransitionEasing.Cubic \nCubic \nTransitionEasing.Sin \nSin \nTransitionEasing.Exp \nExp \nTransitionEasing.Circle \nCircle \nTransitionEasing.Elastic \nElastic \nTransitionEasing.Back \nBack \nTransitionEasing.Bounce \nBounce \nTransitionEasing.LinearIn \nLinearIn \nTransitionEasing.QuadIn \nQuadIn \nTransitionEasing.CubicIn \nCubicIn \nTransitionEasing.SinIn \nSinIn \nTransitionEasing.ExpIn \nExpIn \nTransitionEasing.CircleIn \nCircleIn \nTransitionEasing.ElasticIn \nElasticIn \nTransitionEasing.BackIn \nBackIn \nTransitionEasing.BounceIn \nBounceIn \nTransitionEasing.LinearOut \nLinearOut \nTransitionEasing.QuadOut \nQuadOut \nTransitionEasing.CubicOut \nCubicOut \nTransitionEasing.SinOut \nSinOut \nTransitionEasing.ExpOut \nExpOut \nTransitionEasing.CircleOut \nCircleOut \nTransitionEasing.ElasticOut \nElasticOut \nTransitionEasing.BackOut \nBackOut \nTransitionEasing.BounceOut \nBounceOut \nTransitionEasing.LinearInOut \nLinearInOut \nTransitionEasing.QuadInOut \nQuadInOut \nTransitionEasing.CubicInOut \nCubicInOut \nTransitionEasing.SinInOut \nSinInOut \nTransitionEasing.ExpInOut \nExpInOut \nTransitionEasing.CircleInOut \nCircleInOut \nTransitionEasing.ElasticInOut \nElasticInOut \nTransitionEasing.BackInOut \nBackInOut \nTransitionEasing.BounceInOut \nBounceInOut"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Convert","title":"TransitionEasing.Convert","content":"TransitionEasing.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#toString","title":"TransitionEasing.toString","content":"TransitionEasing.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#convert","title":"TransitionEasing.convert","content":"TransitionEasing.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Linear","title":"TransitionEasing.Linear","content":"TransitionEasing.Linear \nLinear \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Quad","title":"TransitionEasing.Quad","content":"TransitionEasing.Quad \nQuad \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Cubic","title":"TransitionEasing.Cubic","content":"TransitionEasing.Cubic \nCubic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Sin","title":"TransitionEasing.Sin","content":"TransitionEasing.Sin \nSin \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Exp","title":"TransitionEasing.Exp","content":"TransitionEasing.Exp \nExp \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Circle","title":"TransitionEasing.Circle","content":"TransitionEasing.Circle \nCircle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Elastic","title":"TransitionEasing.Elastic","content":"TransitionEasing.Elastic \nElastic \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Back","title":"TransitionEasing.Back","content":"TransitionEasing.Back \nBack \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#Bounce","title":"TransitionEasing.Bounce","content":"TransitionEasing.Bounce \nBounce \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#LinearIn","title":"TransitionEasing.LinearIn","content":"TransitionEasing.LinearIn \nLinearIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#QuadIn","title":"TransitionEasing.QuadIn","content":"TransitionEasing.QuadIn \nQuadIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#CubicIn","title":"TransitionEasing.CubicIn","content":"TransitionEasing.CubicIn \nCubicIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#SinIn","title":"TransitionEasing.SinIn","content":"TransitionEasing.SinIn \nSinIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#ExpIn","title":"TransitionEasing.ExpIn","content":"TransitionEasing.ExpIn \nExpIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#CircleIn","title":"TransitionEasing.CircleIn","content":"TransitionEasing.CircleIn \nCircleIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#ElasticIn","title":"TransitionEasing.ElasticIn","content":"TransitionEasing.ElasticIn \nElasticIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#BackIn","title":"TransitionEasing.BackIn","content":"TransitionEasing.BackIn \nBackIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#BounceIn","title":"TransitionEasing.BounceIn","content":"TransitionEasing.BounceIn \nBounceIn \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#LinearOut","title":"TransitionEasing.LinearOut","content":"TransitionEasing.LinearOut \nLinearOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#QuadOut","title":"TransitionEasing.QuadOut","content":"TransitionEasing.QuadOut \nQuadOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#CubicOut","title":"TransitionEasing.CubicOut","content":"TransitionEasing.CubicOut \nCubicOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#SinOut","title":"TransitionEasing.SinOut","content":"TransitionEasing.SinOut \nSinOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#ExpOut","title":"TransitionEasing.ExpOut","content":"TransitionEasing.ExpOut \nExpOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#CircleOut","title":"TransitionEasing.CircleOut","content":"TransitionEasing.CircleOut \nCircleOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#ElasticOut","title":"TransitionEasing.ElasticOut","content":"TransitionEasing.ElasticOut \nElasticOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#BackOut","title":"TransitionEasing.BackOut","content":"TransitionEasing.BackOut \nBackOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#BounceOut","title":"TransitionEasing.BounceOut","content":"TransitionEasing.BounceOut \nBounceOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#LinearInOut","title":"TransitionEasing.LinearInOut","content":"TransitionEasing.LinearInOut \nLinearInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#QuadInOut","title":"TransitionEasing.QuadInOut","content":"TransitionEasing.QuadInOut \nQuadInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#CubicInOut","title":"TransitionEasing.CubicInOut","content":"TransitionEasing.CubicInOut \nCubicInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#SinInOut","title":"TransitionEasing.SinInOut","content":"TransitionEasing.SinInOut \nSinInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#ExpInOut","title":"TransitionEasing.ExpInOut","content":"TransitionEasing.ExpInOut \nExpInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#CircleInOut","title":"TransitionEasing.CircleInOut","content":"TransitionEasing.CircleInOut \nCircleInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#ElasticInOut","title":"TransitionEasing.ElasticInOut","content":"TransitionEasing.ElasticInOut \nElasticInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#BackInOut","title":"TransitionEasing.BackInOut","content":"TransitionEasing.BackInOut \nBackInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitioneasing.html#BounceInOut","title":"TransitionEasing.BounceInOut","content":"TransitionEasing.BounceInOut \nBounceInOut \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitionordering.html","title":"TransitionOrdering","content":"TransitionOrdering \n \nTransitionOrdering.Convert \nConvert \nTransitionOrdering.toString \ntoString \nTransitionOrdering.convert \nconvert \nTransitionOrdering.LayoutFirst \nLayoutFirst \nTransitionOrdering.TracesFirst \nTracesFirst"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitionordering.html#Convert","title":"TransitionOrdering.Convert","content":"TransitionOrdering.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitionordering.html#toString","title":"TransitionOrdering.toString","content":"TransitionOrdering.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitionordering.html#convert","title":"TransitionOrdering.convert","content":"TransitionOrdering.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitionordering.html#LayoutFirst","title":"TransitionOrdering.LayoutFirst","content":"TransitionOrdering.LayoutFirst \nLayoutFirst \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-transitionordering.html#TracesFirst","title":"TransitionOrdering.TracesFirst","content":"TransitionOrdering.TracesFirst \nTracesFirst \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html","title":"TreemapTilingPacking","content":"TreemapTilingPacking \n \nTreemapTilingPacking.Convert \nConvert \nTreemapTilingPacking.toString \ntoString \nTreemapTilingPacking.convert \nconvert \nTreemapTilingPacking.Squarify \nSquarify \nTreemapTilingPacking.Binary \nBinary \nTreemapTilingPacking.Dice \nDice \nTreemapTilingPacking.Slice \nSlice \nTreemapTilingPacking.SliceDice \nSliceDice"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#Convert","title":"TreemapTilingPacking.Convert","content":"TreemapTilingPacking.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#toString","title":"TreemapTilingPacking.toString","content":"TreemapTilingPacking.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#convert","title":"TreemapTilingPacking.convert","content":"TreemapTilingPacking.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#Squarify","title":"TreemapTilingPacking.Squarify","content":"TreemapTilingPacking.Squarify \nSquarify \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#Binary","title":"TreemapTilingPacking.Binary","content":"TreemapTilingPacking.Binary \nBinary \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#Dice","title":"TreemapTilingPacking.Dice","content":"TreemapTilingPacking.Dice \nDice \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#Slice","title":"TreemapTilingPacking.Slice","content":"TreemapTilingPacking.Slice \nSlice \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-treemaptilingpacking.html#SliceDice","title":"TreemapTilingPacking.SliceDice","content":"TreemapTilingPacking.SliceDice \nSliceDice \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-triangulationalgorithm.html","title":"TriangulationAlgorithm","content":"TriangulationAlgorithm \n \nTriangulationAlgorithm.Convert \nConvert \nTriangulationAlgorithm.convert \nconvert \nTriangulationAlgorithm.Delaunay \nDelaunay \nTriangulationAlgorithm.ConvexHull \nConvexHull \nTriangulationAlgorithm.AlphaShape \nAlphaShape"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-triangulationalgorithm.html#Convert","title":"TriangulationAlgorithm.Convert","content":"TriangulationAlgorithm.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-triangulationalgorithm.html#convert","title":"TriangulationAlgorithm.convert","content":"TriangulationAlgorithm.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-triangulationalgorithm.html#Delaunay","title":"TriangulationAlgorithm.Delaunay","content":"TriangulationAlgorithm.Delaunay \nDelaunay \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-triangulationalgorithm.html#ConvexHull","title":"TriangulationAlgorithm.ConvexHull","content":"TriangulationAlgorithm.ConvexHull \nConvexHull \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-triangulationalgorithm.html#AlphaShape","title":"TriangulationAlgorithm.AlphaShape","content":"TriangulationAlgorithm.AlphaShape \nAlphaShape \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-uniformtextmode.html","title":"UniformTextMode","content":"UniformTextMode \n \nUniformTextMode.Convert \nConvert \nUniformTextMode.convert \nconvert \nUniformTextMode.Hide \nHide \nUniformTextMode.False \nFalse \nUniformTextMode.Show \nShow"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-uniformtextmode.html#Convert","title":"UniformTextMode.Convert","content":"UniformTextMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-uniformtextmode.html#convert","title":"UniformTextMode.convert","content":"UniformTextMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-uniformtextmode.html#Hide","title":"UniformTextMode.Hide","content":"UniformTextMode.Hide \nHide \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-uniformtextmode.html#False","title":"UniformTextMode.False","content":"UniformTextMode.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-uniformtextmode.html#Show","title":"UniformTextMode.Show","content":"UniformTextMode.Show \nShow \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-unitmode.html","title":"UnitMode","content":"UnitMode \n \nUnitMode.Convert \nConvert \nUnitMode.toString \ntoString \nUnitMode.convert \nconvert \nUnitMode.Fraction \nFraction \nUnitMode.Pixels \nPixels"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-unitmode.html#Convert","title":"UnitMode.Convert","content":"UnitMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-unitmode.html#toString","title":"UnitMode.toString","content":"UnitMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-unitmode.html#convert","title":"UnitMode.convert","content":"UnitMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-unitmode.html#Fraction","title":"UnitMode.Fraction","content":"UnitMode.Fraction \nFraction \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-unitmode.html#Pixels","title":"UnitMode.Pixels","content":"UnitMode.Pixels \nPixels \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemenudirection.html","title":"UpdateMenuDirection","content":"UpdateMenuDirection \n \nUpdateMenuDirection.Convert \nConvert \nUpdateMenuDirection.toString \ntoString \nUpdateMenuDirection.convert \nconvert \nUpdateMenuDirection.Left \nLeft \nUpdateMenuDirection.Right \nRight \nUpdateMenuDirection.Up \nUp \nUpdateMenuDirection.Down \nDown"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemenudirection.html#Convert","title":"UpdateMenuDirection.Convert","content":"UpdateMenuDirection.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemenudirection.html#toString","title":"UpdateMenuDirection.toString","content":"UpdateMenuDirection.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemenudirection.html#convert","title":"UpdateMenuDirection.convert","content":"UpdateMenuDirection.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemenudirection.html#Left","title":"UpdateMenuDirection.Left","content":"UpdateMenuDirection.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemenudirection.html#Right","title":"UpdateMenuDirection.Right","content":"UpdateMenuDirection.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemenudirection.html#Up","title":"UpdateMenuDirection.Up","content":"UpdateMenuDirection.Up \nUp \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemenudirection.html#Down","title":"UpdateMenuDirection.Down","content":"UpdateMenuDirection.Down \nDown \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemenutype.html","title":"UpdateMenuType","content":"UpdateMenuType \n \nUpdateMenuType.Convert \nConvert \nUpdateMenuType.toString \ntoString \nUpdateMenuType.convert \nconvert \nUpdateMenuType.Dropdown \nDropdown \nUpdateMenuType.Buttons \nButtons"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemenutype.html#Convert","title":"UpdateMenuType.Convert","content":"UpdateMenuType.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemenutype.html#toString","title":"UpdateMenuType.toString","content":"UpdateMenuType.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemenutype.html#convert","title":"UpdateMenuType.convert","content":"UpdateMenuType.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemenutype.html#Dropdown","title":"UpdateMenuType.Dropdown","content":"UpdateMenuType.Dropdown \nDropdown \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemenutype.html#Buttons","title":"UpdateMenuType.Buttons","content":"UpdateMenuType.Buttons \nButtons \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemethod.html","title":"UpdateMethod","content":"UpdateMethod \n \nUpdateMethod.Convert \nConvert \nUpdateMethod.toString \ntoString \nUpdateMethod.convert \nconvert \nUpdateMethod.Restyle \nRestyle \nUpdateMethod.Relayout \nRelayout \nUpdateMethod.Animate \nAnimate \nUpdateMethod.Update \nUpdate \nUpdateMethod.Skip \nSkip"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemethod.html#Convert","title":"UpdateMethod.Convert","content":"UpdateMethod.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemethod.html#toString","title":"UpdateMethod.toString","content":"UpdateMethod.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemethod.html#convert","title":"UpdateMethod.convert","content":"UpdateMethod.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemethod.html#Restyle","title":"UpdateMethod.Restyle","content":"UpdateMethod.Restyle \nRestyle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemethod.html#Relayout","title":"UpdateMethod.Relayout","content":"UpdateMethod.Relayout \nRelayout \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemethod.html#Animate","title":"UpdateMethod.Animate","content":"UpdateMethod.Animate \nAnimate \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemethod.html#Update","title":"UpdateMethod.Update","content":"UpdateMethod.Update \nUpdate \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-updatemethod.html#Skip","title":"UpdateMethod.Skip","content":"UpdateMethod.Skip \nSkip \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html","title":"VerticalAlign","content":"VerticalAlign \n \nVerticalAlign.Convert \nConvert \nVerticalAlign.toString \ntoString \nVerticalAlign.convert \nconvert \nVerticalAlign.Top \nTop \nVerticalAlign.Middle \nMiddle \nVerticalAlign.Bottom \nBottom"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html#Convert","title":"VerticalAlign.Convert","content":"VerticalAlign.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html#toString","title":"VerticalAlign.toString","content":"VerticalAlign.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html#convert","title":"VerticalAlign.convert","content":"VerticalAlign.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html#Top","title":"VerticalAlign.Top","content":"VerticalAlign.Top \nTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html#Middle","title":"VerticalAlign.Middle","content":"VerticalAlign.Middle \nMiddle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-verticalalign.html#Bottom","title":"VerticalAlign.Bottom","content":"VerticalAlign.Bottom \nBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinmode.html","title":"ViolinMode","content":"ViolinMode \n \nViolinMode.Convert \nConvert \nViolinMode.toString \ntoString \nViolinMode.convert \nconvert \nViolinMode.Group \nGroup \nViolinMode.Overlay \nOverlay"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinmode.html#Convert","title":"ViolinMode.Convert","content":"ViolinMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinmode.html#toString","title":"ViolinMode.toString","content":"ViolinMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinmode.html#convert","title":"ViolinMode.convert","content":"ViolinMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinmode.html#Group","title":"ViolinMode.Group","content":"ViolinMode.Group \nGroup \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinmode.html#Overlay","title":"ViolinMode.Overlay","content":"ViolinMode.Overlay \nOverlay \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinside.html","title":"ViolinSide","content":"ViolinSide \n \nViolinSide.Convert \nConvert \nViolinSide.toString \ntoString \nViolinSide.convert \nconvert \nViolinSide.Both \nBoth \nViolinSide.Positive \nPositive \nViolinSide.Negative \nNegative"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinside.html#Convert","title":"ViolinSide.Convert","content":"ViolinSide.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinside.html#toString","title":"ViolinSide.toString","content":"ViolinSide.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinside.html#convert","title":"ViolinSide.convert","content":"ViolinSide.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinside.html#Both","title":"ViolinSide.Both","content":"ViolinSide.Both \nBoth \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinside.html#Positive","title":"ViolinSide.Positive","content":"ViolinSide.Positive \nPositive \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-violinside.html#Negative","title":"ViolinSide.Negative","content":"ViolinSide.Negative \nNegative \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html","title":"Visible","content":"Visible \n\n Determines whether or not this trace is visible. If \u0022legendonly\u0022, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).\n \nVisible.Convert \nConvert \nVisible.convert \nconvert \nVisible.True \nTrue \nVisible.False \nFalse \nVisible.LegendOnly \nLegendOnly"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html#Convert","title":"Visible.Convert","content":"Visible.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html#convert","title":"Visible.convert","content":"Visible.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html#True","title":"Visible.True","content":"Visible.True \nTrue \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html#False","title":"Visible.False","content":"Visible.False \nFalse \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-visible.html#LegendOnly","title":"Visible.LegendOnly","content":"Visible.LegendOnly \nLegendOnly \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html","title":"WaterfallMeasure","content":"WaterfallMeasure \n\nHow to compute differences between bars in Waterfall Charts\n \nWaterfallMeasure.Convert \nConvert \nWaterfallMeasure.toString \ntoString \nWaterfallMeasure.convert \nconvert \nWaterfallMeasure.Relative \nRelative \nWaterfallMeasure.Total \nTotal \nWaterfallMeasure.Absolute \nAbsolute"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html#Convert","title":"WaterfallMeasure.Convert","content":"WaterfallMeasure.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html#toString","title":"WaterfallMeasure.toString","content":"WaterfallMeasure.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html#convert","title":"WaterfallMeasure.convert","content":"WaterfallMeasure.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html#Relative","title":"WaterfallMeasure.Relative","content":"WaterfallMeasure.Relative \nRelative \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html#Total","title":"WaterfallMeasure.Total","content":"WaterfallMeasure.Total \nTotal \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmeasure.html#Absolute","title":"WaterfallMeasure.Absolute","content":"WaterfallMeasure.Absolute \nAbsolute \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmode.html","title":"WaterfallMode","content":"WaterfallMode \n \nWaterfallMode.Convert \nConvert \nWaterfallMode.toString \ntoString \nWaterfallMode.convert \nconvert \nWaterfallMode.Group \nGroup \nWaterfallMode.Overlay \nOverlay"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmode.html#Convert","title":"WaterfallMode.Convert","content":"WaterfallMode.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmode.html#toString","title":"WaterfallMode.toString","content":"WaterfallMode.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmode.html#convert","title":"WaterfallMode.convert","content":"WaterfallMode.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmode.html#Group","title":"WaterfallMode.Group","content":"WaterfallMode.Group \nGroup \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-waterfallmode.html#Overlay","title":"WaterfallMode.Overlay","content":"WaterfallMode.Overlay \nOverlay \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-xanchorposition.html","title":"XAnchorPosition","content":"XAnchorPosition \n \nXAnchorPosition.Convert \nConvert \nXAnchorPosition.toString \ntoString \nXAnchorPosition.convert \nconvert \nXAnchorPosition.Auto \nAuto \nXAnchorPosition.Left \nLeft \nXAnchorPosition.Center \nCenter \nXAnchorPosition.Right \nRight"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-xanchorposition.html#Convert","title":"XAnchorPosition.Convert","content":"XAnchorPosition.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-xanchorposition.html#toString","title":"XAnchorPosition.toString","content":"XAnchorPosition.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-xanchorposition.html#convert","title":"XAnchorPosition.convert","content":"XAnchorPosition.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-xanchorposition.html#Auto","title":"XAnchorPosition.Auto","content":"XAnchorPosition.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-xanchorposition.html#Left","title":"XAnchorPosition.Left","content":"XAnchorPosition.Left \nLeft \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-xanchorposition.html#Center","title":"XAnchorPosition.Center","content":"XAnchorPosition.Center \nCenter \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-xanchorposition.html#Right","title":"XAnchorPosition.Right","content":"XAnchorPosition.Right \nRight \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-yanchorposition.html","title":"YAnchorPosition","content":"YAnchorPosition \n \nYAnchorPosition.Convert \nConvert \nYAnchorPosition.toString \ntoString \nYAnchorPosition.convert \nconvert \nYAnchorPosition.Auto \nAuto \nYAnchorPosition.Top \nTop \nYAnchorPosition.Middle \nMiddle \nYAnchorPosition.Bottom \nBottom"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-yanchorposition.html#Convert","title":"YAnchorPosition.Convert","content":"YAnchorPosition.Convert \nConvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-yanchorposition.html#toString","title":"YAnchorPosition.toString","content":"YAnchorPosition.toString \ntoString \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-yanchorposition.html#convert","title":"YAnchorPosition.convert","content":"YAnchorPosition.convert \nconvert \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-yanchorposition.html#Auto","title":"YAnchorPosition.Auto","content":"YAnchorPosition.Auto \nAuto \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-yanchorposition.html#Top","title":"YAnchorPosition.Top","content":"YAnchorPosition.Top \nTop \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-yanchorposition.html#Middle","title":"YAnchorPosition.Middle","content":"YAnchorPosition.Middle \nMiddle \n"},{"uri":"https://plotly.net/reference/plotly-net-styleparam-yanchorposition.html#Bottom","title":"YAnchorPosition.Bottom","content":"YAnchorPosition.Bottom \nBottom \n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html","title":"ARGB","content":"ARGB \n\n Represents an ARGB (alpha, red, green, blue) color\n \nARGB.create \ncreate \nARGB.fromHex \nfromHex \nARGB.fromKeyword \nfromKeyword \nARGB.fromRGB \nfromRGB \nARGB.fromWebHex \nfromWebHex \nARGB.toHex \ntoHex \nARGB.toString \ntoString \nARGB.toWebHex \ntoWebHex \nARGB.A \nA \nARGB.R \nR \nARGB.G \nG \nARGB.B \nB"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#create","title":"ARGB.create","content":"ARGB.create \ncreate \n\n Creates a Argb Color from the four ARGB component (alpha, red, green, and blue) values.\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#fromHex","title":"ARGB.fromHex","content":"ARGB.fromHex \nfromHex \n\n Gets color from hex representataion (FFFFFF) or (0xFFFFFF)\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#fromKeyword","title":"ARGB.fromKeyword","content":"ARGB.fromKeyword \nfromKeyword \n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#fromRGB","title":"ARGB.fromRGB","content":"ARGB.fromRGB \nfromRGB \n\n Creates a Argb color from the specified color values (red, green, and blue).\n The alpha value is implicitly 255 (fully opaque).\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#fromWebHex","title":"ARGB.fromWebHex","content":"ARGB.fromWebHex \nfromWebHex \n\n Gets color from web color (#FFFFFF)\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#toHex","title":"ARGB.toHex","content":"ARGB.toHex \ntoHex \n\n Gets the hex representataion (FFFFFF) of a color (with valid prefix \u00220xFFFFFF\u0022)\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#toString","title":"ARGB.toString","content":"ARGB.toString \ntoString \n\n Converts this Color structure to a human-readable string.\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#toWebHex","title":"ARGB.toWebHex","content":"ARGB.toWebHex \ntoWebHex \n\n Gets the web color representataion (#FFFFFF)\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#A","title":"ARGB.A","content":"ARGB.A \nA \n\n The alpha component value of this Color structure.\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#R","title":"ARGB.R","content":"ARGB.R \nR \n\n The red component value of this Color structure.\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#G","title":"ARGB.G","content":"ARGB.G \nG \n\n The green component value of this Color structure.\n"},{"uri":"https://plotly.net/reference/plotly-net-argb.html#B","title":"ARGB.B","content":"ARGB.B \nB \n\n The blue component value of this Color structure.\n"},{"uri":"https://plotly.net/reference/plotly-net-argbconverter.html","title":"ARGBConverter","content":"ARGBConverter \n \nARGBConverter.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"https://plotly.net/reference/plotly-net-argbconverter.html#\u0060\u0060.ctor\u0060\u0060","title":"ARGBConverter.\u0060\u0060.ctor\u0060\u0060","content":"ARGBConverter.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html","title":"Chart","content":"Chart \n\n Provides a set of static methods for creating and styling charts.\n \nChart.Grid \nGrid \nChart.Grid \nGrid \nChart.Invisible \nInvisible \nChart.SingleStack \nSingleStack \nChart.combine \ncombine \nChart.saveHtml \nsaveHtml \nChart.setAAxis \nsetAAxis \nChart.setAngularAxis \nsetAngularAxis \nChart.setAxis \nsetAxis \nChart.setBAxis \nsetBAxis \nChart.setCAxis \nsetCAxis \nChart.setColorBar \nsetColorBar \nChart.setConfig \nsetConfig \nChart.setDisplayOptions \nsetDisplayOptions \nChart.setGeo \nsetGeo \nChart.setImaginaryAxis \nsetImaginaryAxis \nChart.setLayout \nsetLayout \nChart.setLayoutGrid \nsetLayoutGrid \nChart.setLegend \nsetLegend \nChart.setLine \nsetLine \nChart.setMapbox \nsetMapbox \nChart.setMarker \nsetMarker \nChart.setPolar \nsetPolar \nChart.setRadialAxis \nsetRadialAxis \nChart.setRealAxis \nsetRealAxis \nChart.setScene \nsetScene \nChart.setSmith \nsetSmith \nChart.setTernary \nsetTernary \nChart.setXError \nsetXError \nChart.setYError \nsetYError \nChart.setZError \nsetZError \nChart.show \nshow \nChart.withAAxis \nwithAAxis \nChart.withAdditionalHeadTags \nwithAdditionalHeadTags \nChart.withAngularAxis \nwithAngularAxis \nChart.withAnnotation \nwithAnnotation \nChart.withAnnotations \nwithAnnotations \nChart.withAxisAnchor \nwithAxisAnchor \nChart.withBAxis \nwithBAxis \nChart.withCAxis \nwithCAxis \nChart.withColorAxis \nwithColorAxis \nChart.withColorAxisAnchor \nwithColorAxisAnchor \nChart.withColorBar \nwithColorBar \nChart.withColorBarStyle \nwithColorBarStyle \nChart.withConfig \nwithConfig \nChart.withConfigStyle \nwithConfigStyle \nChart.withDescription \nwithDescription \nChart.withDisplayOptions \nwithDisplayOptions \nChart.withDisplayOptionsStyle \nwithDisplayOptionsStyle \nChart.withGeo \nwithGeo \nChart.withGeoProjection \nwithGeoProjection \nChart.withGeoStyle \nwithGeoStyle \nChart.withHeadTags \nwithHeadTags \nChart.withImaginaryAxis \nwithImaginaryAxis \nChart.withLayout \nwithLayout \nChart.withLayoutGrid \nwithLayoutGrid \nChart.withLayoutGridStyle \nwithLayoutGridStyle \nChart.withLayoutImage \nwithLayoutImage \nChart.withLayoutImages \nwithLayoutImages \nChart.withLayoutStyle \nwithLayoutStyle \nChart.withLegend \nwithLegend \nChart.withLegend \nwithLegend \nChart.withLegendStyle \nwithLegendStyle \nChart.withLine \nwithLine \nChart.withLineStyle \nwithLineStyle \nChart.withMapbox \nwithMapbox \nChart.withMapboxStyle \nwithMapboxStyle \nChart.withMargin \nwithMargin \nChart.withMarginSize \nwithMarginSize \nChart.withMarker \nwithMarker \nChart.withMarkerStyle \nwithMarkerStyle \nChart.withMathTex \nwithMathTex \nChart.withPolar \nwithPolar \nChart.withPolarStyle \nwithPolarStyle \nChart.withRadialAxis \nwithRadialAxis \nChart.withRealAxis \nwithRealAxis \nChart.withScene \nwithScene \nChart.withSceneStyle \nwithSceneStyle \nChart.withSelection \nwithSelection \nChart.withSelections \nwithSelections \nChart.withShape \nwithShape \nChart.withShapes \nwithShapes \nChart.withSize \nwithSize \nChart.withSize \nwithSize \nChart.withSlider \nwithSlider \nChart.withSliders \nwithSliders \nChart.withSmith \nwithSmith \nChart.withSmithStyle \nwithSmithStyle \nChart.withTemplate \nwithTemplate \nChart.withTernary \nwithTernary \nChart.withTernaryStyle \nwithTernaryStyle \nChart.withTitle \nwithTitle \nChart.withTitle \nwithTitle \nChart.withTraceInfo \nwithTraceInfo \nChart.withUpdateMenu \nwithUpdateMenu \nChart.withUpdateMenus \nwithUpdateMenus \nChart.withXAxis \nwithXAxis \nChart.withXAxisRangeSlider \nwithXAxisRangeSlider \nChart.withXAxisStyle \nwithXAxisStyle \nChart.withXError \nwithXError \nChart.withXErrorStyle \nwithXErrorStyle \nChart.withX_AxisRangeSlider \nwithX_AxisRangeSlider \nChart.withYAxis \nwithYAxis \nChart.withYAxisStyle \nwithYAxisStyle \nChart.withYError \nwithYError \nChart.withYErrorStyle \nwithYErrorStyle \nChart.withZAxis \nwithZAxis \nChart.withZAxisStyle \nwithZAxisStyle \nChart.withZError \nwithZError \nChart.withZErrorStyle \nwithZErrorStyle"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Grid","title":"Chart.Grid","content":"Chart.Grid \nGrid \n\n Creates a subplot grid with the the dimensions of the input 2D sequence containing the charts to render in the respective cells.\n\n ATTENTION: when the individual rows do not have the same amount of charts, they will be filled with dummy charts TO THE RIGHT.\n\n prevent this behaviour by using Chart.Invisible at the cells that should be empty.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Grid","title":"Chart.Grid","content":"Chart.Grid \nGrid \n\n Creates a subplot grid with the given dimensions (nRows x nCols) for the input charts.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#Invisible","title":"Chart.Invisible","content":"Chart.Invisible \nInvisible \nCreates a chart that is completely invisible when rendered. The Chart object however is NOT empty! Combining this chart with other charts will have unforseen consequences (it has for example invisible axes that can override other axes if used in Chart.Combine)"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#SingleStack","title":"Chart.SingleStack","content":"Chart.SingleStack \nSingleStack \n\n Creates a chart stack (a subplot grid with one column) from the input charts.\n \u003C/summary\u003E\n \u003Cparam name =\u0022SubPlots\u0022\u003EUsed for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like \u0022xy\u0022 or \u0022x3y2\u0022, or \u0022\u0022 to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support \u0060domain\u0060 can place themselves in this grid separately using the \u0060gridcell\u0060 attribute.\u003C/param\u003E\n \u003Cparam name =\u0022XAxes\u0022\u003EUsed with \u0060yaxes\u0060 when the x and y axes are shared across columns and rows. Each entry should be an y axis id like \u0022y\u0022, \u0022y2\u0022, etc., or \u0022\u0022 to not put a y axis in that row. Entries other than \u0022\u0022 must be unique. Ignored if \u0060subplots\u0060 is present. If missing but \u0060xaxes\u0060 is present, will generate consecutive IDs.\u003C/param\u003E\n \u003Cparam name =\u0022YAxes\u0022\u003EUsed with \u0060yaxes\u0060 when the x and y axes are shared across columns and rows. Each entry should be an x axis id like \u0022x\u0022, \u0022x2\u0022, etc., or \u0022\u0022 to not put an x axis in that column. Entries other than \u0022\u0022 must be unique. Ignored if \u0060subplots\u0060 is present. If missing but \u0060yaxes\u0060 is present, will generate consecutive IDs.\u003C/param\u003E\n \u003Cparam name =\u0022RowOrder\u0022\u003EIs the first row the top or the bottom? Note that columns are always enumerated from left to right.\u003C/param\u003E\n \u003Cparam name =\u0022Pattern\u0022\u003EIf no \u0060subplots\u0060, \u0060xaxes\u0060, or \u0060yaxes\u0060 are given but we do have \u0060rows\u0060 and \u0060columns\u0060, we can generate defaults using consecutive axis IDs, in two ways: \u0022coupled\u0022 gives one x axis per column and one y axis per row. \u0022independent\u0022 uses a new xy pair for each cell, left-to-right across each row then iterating rows according to \u0060roworder\u0060.\u003C/param\u003E\n \u003Cparam name =\u0022XGap\u0022\u003EHorizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.\u003C/param\u003E\n \u003Cparam name =\u0022YGap\u0022\u003EVertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.\u003C/param\u003E\n \u003Cparam name =\u0022Domain\u0022\u003ESets the domains of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.\u003C/param\u003E\n \u003Cparam name =\u0022XSide\u0022\u003ESets where the x axis labels and titles go. \u0022bottom\u0022 means the very bottom of the grid. \u0022bottom plot\u0022 is the lowest plot that each x axis is used in. \u0022top\u0022 and \u0022top plot\u0022 are similar.\u003C/param\u003E\n \u003Cparam name =\u0022YSide\u0022\u003ESets where the y axis labels and titles go. \u0022left\u0022 means the very left edge of the grid. \u0022left plot\u0022 is the leftmost plot that each y axis is used in. \u0022right\u0022 and \u0022right plot\u0022 are similar.\u003C/param\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#combine","title":"Chart.combine","content":"Chart.combine \ncombine \n\n Create a combined chart with the given charts merged\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#saveHtml","title":"Chart.saveHtml","content":"Chart.saveHtml \nsaveHtml \n\n Saves the given Chart as html file at the given path (.html file extension is added if not present).\n Optionally opens the generated file in the browser.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setAAxis","title":"Chart.setAAxis","content":"Chart.setAAxis \nsetAAxis \n\n Sets the a axis on the ternary object with the given id on the input chart\u0027s layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setAngularAxis","title":"Chart.setAngularAxis","content":"Chart.setAngularAxis \nsetAngularAxis \n\n Sets the angular axis on the polar object with the given id on the input chart\u0027s layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setAxis","title":"Chart.setAxis","content":"Chart.setAxis \nsetAxis \n\n Sets the given axis with the given id on the input chart\u0027s layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setBAxis","title":"Chart.setBAxis","content":"Chart.setBAxis \nsetBAxis \n\n Sets the b axis on the ternary object with the given id on the input chart\u0027s layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setCAxis","title":"Chart.setCAxis","content":"Chart.setCAxis \nsetCAxis \n\n Sets the c axis on the ternary object with the given id on the input chart\u0027s layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setColorBar","title":"Chart.setColorBar","content":"Chart.setColorBar \nsetColorBar \n\n Sets the ColorBar for the chart\u0027s trace(s).\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setConfig","title":"Chart.setConfig","content":"Chart.setConfig \nsetConfig \n\n Sets the given config on the input chart.\n\n If there is already a config set, the object is replaced.\n \u003C/summary\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setDisplayOptions","title":"Chart.setDisplayOptions","content":"Chart.setDisplayOptions \nsetDisplayOptions \n\n Sets the given DisplayOptions on the input chart.\n\n If there is already an DisplayOptions set, the object is replaced.\n \u003C/summary\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setGeo","title":"Chart.setGeo","content":"Chart.setGeo \nsetGeo \n\n Sets the given Geo object with the given id on the input chart\u0027s layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setImaginaryAxis","title":"Chart.setImaginaryAxis","content":"Chart.setImaginaryAxis \nsetImaginaryAxis \n\n Sets the imaginary Axis on the polar object with the given id on the input chart\u0027s layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setLayout","title":"Chart.setLayout","content":"Chart.setLayout \nsetLayout \n\n Sets the given layout on the input chart.\n\n If there is already an layout set, the object is replaced.\n \u003C/summary\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setLayoutGrid","title":"Chart.setLayoutGrid","content":"Chart.setLayoutGrid \nsetLayoutGrid \n\n Sets the LayoutGrid for the chart\u0027s layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setLegend","title":"Chart.setLegend","content":"Chart.setLegend \nsetLegend \n\n Sets the Legend for the chart\u0027s layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setLine","title":"Chart.setLine","content":"Chart.setLine \nsetLine \n\n Sets the line for the chart\u0027s trace(s).\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setMapbox","title":"Chart.setMapbox","content":"Chart.setMapbox \nsetMapbox \n\n Sets the given Mapbox object with the given id on the input chart\u0027s layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setMarker","title":"Chart.setMarker","content":"Chart.setMarker \nsetMarker \n\n Sets the marker for the chart\u0027s trace(s).\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setPolar","title":"Chart.setPolar","content":"Chart.setPolar \nsetPolar \n\n Sets the given Polar object with the given id on the input chart\u0027s layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setRadialAxis","title":"Chart.setRadialAxis","content":"Chart.setRadialAxis \nsetRadialAxis \n\n Sets the RadialAxis on the polar object with the given id on the input chart\u0027s layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setRealAxis","title":"Chart.setRealAxis","content":"Chart.setRealAxis \nsetRealAxis \n\n Sets the RealAxis on the smith object with the given id on the input chart\u0027s layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setScene","title":"Chart.setScene","content":"Chart.setScene \nsetScene \n\n Sets the given Scene object with the given id on the input chart\u0027s layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setSmith","title":"Chart.setSmith","content":"Chart.setSmith \nsetSmith \n\n Sets the given Smith object with the given id on the input chart\u0027s layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setTernary","title":"Chart.setTernary","content":"Chart.setTernary \nsetTernary \n\n Sets the given Ternary object with the given id on the input chart\u0027s layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setXError","title":"Chart.setXError","content":"Chart.setXError \nsetXError \n\n Sets the error for the x dimension for the chart\u0027s trace(s).\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setYError","title":"Chart.setYError","content":"Chart.setYError \nsetYError \n\n Sets the error for the y dimension for the chart\u0027s trace(s).\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#setZError","title":"Chart.setZError","content":"Chart.setZError \nsetZError \n\n Sets the error for the z dimension for the chart\u0027s trace(s).\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#show","title":"Chart.show","content":"Chart.show \nshow \n\n Saves the given chart as a temporary html file and opens it in the browser.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withAAxis","title":"Chart.withAAxis","content":"Chart.withAAxis \nwithAAxis \n\n Sets the a axis on the ternary object with the given id on the input chart\u0027s layout.\n\n If there is already a a axis set on the ternary object, the a axis objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withAdditionalHeadTags","title":"Chart.withAdditionalHeadTags","content":"Chart.withAdditionalHeadTags \nwithAdditionalHeadTags \n\n Adds the given additional html tags on the chart\u0027s DisplayOptions. They will be included in the document\u0027s head\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withAngularAxis","title":"Chart.withAngularAxis","content":"Chart.withAngularAxis \nwithAngularAxis \n\n Sets the AngularAxis on the polar object with the given id on the input chart\u0027s layout.\n\n If there is already a AngularAxis set on the polar object, the AngularAxis objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withAnnotation","title":"Chart.withAnnotation","content":"Chart.withAnnotation \nwithAnnotation \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withAnnotations","title":"Chart.withAnnotations","content":"Chart.withAnnotations \nwithAnnotations \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withAxisAnchor","title":"Chart.withAxisAnchor","content":"Chart.withAxisAnchor \nwithAxisAnchor \n\n Sets the axis anchor ids for the chart\u0027s cartesian and/or carpet trace(s).\n\n If the traces are not of these types, nothing will be set and a warning message will be displayed.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withBAxis","title":"Chart.withBAxis","content":"Chart.withBAxis \nwithBAxis \n\n Sets the b axis on the ternary object with the given id on the input chart\u0027s layout.\n\n If there is already a b axis set on the ternary object, the b axis objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withCAxis","title":"Chart.withCAxis","content":"Chart.withCAxis \nwithCAxis \n\n Sets the c axis on the ternary object with the given id on the input chart\u0027s layout.\n\n If there is already a c axis set on the ternary object, the c axis objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withColorAxis","title":"Chart.withColorAxis","content":"Chart.withColorAxis \nwithColorAxis \n\n Sets the color axis with the given id on the chart layout\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withColorAxisAnchor","title":"Chart.withColorAxisAnchor","content":"Chart.withColorAxisAnchor \nwithColorAxisAnchor \n\n Sets the color axis id for the chart\u0027s trace(s).\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withColorBar","title":"Chart.withColorBar","content":"Chart.withColorBar \nwithColorBar \n\n Sets the ColorBar for the chart\u0027s trace(s).\n\n If there is already a ColorBar set, the objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withColorBarStyle","title":"Chart.withColorBarStyle","content":"Chart.withColorBarStyle \nwithColorBarStyle \n\n Applies the given styles to the ColorBar object(s) of the chart\u0027s trace(s). Overwrites attributes with the same name that are already set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withConfig","title":"Chart.withConfig","content":"Chart.withConfig \nwithConfig \n\n Sets the given config on the input chart.\n\n If there is already a config set, the objects are combined.\n \u003C/summary\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withConfigStyle","title":"Chart.withConfigStyle","content":"Chart.withConfigStyle \nwithConfigStyle \n\n Applies the given styles to the chart\u0027s Config object. Overwrites attributes with the same name that are already set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withDescription","title":"Chart.withDescription","content":"Chart.withDescription \nwithDescription \n\n Show chart in browser\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withDisplayOptions","title":"Chart.withDisplayOptions","content":"Chart.withDisplayOptions \nwithDisplayOptions \n\n Sets the given DisplayOptions on the input chart.\n\n If there is already an DisplayOptions set, the objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withDisplayOptionsStyle","title":"Chart.withDisplayOptionsStyle","content":"Chart.withDisplayOptionsStyle \nwithDisplayOptionsStyle \n\n Applies the given styles to the chart\u0027s DisplayOptions object. Overwrites attributes with the same name that are already set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withGeo","title":"Chart.withGeo","content":"Chart.withGeo \nwithGeo \n\n Sets the Geo for the chart\u0027s layout\n\n If there is already a Geo set, the objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withGeoProjection","title":"Chart.withGeoProjection","content":"Chart.withGeoProjection \nwithGeoProjection \n\n Sets the given Geo Projection styles on the target geo on the input chart\u0027s layout.\n\n If there is already a Geo set, the styles are applied to it. If there is no Geo present, a new Geo object with the given styles will be set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withGeoStyle","title":"Chart.withGeoStyle","content":"Chart.withGeoStyle \nwithGeoStyle \n\n Sets the given Geo styles on the target geo on the input chart\u0027s layout.\n\n If there is already a Geo set, the styles are applied to it. If there is no Geo present, a new Geo object with the given styles will be set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withHeadTags","title":"Chart.withHeadTags","content":"Chart.withHeadTags \nwithHeadTags \n\n Sets the given additional head tags on the chart\u0027s DisplayOptions. They will be included in the document\u0027s head\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withImaginaryAxis","title":"Chart.withImaginaryAxis","content":"Chart.withImaginaryAxis \nwithImaginaryAxis \n\n Sets the ImaginaryAxis on the smith object with the given id on the input chart\u0027s layout.\n\n If there is already a ImaginaryAxis set on the smith object, the ImaginaryAxis objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLayout","title":"Chart.withLayout","content":"Chart.withLayout \nwithLayout \n\n Sets the given layout on the input chart.\n\n If there is already an layout set, the objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLayoutGrid","title":"Chart.withLayoutGrid","content":"Chart.withLayoutGrid \nwithLayoutGrid \n\n Sets the LayoutGrid for the chart\u0027s layout\n\n If there is already a LayoutGrid set, the objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLayoutGridStyle","title":"Chart.withLayoutGridStyle","content":"Chart.withLayoutGridStyle \nwithLayoutGridStyle \n\n Sets the given LayoutGrid styles on the input chart\u0027s LayoutGrid.\n\n If there is already a LayoutGrid set , the styles are applied to it. If there is no LayoutGrid present, a new LayoutGrid object with the given styles will be set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLayoutImage","title":"Chart.withLayoutImage","content":"Chart.withLayoutImage \nwithLayoutImage \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLayoutImages","title":"Chart.withLayoutImages","content":"Chart.withLayoutImages \nwithLayoutImages \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLayoutStyle","title":"Chart.withLayoutStyle","content":"Chart.withLayoutStyle \nwithLayoutStyle \n\n Applies the given styles to the chart\u0027s Layout object. Overwrites attributes with the same name that are already set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLegend","title":"Chart.withLegend","content":"Chart.withLegend \nwithLegend \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLegend","title":"Chart.withLegend","content":"Chart.withLegend \nwithLegend \n\n Sets the Legend for the chart\u0027s layout\n\n If there is already a Legend set, the objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLegendStyle","title":"Chart.withLegendStyle","content":"Chart.withLegendStyle \nwithLegendStyle \n\n Sets the given Legend styles on the input chart\u0027s Legend.\n\n If there is already a Legend set , the styles are applied to it. If there is no Legend present, a new Legend object with the given styles will be set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLine","title":"Chart.withLine","content":"Chart.withLine \nwithLine \n\n Sets the line for the chart\u0027s trace(s).\n\n If there is already a Line set, the objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withLineStyle","title":"Chart.withLineStyle","content":"Chart.withLineStyle \nwithLineStyle \n\n Applies the given styles to the line object(s) of the chart\u0027s trace(s). Overwrites attributes with the same name that are already set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withMapbox","title":"Chart.withMapbox","content":"Chart.withMapbox \nwithMapbox \n\n Sets the Mapbox for the chart\u0027s layout\n\n If there is already a Mapbox set, the objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withMapboxStyle","title":"Chart.withMapboxStyle","content":"Chart.withMapboxStyle \nwithMapboxStyle \n\n Sets the given Mapbox styles on the target Mapbox object on the input chart\u0027s layout.\n\n If there is already a Mapbox set, the styles are applied to it. If there is no Mapbox present, a new Mapbox object with the given styles will be set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withMargin","title":"Chart.withMargin","content":"Chart.withMargin \nwithMargin \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withMarginSize","title":"Chart.withMarginSize","content":"Chart.withMarginSize \nwithMarginSize \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withMarker","title":"Chart.withMarker","content":"Chart.withMarker \nwithMarker \n\n Sets the marker for the chart\u0027s trace(s).\n\n If there is already a marker set, the objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withMarkerStyle","title":"Chart.withMarkerStyle","content":"Chart.withMarkerStyle \nwithMarkerStyle \n\n Applies the given styles to the marker object(s) of the chart\u0027s trace(s). Overwrites attributes with the same name that are already set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withMathTex","title":"Chart.withMathTex","content":"Chart.withMathTex \nwithMathTex \n\n Adds the necessary script tags to render tex strings to the chart\u0027s DisplayOptions\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withPolar","title":"Chart.withPolar","content":"Chart.withPolar \nwithPolar \n\n Sets the Polar for the chart\u0027s layout\n\n If there is already a Polar set, the objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withPolarStyle","title":"Chart.withPolarStyle","content":"Chart.withPolarStyle \nwithPolarStyle \n\n Sets the given Polar styles on the target Polar object on the input chart\u0027s layout.\n\n If there is already a Polar set, the styles are applied to it. If there is no Polar present, a new Polar object with the given styles will be set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withRadialAxis","title":"Chart.withRadialAxis","content":"Chart.withRadialAxis \nwithRadialAxis \n\n Sets the RadialAxis on the polar object with the given id on the input chart\u0027s layout.\n\n If there is already a RadialAxis set on the polar object, the RadialAxis objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withRealAxis","title":"Chart.withRealAxis","content":"Chart.withRealAxis \nwithRealAxis \n\n Sets the RealAxis on the smith object with the given id on the input chart\u0027s layout.\n\n If there is already a RealAxis set on the smith object, the RealAxis objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withScene","title":"Chart.withScene","content":"Chart.withScene \nwithScene \n\n Sets the Scene for the chart\u0027s layout\n\n If there is already a Scene set, the objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withSceneStyle","title":"Chart.withSceneStyle","content":"Chart.withSceneStyle \nwithSceneStyle \n\n Sets the given Scene styles on the target Scene object on the input chart\u0027s layout.\n\n If there is already a Scene set, the styles are applied to it. If there is no Scene present, a new Scene object with the given styles will be set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withSelection","title":"Chart.withSelection","content":"Chart.withSelection \nwithSelection \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withSelections","title":"Chart.withSelections","content":"Chart.withSelections \nwithSelections \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withShape","title":"Chart.withShape","content":"Chart.withShape \nwithShape \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withShapes","title":"Chart.withShapes","content":"Chart.withShapes \nwithShapes \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withSize","title":"Chart.withSize","content":"Chart.withSize \nwithSize \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withSize","title":"Chart.withSize","content":"Chart.withSize \nwithSize \n\n Sets the size of a Chart (in pixels)\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withSlider","title":"Chart.withSlider","content":"Chart.withSlider \nwithSlider \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withSliders","title":"Chart.withSliders","content":"Chart.withSliders \nwithSliders \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withSmith","title":"Chart.withSmith","content":"Chart.withSmith \nwithSmith \n\n Sets the Smith for the chart\u0027s layout\n\n If there is already a Smith set, the objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withSmithStyle","title":"Chart.withSmithStyle","content":"Chart.withSmithStyle \nwithSmithStyle \n\n Sets the given Smith styles on the target Smith object on the input chart\u0027s layout.\n\n If there is already a Smith set, the styles are applied to it. If there is no Smith present, a new Smith object with the given styles will be set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withTemplate","title":"Chart.withTemplate","content":"Chart.withTemplate \nwithTemplate \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withTernary","title":"Chart.withTernary","content":"Chart.withTernary \nwithTernary \n\n Sets the Ternary for the chart\u0027s layout\n\n If there is already a Ternary set, the objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withTernaryStyle","title":"Chart.withTernaryStyle","content":"Chart.withTernaryStyle \nwithTernaryStyle \n\n Sets the given Ternary styles on the target Ternary object on the input chart\u0027s layout.\n\n If there is already a Ternary set, the styles are applied to it. If there is no Ternary present, a new Ternary object with the given styles will be set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withTitle","title":"Chart.withTitle","content":"Chart.withTitle \nwithTitle \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withTitle","title":"Chart.withTitle","content":"Chart.withTitle \nwithTitle \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withTraceInfo","title":"Chart.withTraceInfo","content":"Chart.withTraceInfo \nwithTraceInfo \n\n Sets trace information on the given chart.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withUpdateMenu","title":"Chart.withUpdateMenu","content":"Chart.withUpdateMenu \nwithUpdateMenu \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withUpdateMenus","title":"Chart.withUpdateMenus","content":"Chart.withUpdateMenus \nwithUpdateMenus \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withXAxis","title":"Chart.withXAxis","content":"Chart.withXAxis \nwithXAxis \n\n Sets the given x axis on the input chart\u0027s layout, optionally passing a target axis id.\n\n If there is already an axis set at the given id, the axis objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withXAxisRangeSlider","title":"Chart.withXAxisRangeSlider","content":"Chart.withXAxisRangeSlider \nwithXAxisRangeSlider \n\n Sets the range slider for the xAxis\n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withXAxisStyle","title":"Chart.withXAxisStyle","content":"Chart.withXAxisStyle \nwithXAxisStyle \n\n Sets the given x axis styles on the input chart\u0027s layout.\n\n If there is already an axis set at the given id, the styles are applied to it. If there is no axis present, a new LinearAxis object with the given styles will be set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withXError","title":"Chart.withXError","content":"Chart.withXError \nwithXError \n\n Sets the error in the x dimension for the chart\u0027s trace(s).\n\n If there is already an error set, the objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withXErrorStyle","title":"Chart.withXErrorStyle","content":"Chart.withXErrorStyle \nwithXErrorStyle \n\n Applies the given styles to the error object(s) in the x dimension of the chart\u0027s trace(s). Overwrites attributes with the same name that are already set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withX_AxisRangeSlider","title":"Chart.withX_AxisRangeSlider","content":"Chart.withX_AxisRangeSlider \nwithX_AxisRangeSlider \n"},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withYAxis","title":"Chart.withYAxis","content":"Chart.withYAxis \nwithYAxis \n\n Sets the given y axis on the input chart\u0027s layout, optionally passing a target axis id.\n\n If there is already an axis set at the given id, the axis objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withYAxisStyle","title":"Chart.withYAxisStyle","content":"Chart.withYAxisStyle \nwithYAxisStyle \n\n Sets the given y axis styles on the input chart\u0027s layout.\n\n If there is already an axis set at the given id, the styles are applied to it. If there is no axis present, a new LinearAxis object with the given styles will be set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withYError","title":"Chart.withYError","content":"Chart.withYError \nwithYError \n\n Sets the error in the y dimension for the chart\u0027s trace(s).\n\n If there is already an error set, the objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withYErrorStyle","title":"Chart.withYErrorStyle","content":"Chart.withYErrorStyle \nwithYErrorStyle \n\n Applies the given styles to the error object(s) in the y dimension of the chart\u0027s trace(s). Overwrites attributes with the same name that are already set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withZAxis","title":"Chart.withZAxis","content":"Chart.withZAxis \nwithZAxis \n\n Sets the given z axis on the input chart\u0027s scene, optionally passing a scene axis id.\n\n If there is already an axis set at the given id, the axis objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withZAxisStyle","title":"Chart.withZAxisStyle","content":"Chart.withZAxisStyle \nwithZAxisStyle \n\n Sets the given z axis styles on the input chart\u0027s scene.\n\n If there is already an axis set at the given id, the styles are applied to it. If there is no axis present, a new LinearAxis object with the given styles will be set.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withZError","title":"Chart.withZError","content":"Chart.withZError \nwithZError \n\n Sets the error in the z dimension for the chart\u0027s trace(s).\n\n If there is already an error set, the objects are combined.\n "},{"uri":"https://plotly.net/reference/plotly-net-chart.html#withZErrorStyle","title":"Chart.withZErrorStyle","content":"Chart.withZErrorStyle \nwithZErrorStyle \n\n Applies the given styles to the error object(s) in the z dimension of the chart\u0027s trace(s). Overwrites attributes with the same name that are already set.\n "},{"uri":"https://plotly.net/reference/plotly-net-color.html","title":"Color","content":"Color \n\n Plotly color can be a single color, a sequence of colors, or a sequence of numeric values referencing the color of the colorscale obj\n \nColor.Value \nValue \nColor.fromARGB \nfromARGB \nColor.fromColorScaleValues \nfromColorScaleValues \nColor.fromColors \nfromColors \nColor.fromHex \nfromHex \nColor.fromKeyword \nfromKeyword \nColor.fromRGB \nfromRGB \nColor.fromString \nfromString"},{"uri":"https://plotly.net/reference/plotly-net-color.html#Value","title":"Color.Value","content":"Color.Value \nValue \n\n extractor\n"},{"uri":"https://plotly.net/reference/plotly-net-color.html#fromARGB","title":"Color.fromARGB","content":"Color.fromARGB \nfromARGB \n\n Creates a Color from the four ARGB component (alpha, red, green, and blue) values.\n"},{"uri":"https://plotly.net/reference/plotly-net-color.html#fromColorScaleValues","title":"Color.fromColorScaleValues","content":"Color.fromColorScaleValues \nfromColorScaleValues \n\n Values are interpreted relative to color scale\n"},{"uri":"https://plotly.net/reference/plotly-net-color.html#fromColors","title":"Color.fromColors","content":"Color.fromColors \nfromColors \n\n Color\n"},{"uri":"https://plotly.net/reference/plotly-net-color.html#fromHex","title":"Color.fromHex","content":"Color.fromHex \nfromHex \n\n Color from web color (#FFFFFF) or hex representataion (FFFFFF) / (0xFFFFFF)\n"},{"uri":"https://plotly.net/reference/plotly-net-color.html#fromKeyword","title":"Color.fromKeyword","content":"Color.fromKeyword \nfromKeyword \n\n Color from a standard web color keyword, e.g. White -\u003E \u0022white\u0022 (see //https://www.w3.org/TR/2011/REC-SVG11-20110816/types.html#ColorKeywords)\n"},{"uri":"https://plotly.net/reference/plotly-net-color.html#fromRGB","title":"Color.fromRGB","content":"Color.fromRGB \nfromRGB \n\n Creates a Color from the specified color values (red, green, and blue).\n The alpha value is implicitly 1. (fully opaque).\n"},{"uri":"https://plotly.net/reference/plotly-net-color.html#fromString","title":"Color.fromString","content":"Color.fromString \nfromString \n\n Color from a raw string input, no check for correctness performed\n"},{"uri":"https://plotly.net/reference/plotly-net-colorbar.html","title":"ColorBar","content":"ColorBar \n\n The ColorBar object to be used with ColorAxes.\n \nColorBar.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nColorBar.init \ninit \nColorBar.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-colorbar.html#\u0060\u0060.ctor\u0060\u0060","title":"ColorBar.\u0060\u0060.ctor\u0060\u0060","content":"ColorBar.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-colorbar.html#init","title":"ColorBar.init","content":"ColorBar.init \ninit \n\n Initializes a ColorBar object.\n "},{"uri":"https://plotly.net/reference/plotly-net-colorbar.html#style","title":"ColorBar.style","content":"ColorBar.style \nstyle \n\n Create a function that applies the given style parameters to a ColorBar object\n "},{"uri":"https://plotly.net/reference/plotly-net-colorconverter.html","title":"ColorConverter","content":"ColorConverter \n \nColorConverter.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"https://plotly.net/reference/plotly-net-colorconverter.html#\u0060\u0060.ctor\u0060\u0060","title":"ColorConverter.\u0060\u0060.ctor\u0060\u0060","content":"ColorConverter.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html","title":"ColorKeyword","content":"ColorKeyword \n\nhttps://www.w3.org/TR/2011/REC-SVG11-20110816/types.html#ColorKeywords\n\nW3C Recognized color keyword names\n \nColorKeyword.toRGB \ntoRGB \nColorKeyword.ofKeyWord \nofKeyWord \nColorKeyword.AliceBlue \nAliceBlue \nColorKeyword.AntiqueWhite \nAntiqueWhite \nColorKeyword.Aqua \nAqua \nColorKeyword.Aquamarine \nAquamarine \nColorKeyword.Azure \nAzure \nColorKeyword.Beige \nBeige \nColorKeyword.Bisque \nBisque \nColorKeyword.Black \nBlack \nColorKeyword.BlanchedAlmond \nBlanchedAlmond \nColorKeyword.Blue \nBlue \nColorKeyword.Blueviolet \nBlueviolet \nColorKeyword.Brown \nBrown \nColorKeyword.BurlyWood \nBurlyWood \nColorKeyword.CadetBlue \nCadetBlue \nColorKeyword.Chartreuse \nChartreuse \nColorKeyword.Chocolate \nChocolate \nColorKeyword.Coral \nCoral \nColorKeyword.CornflowerBlue \nCornflowerBlue \nColorKeyword.CornSilk \nCornSilk \nColorKeyword.Crimson \nCrimson \nColorKeyword.Cyan \nCyan \nColorKeyword.DarkBlue \nDarkBlue \nColorKeyword.DarkCyan \nDarkCyan \nColorKeyword.DarkGoldenRod \nDarkGoldenRod \nColorKeyword.DarkGray \nDarkGray \nColorKeyword.DarkGreen \nDarkGreen \nColorKeyword.DarkGrey \nDarkGrey \nColorKeyword.DarkKhaki \nDarkKhaki \nColorKeyword.DarkMagenta \nDarkMagenta \nColorKeyword.Darkolivegreen \nDarkolivegreen \nColorKeyword.DarkOrange \nDarkOrange \nColorKeyword.DarkOrchid \nDarkOrchid \nColorKeyword.DarkRed \nDarkRed \nColorKeyword.DarkSalmon \nDarkSalmon \nColorKeyword.DarkSeaGreen \nDarkSeaGreen \nColorKeyword.DarkSlateBlue \nDarkSlateBlue \nColorKeyword.DarkSlateGray \nDarkSlateGray \nColorKeyword.DarkSlateGrey \nDarkSlateGrey \nColorKeyword.DarkTurquoise \nDarkTurquoise \nColorKeyword.DarkViolet \nDarkViolet \nColorKeyword.DeepPink \nDeepPink \nColorKeyword.DeepSkyBlue \nDeepSkyBlue \nColorKeyword.DimGray \nDimGray \nColorKeyword.DimGrey \nDimGrey \nColorKeyword.DodgerBlue \nDodgerBlue \nColorKeyword.FireBrick \nFireBrick \nColorKeyword.FloralWhite \nFloralWhite \nColorKeyword.ForestGreen \nForestGreen \nColorKeyword.Fuchsia \nFuchsia \nColorKeyword.Gainsboro \nGainsboro \nColorKeyword.GhostWhite \nGhostWhite \nColorKeyword.Gold \nGold \nColorKeyword.GoldenRod \nGoldenRod \nColorKeyword.Gray \nGray \nColorKeyword.Grey \nGrey \nColorKeyword.Green \nGreen \nColorKeyword.GreenYellow \nGreenYellow \nColorKeyword.Honeydew \nHoneydew \nColorKeyword.Hotpink \nHotpink \nColorKeyword.IndianRed \nIndianRed \nColorKeyword.Indigo \nIndigo \nColorKeyword.Ivory \nIvory \nColorKeyword.Khaki \nKhaki \nColorKeyword.Lavender \nLavender \nColorKeyword.LavenderBlush \nLavenderBlush \nColorKeyword.LawnGreen \nLawnGreen \nColorKeyword.LemonChiffon \nLemonChiffon \nColorKeyword.LightBlue \nLightBlue \nColorKeyword.LightCoral \nLightCoral \nColorKeyword.LightCyan \nLightCyan \nColorKeyword.LightGoldenRodYellow \nLightGoldenRodYellow \nColorKeyword.LightGray \nLightGray \nColorKeyword.LightGreen \nLightGreen \nColorKeyword.LightGrey \nLightGrey \nColorKeyword.LightPink \nLightPink \nColorKeyword.LightAalmon \nLightAalmon \nColorKeyword.LightAeaGreen \nLightAeaGreen \nColorKeyword.LightAkyBlue \nLightAkyBlue \nColorKeyword.LightAlateGray \nLightAlateGray \nColorKeyword.LightslateGrey \nLightslateGrey \nColorKeyword.LightSteelBlue \nLightSteelBlue \nColorKeyword.LightYellow \nLightYellow \nColorKeyword.Lime \nLime \nColorKeyword.Limegreen \nLimegreen \nColorKeyword.Linen \nLinen \nColorKeyword.Magenta \nMagenta \nColorKeyword.Maroon \nMaroon \nColorKeyword.MediumAquamarine \nMediumAquamarine \nColorKeyword.MediumBlue \nMediumBlue \nColorKeyword.MediumOrchid \nMediumOrchid \nColorKeyword.MediumPurple \nMediumPurple \nColorKeyword.MediumSeaGreen \nMediumSeaGreen \nColorKeyword.MediumSlateBlue \nMediumSlateBlue \nColorKeyword.MediumSpringGreen \nMediumSpringGreen \nColorKeyword.MediumTurquoise \nMediumTurquoise \nColorKeyword.MediumVioletRed \nMediumVioletRed \nColorKeyword.MidnightBlue \nMidnightBlue \nColorKeyword.MintCream \nMintCream \nColorKeyword.MistyRose \nMistyRose \nColorKeyword.Moccasin \nMoccasin \nColorKeyword.NavajoWhite \nNavajoWhite \nColorKeyword.Navy \nNavy \nColorKeyword.OldLace \nOldLace \nColorKeyword.Olive \nOlive \nColorKeyword.OliveDrab \nOliveDrab \nColorKeyword.Orange \nOrange \nColorKeyword.OrangeRed \nOrangeRed \nColorKeyword.Orchid \nOrchid \nColorKeyword.PaleGoldenRod \nPaleGoldenRod \nColorKeyword.PaleGreen \nPaleGreen \nColorKeyword.PaleTurquoise \nPaleTurquoise \nColorKeyword.PaleVioletRed \nPaleVioletRed \nColorKeyword.PapayaWhip \nPapayaWhip \nColorKeyword.PeachPuff \nPeachPuff \nColorKeyword.Peru \nPeru \nColorKeyword.Pink \nPink \nColorKeyword.Plum \nPlum \nColorKeyword.PowderBlue \nPowderBlue \nColorKeyword.Purple \nPurple \nColorKeyword.Red \nRed \nColorKeyword.RosyBrown \nRosyBrown \nColorKeyword.RoyalBlue \nRoyalBlue \nColorKeyword.SaddleBrown \nSaddleBrown \nColorKeyword.Salmon \nSalmon \nColorKeyword.SandyBrown \nSandyBrown \nColorKeyword.SeaGreen \nSeaGreen \nColorKeyword.SeaShell \nSeaShell \nColorKeyword.Sienna \nSienna \nColorKeyword.Silver \nSilver \nColorKeyword.Skyblue \nSkyblue \nColorKeyword.SlateBlue \nSlateBlue \nColorKeyword.SlateGray \nSlateGray \nColorKeyword.SlateGrey \nSlateGrey \nColorKeyword.Snow \nSnow \nColorKeyword.SpringGreen \nSpringGreen \nColorKeyword.SteelBlue \nSteelBlue \nColorKeyword.Tan \nTan \nColorKeyword.Teal \nTeal \nColorKeyword.Thistle \nThistle \nColorKeyword.Tomato \nTomato \nColorKeyword.Turquoise \nTurquoise \nColorKeyword.Violet \nViolet \nColorKeyword.Wheat \nWheat \nColorKeyword.White \nWhite \nColorKeyword.WhiteSmoke \nWhiteSmoke \nColorKeyword.Yellow \nYellow \nColorKeyword.YellowGreen \nYellowGreen"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#toRGB","title":"ColorKeyword.toRGB","content":"ColorKeyword.toRGB \ntoRGB \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#ofKeyWord","title":"ColorKeyword.ofKeyWord","content":"ColorKeyword.ofKeyWord \nofKeyWord \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#AliceBlue","title":"ColorKeyword.AliceBlue","content":"ColorKeyword.AliceBlue \nAliceBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#AntiqueWhite","title":"ColorKeyword.AntiqueWhite","content":"ColorKeyword.AntiqueWhite \nAntiqueWhite \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Aqua","title":"ColorKeyword.Aqua","content":"ColorKeyword.Aqua \nAqua \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Aquamarine","title":"ColorKeyword.Aquamarine","content":"ColorKeyword.Aquamarine \nAquamarine \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Azure","title":"ColorKeyword.Azure","content":"ColorKeyword.Azure \nAzure \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Beige","title":"ColorKeyword.Beige","content":"ColorKeyword.Beige \nBeige \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Bisque","title":"ColorKeyword.Bisque","content":"ColorKeyword.Bisque \nBisque \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Black","title":"ColorKeyword.Black","content":"ColorKeyword.Black \nBlack \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#BlanchedAlmond","title":"ColorKeyword.BlanchedAlmond","content":"ColorKeyword.BlanchedAlmond \nBlanchedAlmond \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Blue","title":"ColorKeyword.Blue","content":"ColorKeyword.Blue \nBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Blueviolet","title":"ColorKeyword.Blueviolet","content":"ColorKeyword.Blueviolet \nBlueviolet \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Brown","title":"ColorKeyword.Brown","content":"ColorKeyword.Brown \nBrown \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#BurlyWood","title":"ColorKeyword.BurlyWood","content":"ColorKeyword.BurlyWood \nBurlyWood \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#CadetBlue","title":"ColorKeyword.CadetBlue","content":"ColorKeyword.CadetBlue \nCadetBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Chartreuse","title":"ColorKeyword.Chartreuse","content":"ColorKeyword.Chartreuse \nChartreuse \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Chocolate","title":"ColorKeyword.Chocolate","content":"ColorKeyword.Chocolate \nChocolate \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Coral","title":"ColorKeyword.Coral","content":"ColorKeyword.Coral \nCoral \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#CornflowerBlue","title":"ColorKeyword.CornflowerBlue","content":"ColorKeyword.CornflowerBlue \nCornflowerBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#CornSilk","title":"ColorKeyword.CornSilk","content":"ColorKeyword.CornSilk \nCornSilk \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Crimson","title":"ColorKeyword.Crimson","content":"ColorKeyword.Crimson \nCrimson \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Cyan","title":"ColorKeyword.Cyan","content":"ColorKeyword.Cyan \nCyan \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkBlue","title":"ColorKeyword.DarkBlue","content":"ColorKeyword.DarkBlue \nDarkBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkCyan","title":"ColorKeyword.DarkCyan","content":"ColorKeyword.DarkCyan \nDarkCyan \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkGoldenRod","title":"ColorKeyword.DarkGoldenRod","content":"ColorKeyword.DarkGoldenRod \nDarkGoldenRod \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkGray","title":"ColorKeyword.DarkGray","content":"ColorKeyword.DarkGray \nDarkGray \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkGreen","title":"ColorKeyword.DarkGreen","content":"ColorKeyword.DarkGreen \nDarkGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkGrey","title":"ColorKeyword.DarkGrey","content":"ColorKeyword.DarkGrey \nDarkGrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkKhaki","title":"ColorKeyword.DarkKhaki","content":"ColorKeyword.DarkKhaki \nDarkKhaki \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkMagenta","title":"ColorKeyword.DarkMagenta","content":"ColorKeyword.DarkMagenta \nDarkMagenta \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Darkolivegreen","title":"ColorKeyword.Darkolivegreen","content":"ColorKeyword.Darkolivegreen \nDarkolivegreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkOrange","title":"ColorKeyword.DarkOrange","content":"ColorKeyword.DarkOrange \nDarkOrange \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkOrchid","title":"ColorKeyword.DarkOrchid","content":"ColorKeyword.DarkOrchid \nDarkOrchid \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkRed","title":"ColorKeyword.DarkRed","content":"ColorKeyword.DarkRed \nDarkRed \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkSalmon","title":"ColorKeyword.DarkSalmon","content":"ColorKeyword.DarkSalmon \nDarkSalmon \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkSeaGreen","title":"ColorKeyword.DarkSeaGreen","content":"ColorKeyword.DarkSeaGreen \nDarkSeaGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkSlateBlue","title":"ColorKeyword.DarkSlateBlue","content":"ColorKeyword.DarkSlateBlue \nDarkSlateBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkSlateGray","title":"ColorKeyword.DarkSlateGray","content":"ColorKeyword.DarkSlateGray \nDarkSlateGray \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkSlateGrey","title":"ColorKeyword.DarkSlateGrey","content":"ColorKeyword.DarkSlateGrey \nDarkSlateGrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkTurquoise","title":"ColorKeyword.DarkTurquoise","content":"ColorKeyword.DarkTurquoise \nDarkTurquoise \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DarkViolet","title":"ColorKeyword.DarkViolet","content":"ColorKeyword.DarkViolet \nDarkViolet \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DeepPink","title":"ColorKeyword.DeepPink","content":"ColorKeyword.DeepPink \nDeepPink \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DeepSkyBlue","title":"ColorKeyword.DeepSkyBlue","content":"ColorKeyword.DeepSkyBlue \nDeepSkyBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DimGray","title":"ColorKeyword.DimGray","content":"ColorKeyword.DimGray \nDimGray \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DimGrey","title":"ColorKeyword.DimGrey","content":"ColorKeyword.DimGrey \nDimGrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#DodgerBlue","title":"ColorKeyword.DodgerBlue","content":"ColorKeyword.DodgerBlue \nDodgerBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#FireBrick","title":"ColorKeyword.FireBrick","content":"ColorKeyword.FireBrick \nFireBrick \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#FloralWhite","title":"ColorKeyword.FloralWhite","content":"ColorKeyword.FloralWhite \nFloralWhite \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#ForestGreen","title":"ColorKeyword.ForestGreen","content":"ColorKeyword.ForestGreen \nForestGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Fuchsia","title":"ColorKeyword.Fuchsia","content":"ColorKeyword.Fuchsia \nFuchsia \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Gainsboro","title":"ColorKeyword.Gainsboro","content":"ColorKeyword.Gainsboro \nGainsboro \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#GhostWhite","title":"ColorKeyword.GhostWhite","content":"ColorKeyword.GhostWhite \nGhostWhite \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Gold","title":"ColorKeyword.Gold","content":"ColorKeyword.Gold \nGold \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#GoldenRod","title":"ColorKeyword.GoldenRod","content":"ColorKeyword.GoldenRod \nGoldenRod \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Gray","title":"ColorKeyword.Gray","content":"ColorKeyword.Gray \nGray \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Grey","title":"ColorKeyword.Grey","content":"ColorKeyword.Grey \nGrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Green","title":"ColorKeyword.Green","content":"ColorKeyword.Green \nGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#GreenYellow","title":"ColorKeyword.GreenYellow","content":"ColorKeyword.GreenYellow \nGreenYellow \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Honeydew","title":"ColorKeyword.Honeydew","content":"ColorKeyword.Honeydew \nHoneydew \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Hotpink","title":"ColorKeyword.Hotpink","content":"ColorKeyword.Hotpink \nHotpink \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#IndianRed","title":"ColorKeyword.IndianRed","content":"ColorKeyword.IndianRed \nIndianRed \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Indigo","title":"ColorKeyword.Indigo","content":"ColorKeyword.Indigo \nIndigo \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Ivory","title":"ColorKeyword.Ivory","content":"ColorKeyword.Ivory \nIvory \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Khaki","title":"ColorKeyword.Khaki","content":"ColorKeyword.Khaki \nKhaki \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Lavender","title":"ColorKeyword.Lavender","content":"ColorKeyword.Lavender \nLavender \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LavenderBlush","title":"ColorKeyword.LavenderBlush","content":"ColorKeyword.LavenderBlush \nLavenderBlush \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LawnGreen","title":"ColorKeyword.LawnGreen","content":"ColorKeyword.LawnGreen \nLawnGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LemonChiffon","title":"ColorKeyword.LemonChiffon","content":"ColorKeyword.LemonChiffon \nLemonChiffon \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightBlue","title":"ColorKeyword.LightBlue","content":"ColorKeyword.LightBlue \nLightBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightCoral","title":"ColorKeyword.LightCoral","content":"ColorKeyword.LightCoral \nLightCoral \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightCyan","title":"ColorKeyword.LightCyan","content":"ColorKeyword.LightCyan \nLightCyan \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightGoldenRodYellow","title":"ColorKeyword.LightGoldenRodYellow","content":"ColorKeyword.LightGoldenRodYellow \nLightGoldenRodYellow \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightGray","title":"ColorKeyword.LightGray","content":"ColorKeyword.LightGray \nLightGray \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightGreen","title":"ColorKeyword.LightGreen","content":"ColorKeyword.LightGreen \nLightGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightGrey","title":"ColorKeyword.LightGrey","content":"ColorKeyword.LightGrey \nLightGrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightPink","title":"ColorKeyword.LightPink","content":"ColorKeyword.LightPink \nLightPink \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightAalmon","title":"ColorKeyword.LightAalmon","content":"ColorKeyword.LightAalmon \nLightAalmon \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightAeaGreen","title":"ColorKeyword.LightAeaGreen","content":"ColorKeyword.LightAeaGreen \nLightAeaGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightAkyBlue","title":"ColorKeyword.LightAkyBlue","content":"ColorKeyword.LightAkyBlue \nLightAkyBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightAlateGray","title":"ColorKeyword.LightAlateGray","content":"ColorKeyword.LightAlateGray \nLightAlateGray \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightslateGrey","title":"ColorKeyword.LightslateGrey","content":"ColorKeyword.LightslateGrey \nLightslateGrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightSteelBlue","title":"ColorKeyword.LightSteelBlue","content":"ColorKeyword.LightSteelBlue \nLightSteelBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#LightYellow","title":"ColorKeyword.LightYellow","content":"ColorKeyword.LightYellow \nLightYellow \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Lime","title":"ColorKeyword.Lime","content":"ColorKeyword.Lime \nLime \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Limegreen","title":"ColorKeyword.Limegreen","content":"ColorKeyword.Limegreen \nLimegreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Linen","title":"ColorKeyword.Linen","content":"ColorKeyword.Linen \nLinen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Magenta","title":"ColorKeyword.Magenta","content":"ColorKeyword.Magenta \nMagenta \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Maroon","title":"ColorKeyword.Maroon","content":"ColorKeyword.Maroon \nMaroon \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumAquamarine","title":"ColorKeyword.MediumAquamarine","content":"ColorKeyword.MediumAquamarine \nMediumAquamarine \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumBlue","title":"ColorKeyword.MediumBlue","content":"ColorKeyword.MediumBlue \nMediumBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumOrchid","title":"ColorKeyword.MediumOrchid","content":"ColorKeyword.MediumOrchid \nMediumOrchid \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumPurple","title":"ColorKeyword.MediumPurple","content":"ColorKeyword.MediumPurple \nMediumPurple \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumSeaGreen","title":"ColorKeyword.MediumSeaGreen","content":"ColorKeyword.MediumSeaGreen \nMediumSeaGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumSlateBlue","title":"ColorKeyword.MediumSlateBlue","content":"ColorKeyword.MediumSlateBlue \nMediumSlateBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumSpringGreen","title":"ColorKeyword.MediumSpringGreen","content":"ColorKeyword.MediumSpringGreen \nMediumSpringGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumTurquoise","title":"ColorKeyword.MediumTurquoise","content":"ColorKeyword.MediumTurquoise \nMediumTurquoise \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MediumVioletRed","title":"ColorKeyword.MediumVioletRed","content":"ColorKeyword.MediumVioletRed \nMediumVioletRed \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MidnightBlue","title":"ColorKeyword.MidnightBlue","content":"ColorKeyword.MidnightBlue \nMidnightBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MintCream","title":"ColorKeyword.MintCream","content":"ColorKeyword.MintCream \nMintCream \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#MistyRose","title":"ColorKeyword.MistyRose","content":"ColorKeyword.MistyRose \nMistyRose \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Moccasin","title":"ColorKeyword.Moccasin","content":"ColorKeyword.Moccasin \nMoccasin \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#NavajoWhite","title":"ColorKeyword.NavajoWhite","content":"ColorKeyword.NavajoWhite \nNavajoWhite \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Navy","title":"ColorKeyword.Navy","content":"ColorKeyword.Navy \nNavy \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#OldLace","title":"ColorKeyword.OldLace","content":"ColorKeyword.OldLace \nOldLace \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Olive","title":"ColorKeyword.Olive","content":"ColorKeyword.Olive \nOlive \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#OliveDrab","title":"ColorKeyword.OliveDrab","content":"ColorKeyword.OliveDrab \nOliveDrab \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Orange","title":"ColorKeyword.Orange","content":"ColorKeyword.Orange \nOrange \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#OrangeRed","title":"ColorKeyword.OrangeRed","content":"ColorKeyword.OrangeRed \nOrangeRed \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Orchid","title":"ColorKeyword.Orchid","content":"ColorKeyword.Orchid \nOrchid \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#PaleGoldenRod","title":"ColorKeyword.PaleGoldenRod","content":"ColorKeyword.PaleGoldenRod \nPaleGoldenRod \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#PaleGreen","title":"ColorKeyword.PaleGreen","content":"ColorKeyword.PaleGreen \nPaleGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#PaleTurquoise","title":"ColorKeyword.PaleTurquoise","content":"ColorKeyword.PaleTurquoise \nPaleTurquoise \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#PaleVioletRed","title":"ColorKeyword.PaleVioletRed","content":"ColorKeyword.PaleVioletRed \nPaleVioletRed \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#PapayaWhip","title":"ColorKeyword.PapayaWhip","content":"ColorKeyword.PapayaWhip \nPapayaWhip \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#PeachPuff","title":"ColorKeyword.PeachPuff","content":"ColorKeyword.PeachPuff \nPeachPuff \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Peru","title":"ColorKeyword.Peru","content":"ColorKeyword.Peru \nPeru \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Pink","title":"ColorKeyword.Pink","content":"ColorKeyword.Pink \nPink \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Plum","title":"ColorKeyword.Plum","content":"ColorKeyword.Plum \nPlum \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#PowderBlue","title":"ColorKeyword.PowderBlue","content":"ColorKeyword.PowderBlue \nPowderBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Purple","title":"ColorKeyword.Purple","content":"ColorKeyword.Purple \nPurple \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Red","title":"ColorKeyword.Red","content":"ColorKeyword.Red \nRed \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#RosyBrown","title":"ColorKeyword.RosyBrown","content":"ColorKeyword.RosyBrown \nRosyBrown \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#RoyalBlue","title":"ColorKeyword.RoyalBlue","content":"ColorKeyword.RoyalBlue \nRoyalBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SaddleBrown","title":"ColorKeyword.SaddleBrown","content":"ColorKeyword.SaddleBrown \nSaddleBrown \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Salmon","title":"ColorKeyword.Salmon","content":"ColorKeyword.Salmon \nSalmon \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SandyBrown","title":"ColorKeyword.SandyBrown","content":"ColorKeyword.SandyBrown \nSandyBrown \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SeaGreen","title":"ColorKeyword.SeaGreen","content":"ColorKeyword.SeaGreen \nSeaGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SeaShell","title":"ColorKeyword.SeaShell","content":"ColorKeyword.SeaShell \nSeaShell \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Sienna","title":"ColorKeyword.Sienna","content":"ColorKeyword.Sienna \nSienna \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Silver","title":"ColorKeyword.Silver","content":"ColorKeyword.Silver \nSilver \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Skyblue","title":"ColorKeyword.Skyblue","content":"ColorKeyword.Skyblue \nSkyblue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SlateBlue","title":"ColorKeyword.SlateBlue","content":"ColorKeyword.SlateBlue \nSlateBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SlateGray","title":"ColorKeyword.SlateGray","content":"ColorKeyword.SlateGray \nSlateGray \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SlateGrey","title":"ColorKeyword.SlateGrey","content":"ColorKeyword.SlateGrey \nSlateGrey \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Snow","title":"ColorKeyword.Snow","content":"ColorKeyword.Snow \nSnow \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SpringGreen","title":"ColorKeyword.SpringGreen","content":"ColorKeyword.SpringGreen \nSpringGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#SteelBlue","title":"ColorKeyword.SteelBlue","content":"ColorKeyword.SteelBlue \nSteelBlue \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Tan","title":"ColorKeyword.Tan","content":"ColorKeyword.Tan \nTan \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Teal","title":"ColorKeyword.Teal","content":"ColorKeyword.Teal \nTeal \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Thistle","title":"ColorKeyword.Thistle","content":"ColorKeyword.Thistle \nThistle \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Tomato","title":"ColorKeyword.Tomato","content":"ColorKeyword.Tomato \nTomato \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Turquoise","title":"ColorKeyword.Turquoise","content":"ColorKeyword.Turquoise \nTurquoise \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Violet","title":"ColorKeyword.Violet","content":"ColorKeyword.Violet \nViolet \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Wheat","title":"ColorKeyword.Wheat","content":"ColorKeyword.Wheat \nWheat \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#White","title":"ColorKeyword.White","content":"ColorKeyword.White \nWhite \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#WhiteSmoke","title":"ColorKeyword.WhiteSmoke","content":"ColorKeyword.WhiteSmoke \nWhiteSmoke \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#Yellow","title":"ColorKeyword.Yellow","content":"ColorKeyword.Yellow \nYellow \n"},{"uri":"https://plotly.net/reference/plotly-net-colorkeyword.html#YellowGreen","title":"ColorKeyword.YellowGreen","content":"ColorKeyword.YellowGreen \nYellowGreen \n"},{"uri":"https://plotly.net/reference/plotly-net-config.html","title":"Config","content":"Config \n\n The Config object gets passed to the plotly renderer and contains render-specific options.\n \nConfig.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nConfig.combine \ncombine \nConfig.init \ninit \nConfig.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-config.html#\u0060\u0060.ctor\u0060\u0060","title":"Config.\u0060\u0060.ctor\u0060\u0060","content":"Config.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-config.html#combine","title":"Config.combine","content":"Config.combine \ncombine \n\n Combines two Config objects.\n\n In case of duplicate dynamic member values, the values of the second Config are used.\n\n For the collections used for the dynamic members\n\n modeBarButtonsToAdd\n\n the values from the second Config are appended to those of the first instead.\n "},{"uri":"https://plotly.net/reference/plotly-net-config.html#init","title":"Config.init","content":"Config.init \ninit \n\n Returns a new Config Object with the given styling.\n "},{"uri":"https://plotly.net/reference/plotly-net-config.html#style","title":"Config.style","content":"Config.style \nstyle \n\n Returns a function that applies the given styles to a Config object.\n "},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html","title":"DisplayOptions","content":"DisplayOptions \n \nDisplayOptions.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDisplayOptions.addAdditionalHeadTags \naddAdditionalHeadTags \nDisplayOptions.addDescription \naddDescription \nDisplayOptions.combine \ncombine \nDisplayOptions.getAdditionalHeadTags \ngetAdditionalHeadTags \nDisplayOptions.getDescription \ngetDescription \nDisplayOptions.getPlotlyReference \ngetPlotlyReference \nDisplayOptions.init \ninit \nDisplayOptions.initCDNOnly \ninitCDNOnly \nDisplayOptions.setAdditionalHeadTags \nsetAdditionalHeadTags \nDisplayOptions.setDescription \nsetDescription \nDisplayOptions.setPlotlyReference \nsetPlotlyReference \nDisplayOptions.style \nstyle \nDisplayOptions.tryGetAdditionalHeadTags \ntryGetAdditionalHeadTags \nDisplayOptions.tryGetDescription \ntryGetDescription \nDisplayOptions.tryGetPlotlyReference \ntryGetPlotlyReference"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#\u0060\u0060.ctor\u0060\u0060","title":"DisplayOptions.\u0060\u0060.ctor\u0060\u0060","content":"DisplayOptions.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#addAdditionalHeadTags","title":"DisplayOptions.addAdditionalHeadTags","content":"DisplayOptions.addAdditionalHeadTags \naddAdditionalHeadTags \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#addDescription","title":"DisplayOptions.addDescription","content":"DisplayOptions.addDescription \naddDescription \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#combine","title":"DisplayOptions.combine","content":"DisplayOptions.combine \ncombine \n\n Combines two DisplayOptions objects.\n\n In case of duplicate dynamic member values, the values of the second DisplayOptions are used.\n\n For the collections used for the dynamic members\n\n AdditionalHeadTags, Description\n\n the values from the second DisplayOptions are appended to those of the first instead.\n "},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#getAdditionalHeadTags","title":"DisplayOptions.getAdditionalHeadTags","content":"DisplayOptions.getAdditionalHeadTags \ngetAdditionalHeadTags \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#getDescription","title":"DisplayOptions.getDescription","content":"DisplayOptions.getDescription \ngetDescription \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#getPlotlyReference","title":"DisplayOptions.getPlotlyReference","content":"DisplayOptions.getPlotlyReference \ngetPlotlyReference \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#init","title":"DisplayOptions.init","content":"DisplayOptions.init \ninit \n\n Returns a new DisplayOptions object with the given styles\n "},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#initCDNOnly","title":"DisplayOptions.initCDNOnly","content":"DisplayOptions.initCDNOnly \ninitCDNOnly \n\n Returns a DisplayOptions Object with the plotly cdn set to Globals.PLOTLYJS_VERSION\n "},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#setAdditionalHeadTags","title":"DisplayOptions.setAdditionalHeadTags","content":"DisplayOptions.setAdditionalHeadTags \nsetAdditionalHeadTags \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#setDescription","title":"DisplayOptions.setDescription","content":"DisplayOptions.setDescription \nsetDescription \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#setPlotlyReference","title":"DisplayOptions.setPlotlyReference","content":"DisplayOptions.setPlotlyReference \nsetPlotlyReference \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#style","title":"DisplayOptions.style","content":"DisplayOptions.style \nstyle \n\n Returns a function sthat applies the given styles to a DisplayOptions object\n "},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#tryGetAdditionalHeadTags","title":"DisplayOptions.tryGetAdditionalHeadTags","content":"DisplayOptions.tryGetAdditionalHeadTags \ntryGetAdditionalHeadTags \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#tryGetDescription","title":"DisplayOptions.tryGetDescription","content":"DisplayOptions.tryGetDescription \ntryGetDescription \n"},{"uri":"https://plotly.net/reference/plotly-net-displayoptions.html#tryGetPlotlyReference","title":"DisplayOptions.tryGetPlotlyReference","content":"DisplayOptions.tryGetPlotlyReference \ntryGetPlotlyReference \n"},{"uri":"https://plotly.net/reference/plotly-net-font.html","title":"Font","content":"Font \n\n Font type inherits from dynamic object\n \nFont.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nFont.init \ninit \nFont.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-font.html#\u0060\u0060.ctor\u0060\u0060","title":"Font.\u0060\u0060.ctor\u0060\u0060","content":"Font.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-font.html#init","title":"Font.init","content":"Font.init \ninit \n\n Init Font()\n"},{"uri":"https://plotly.net/reference/plotly-net-font.html#style","title":"Font.style","content":"Font.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-frame.html","title":"Frame","content":"Frame \n \nFrame.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"https://plotly.net/reference/plotly-net-frame.html#\u0060\u0060.ctor\u0060\u0060","title":"Frame.\u0060\u0060.ctor\u0060\u0060","content":"Frame.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-html.html","title":"HTML","content":"HTML \n \nHTML.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nHTML.CreateChartHTML \nCreateChartHTML \nHTML.CreateChartScript \nCreateChartScript \nHTML.Doc \nDoc"},{"uri":"https://plotly.net/reference/plotly-net-html.html#\u0060\u0060.ctor\u0060\u0060","title":"HTML.\u0060\u0060.ctor\u0060\u0060","content":"HTML.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-html.html#CreateChartHTML","title":"HTML.CreateChartHTML","content":"HTML.CreateChartHTML \nCreateChartHTML \n"},{"uri":"https://plotly.net/reference/plotly-net-html.html#CreateChartScript","title":"HTML.CreateChartScript","content":"HTML.CreateChartScript \nCreateChartScript \n"},{"uri":"https://plotly.net/reference/plotly-net-html.html#Doc","title":"HTML.Doc","content":"HTML.Doc \nDoc \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html","title":"Layout","content":"Layout \n\n A Layout object in the context of plotly charts contains all styling options that are not directly related to the visualization of the data itself, such as axes, legends, watermarks, etc.\n \nLayout.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nLayout.combine \ncombine \nLayout.getColorAxisById \ngetColorAxisById \nLayout.getGeoById \ngetGeoById \nLayout.getLayoutGrid \ngetLayoutGrid \nLayout.getLegend \ngetLegend \nLayout.getLinearAxisById \ngetLinearAxisById \nLayout.getMapboxById \ngetMapboxById \nLayout.getPolarById \ngetPolarById \nLayout.getSceneById \ngetSceneById \nLayout.getSmithById \ngetSmithById \nLayout.getTernaryById \ngetTernaryById \nLayout.init \ninit \nLayout.setColorAxis \nsetColorAxis \nLayout.setGeo \nsetGeo \nLayout.setLayoutGrid \nsetLayoutGrid \nLayout.setLegend \nsetLegend \nLayout.setLinearAxis \nsetLinearAxis \nLayout.setMapbox \nsetMapbox \nLayout.setPolar \nsetPolar \nLayout.setScene \nsetScene \nLayout.setSmith \nsetSmith \nLayout.setTernary \nsetTernary \nLayout.style \nstyle \nLayout.tryGetColorAxisById \ntryGetColorAxisById \nLayout.tryGetGeoById \ntryGetGeoById \nLayout.tryGetLinearAxisById \ntryGetLinearAxisById \nLayout.tryGetMapboxById \ntryGetMapboxById \nLayout.tryGetPolarById \ntryGetPolarById \nLayout.tryGetSceneById \ntryGetSceneById \nLayout.tryGetSmithById \ntryGetSmithById \nLayout.tryGetTernaryById \ntryGetTernaryById \nLayout.tryGetTypedMember \ntryGetTypedMember \nLayout.updateColorAxisById \nupdateColorAxisById \nLayout.updateGeoById \nupdateGeoById \nLayout.updateLayoutGrid \nupdateLayoutGrid \nLayout.updateLegend \nupdateLegend \nLayout.updateLinearAxisById \nupdateLinearAxisById \nLayout.updateMapboxById \nupdateMapboxById \nLayout.updatePolarById \nupdatePolarById \nLayout.updateSceneById \nupdateSceneById \nLayout.updateSmithById \nupdateSmithById \nLayout.updateTernaryById \nupdateTernaryById"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#\u0060\u0060.ctor\u0060\u0060","title":"Layout.\u0060\u0060.ctor\u0060\u0060","content":"Layout.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layout.html#combine","title":"Layout.combine","content":"Layout.combine \ncombine \n\n Combines two Layout objects.\n\n In case of duplicate dynamic member values, the values of the second Layout are used.\n\n For the collections used for the dynamic members\n\n annotations, shapes, selections, images, sliders, hiddenlabels, updatemenus\n\n the values from the second Layout are appended to those of the first instead.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#getColorAxisById","title":"Layout.getColorAxisById","content":"Layout.getColorAxisById \ngetColorAxisById \n\n Returns the ColorAxis object of the layout with the given id.\n\n If there is no color axis set, returns an empty ColorAxis object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#getGeoById","title":"Layout.getGeoById","content":"Layout.getGeoById \ngetGeoById \n\n Returns the Geo object of the layout with the given id.\n\n If there is no geo set, returns an empty Geo object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#getLayoutGrid","title":"Layout.getLayoutGrid","content":"Layout.getLayoutGrid \ngetLayoutGrid \n\n Returns the LayoutGrid object of the given layout.\n\n If there is no grid set, returns an empty LayoutGrid object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#getLegend","title":"Layout.getLegend","content":"Layout.getLegend \ngetLegend \n\n Returns the legend object of the given layout.\n\n If there is no legend set, returns an empty Legend object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#getLinearAxisById","title":"Layout.getLinearAxisById","content":"Layout.getLinearAxisById \ngetLinearAxisById \n\n Returns the linear axis object of the layout with the given id.\n\n If there is no linear axis set, returns an empty LinearAxis object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#getMapboxById","title":"Layout.getMapboxById","content":"Layout.getMapboxById \ngetMapboxById \n\n Returns the Mapbox object of the layout with the given id.\n\n If there is no mapbox set, returns an empty Mapbox object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#getPolarById","title":"Layout.getPolarById","content":"Layout.getPolarById \ngetPolarById \n\n Returns the Polar object of the layout with the given id.\n\n If there is no polar set, returns an empty Polar object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#getSceneById","title":"Layout.getSceneById","content":"Layout.getSceneById \ngetSceneById \n\n Returns the Scene object of the layout with the given id.\n\n If there is no scene set, returns an empty Scene object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#getSmithById","title":"Layout.getSmithById","content":"Layout.getSmithById \ngetSmithById \n\n Returns the Smith object of the layout with the given id.\n\n If there is no smith set, returns an empty Smith object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#getTernaryById","title":"Layout.getTernaryById","content":"Layout.getTernaryById \ngetTernaryById \n\n Returns the Ternary object of the layout with the given id.\n\n If there is no ternary set, returns an empty Ternary object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#init","title":"Layout.init","content":"Layout.init \ninit \n\n Returns a new Layout object with the given styling.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#setColorAxis","title":"Layout.setColorAxis","content":"Layout.setColorAxis \nsetColorAxis \n\n Sets a ColorAxis object on the layout as a dynamic property with the given ColorAxis id.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#setGeo","title":"Layout.setGeo","content":"Layout.setGeo \nsetGeo \n\n Sets a geo object on the layout as a dynamic property with the given geo id.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#setLayoutGrid","title":"Layout.setLayoutGrid","content":"Layout.setLayoutGrid \nsetLayoutGrid \n\n Returns a function that sets the LayoutGrid object of the given trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#setLegend","title":"Layout.setLegend","content":"Layout.setLegend \nsetLegend \n\n Returns a function that sets the Legend object of the given trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#setLinearAxis","title":"Layout.setLinearAxis","content":"Layout.setLinearAxis \nsetLinearAxis \n\n Sets a linear axis object on the layout as a dynamic property with the given axis id.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#setMapbox","title":"Layout.setMapbox","content":"Layout.setMapbox \nsetMapbox \n\n Sets a mapbox object on the layout as a dynamic property with the given mapbox id.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#setPolar","title":"Layout.setPolar","content":"Layout.setPolar \nsetPolar \n\n Sets a polar object on the layout as a dynamic property with the given polar id.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#setScene","title":"Layout.setScene","content":"Layout.setScene \nsetScene \n\n Sets a scene object on the layout as a dynamic property with the given scene id.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#setSmith","title":"Layout.setSmith","content":"Layout.setSmith \nsetSmith \n\n Sets a smith object on the layout as a dynamic property with the given smith id.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#setTernary","title":"Layout.setTernary","content":"Layout.setTernary \nsetTernary \n\n Sets a Ternary object on the layout as a dynamic property with the given Ternary id.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#style","title":"Layout.style","content":"Layout.style \nstyle \n\n Returns a function that applies the given styles to a Layout object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#tryGetColorAxisById","title":"Layout.tryGetColorAxisById","content":"Layout.tryGetColorAxisById \ntryGetColorAxisById \n\n Returns Some(ColorAxis) if there is a ColorAxis object set on the layout with the given id, and None otherwise.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#tryGetGeoById","title":"Layout.tryGetGeoById","content":"Layout.tryGetGeoById \ntryGetGeoById \n\n Returns Some(Geo) if there is a geo object set on the layout with the given id, and None otherwise.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#tryGetLinearAxisById","title":"Layout.tryGetLinearAxisById","content":"Layout.tryGetLinearAxisById \ntryGetLinearAxisById \n\n Returns Some(LinearAxis) if there is an axis object set on the layout with the given id, and None otherwise.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#tryGetMapboxById","title":"Layout.tryGetMapboxById","content":"Layout.tryGetMapboxById \ntryGetMapboxById \n\n Returns Some(Mapbox) if there is amapbox object set on the layout with the given id, and None otherwise.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#tryGetPolarById","title":"Layout.tryGetPolarById","content":"Layout.tryGetPolarById \ntryGetPolarById \n\n Returns Some(Polar) if there is a polar object set on the layout with the given id, and None otherwise.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#tryGetSceneById","title":"Layout.tryGetSceneById","content":"Layout.tryGetSceneById \ntryGetSceneById \n\n Returns Some(Scene) if there is a scene object set on the layout with the given id, and None otherwise.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#tryGetSmithById","title":"Layout.tryGetSmithById","content":"Layout.tryGetSmithById \ntryGetSmithById \n\n Returns Some(smith) if there is a smith object set on the layout with the given id, and None otherwise.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#tryGetTernaryById","title":"Layout.tryGetTernaryById","content":"Layout.tryGetTernaryById \ntryGetTernaryById \n\n Returns Some(Ternary) if there is a ColorAxis object set on the layout with the given id, and None otherwise.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#tryGetTypedMember","title":"Layout.tryGetTypedMember","content":"Layout.tryGetTypedMember \ntryGetTypedMember \n\n Returns Some(dynamic member value) of the trace object\u0027s underlying DynamicObj when a dynamic member with the given name exists, and None otherwise.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#updateColorAxisById","title":"Layout.updateColorAxisById","content":"Layout.updateColorAxisById \nupdateColorAxisById \n\n Combines the given colorAxis object with the one already present on the layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#updateGeoById","title":"Layout.updateGeoById","content":"Layout.updateGeoById \nupdateGeoById \n\n Combines the given geo object with the one already present on the layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#updateLayoutGrid","title":"Layout.updateLayoutGrid","content":"Layout.updateLayoutGrid \nupdateLayoutGrid \n\n Combines the given layoutGrid object with the one already present on the layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#updateLegend","title":"Layout.updateLegend","content":"Layout.updateLegend \nupdateLegend \n\n Combines the given Legend object with the one already present on the layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#updateLinearAxisById","title":"Layout.updateLinearAxisById","content":"Layout.updateLinearAxisById \nupdateLinearAxisById \n\n Combines the given axis object with the one already present on the layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#updateMapboxById","title":"Layout.updateMapboxById","content":"Layout.updateMapboxById \nupdateMapboxById \n\n Combines the given mapbox object with the one already present on the layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#updatePolarById","title":"Layout.updatePolarById","content":"Layout.updatePolarById \nupdatePolarById \n\n Combines the given polar object with the one already present on the layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#updateSceneById","title":"Layout.updateSceneById","content":"Layout.updateSceneById \nupdateSceneById \n\n Combines the given scene object with the one already present on the layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#updateSmithById","title":"Layout.updateSmithById","content":"Layout.updateSmithById \nupdateSmithById \n\n Combines the given Smith object with the one already present on the layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-layout.html#updateTernaryById","title":"Layout.updateTernaryById","content":"Layout.updateTernaryById \nupdateTernaryById \n\n Combines the given ternary object with the one already present on the layout.\n "},{"uri":"https://plotly.net/reference/plotly-net-line.html","title":"Line","content":"Line \n\n The line object determines the style of the line in various aspect of plots such as a line connecting datums, outline of layout objects, etc..\n \nLine.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nLine.init \ninit \nLine.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-line.html#\u0060\u0060.ctor\u0060\u0060","title":"Line.\u0060\u0060.ctor\u0060\u0060","content":"Line.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-line.html#init","title":"Line.init","content":"Line.init \ninit \n\n Returns a new Line object with the given styling.\n "},{"uri":"https://plotly.net/reference/plotly-net-line.html#style","title":"Line.style","content":"Line.style \nstyle \n\n Returns a function that applies the given styles to a Line object.\n "},{"uri":"https://plotly.net/reference/plotly-net-plotlyjsreference.html","title":"PlotlyJSReference","content":"PlotlyJSReference \n\nSets how plotly is referenced in the head of html docs.\n \nPlotlyJSReference.CDN \nCDN \nPlotlyJSReference.Full \nFull \nPlotlyJSReference.Require \nRequire \nPlotlyJSReference.NoReference \nNoReference"},{"uri":"https://plotly.net/reference/plotly-net-plotlyjsreference.html#CDN","title":"PlotlyJSReference.CDN","content":"PlotlyJSReference.CDN \nCDN \n\n The url for a script tag that references the plotly.js CDN When\n"},{"uri":"https://plotly.net/reference/plotly-net-plotlyjsreference.html#Full","title":"PlotlyJSReference.Full","content":"PlotlyJSReference.Full \nFull \n\n Full plotly.js source code (~3MB) is included in the output. HTML files generated with this option are fully self-contained and can be used offline\n"},{"uri":"https://plotly.net/reference/plotly-net-plotlyjsreference.html#Require","title":"PlotlyJSReference.Require","content":"PlotlyJSReference.Require \nRequire \n\n Use requirejs to reference plotlyjs from a url\n"},{"uri":"https://plotly.net/reference/plotly-net-plotlyjsreference.html#NoReference","title":"PlotlyJSReference.NoReference","content":"PlotlyJSReference.NoReference \nNoReference \n"},{"uri":"https://plotly.net/reference/plotly-net-template.html","title":"Template","content":"Template \n \nTemplate.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTemplate.init \ninit \nTemplate.mapLayoutTemplate \nmapLayoutTemplate \nTemplate.mapTraceTemplates \nmapTraceTemplates \nTemplate.style \nstyle \nTemplate.withColorWay \nwithColorWay"},{"uri":"https://plotly.net/reference/plotly-net-template.html#\u0060\u0060.ctor\u0060\u0060","title":"Template.\u0060\u0060.ctor\u0060\u0060","content":"Template.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-template.html#init","title":"Template.init","content":"Template.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-template.html#mapLayoutTemplate","title":"Template.mapLayoutTemplate","content":"Template.mapLayoutTemplate \nmapLayoutTemplate \n"},{"uri":"https://plotly.net/reference/plotly-net-template.html#mapTraceTemplates","title":"Template.mapTraceTemplates","content":"Template.mapTraceTemplates \nmapTraceTemplates \n"},{"uri":"https://plotly.net/reference/plotly-net-template.html#style","title":"Template.style","content":"Template.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-template.html#withColorWay","title":"Template.withColorWay","content":"Template.withColorWay \nwithColorWay \n"},{"uri":"https://plotly.net/reference/plotly-net-tickformatstop.html","title":"TickFormatStop","content":"TickFormatStop \n \nTickFormatStop.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTickFormatStop.init \ninit \nTickFormatStop.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-tickformatstop.html#\u0060\u0060.ctor\u0060\u0060","title":"TickFormatStop.\u0060\u0060.ctor\u0060\u0060","content":"TickFormatStop.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-tickformatstop.html#init","title":"TickFormatStop.init","content":"TickFormatStop.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-tickformatstop.html#style","title":"TickFormatStop.style","content":"TickFormatStop.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-title.html","title":"Title","content":"Title \n \nTitle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTitle.init \ninit \nTitle.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-title.html#\u0060\u0060.ctor\u0060\u0060","title":"Title.\u0060\u0060.ctor\u0060\u0060","content":"Title.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-title.html#init","title":"Title.init","content":"Title.init \ninit \n\n Returns a new Title object with the given styles. Note that this is a multi-purpose object that can be used as plot or different axis titles, with some attributes being only used in some layouts.\n "},{"uri":"https://plotly.net/reference/plotly-net-title.html#style","title":"Title.style","content":"Title.style \nstyle \n\n Returns a function that applies the given styles to a Title object. Note that this is a multi-purpose object that can be used as plot or different axis titles, with some attributes being only used in some layouts\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html","title":"Trace","content":"Trace \n\n A Trace object in the context of plotly charts contains the data to visualize and additional styling parameters.\n\n This is the base object that contains visualization-unspecific getters and setters for the underlying DynamicObj.\n\n Visualization-specific equivalents are suffixed with the respective trace subtype, e.g. \u0060Trace2D\u0060\n \nTrace.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTrace.type \ntype \nTrace.getColorAxisAnchor \ngetColorAxisAnchor \nTrace.getColorBar \ngetColorBar \nTrace.getDomain \ngetDomain \nTrace.getLine \ngetLine \nTrace.getMarker \ngetMarker \nTrace.getStackGroup \ngetStackGroup \nTrace.getXError \ngetXError \nTrace.getYError \ngetYError \nTrace.getZError \ngetZError \nTrace.setColorAxisAnchor \nsetColorAxisAnchor \nTrace.setColorBar \nsetColorBar \nTrace.setDomain \nsetDomain \nTrace.setLine \nsetLine \nTrace.setMarker \nsetMarker \nTrace.setStackGroup \nsetStackGroup \nTrace.setXError \nsetXError \nTrace.setYError \nsetYError \nTrace.setZError \nsetZError \nTrace.tryGetTypedMember \ntryGetTypedMember \nTrace.updateColorBar \nupdateColorBar \nTrace.updateDomain \nupdateDomain \nTrace.updateLine \nupdateLine \nTrace.updateMarker \nupdateMarker \nTrace.updateXError \nupdateXError \nTrace.updateYError \nupdateYError \nTrace.updateZError \nupdateZError"},{"uri":"https://plotly.net/reference/plotly-net-trace.html#\u0060\u0060.ctor\u0060\u0060","title":"Trace.\u0060\u0060.ctor\u0060\u0060","content":"Trace.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-trace.html#type","title":"Trace.type","content":"Trace.type \ntype \n"},{"uri":"https://plotly.net/reference/plotly-net-trace.html#getColorAxisAnchor","title":"Trace.getColorAxisAnchor","content":"Trace.getColorAxisAnchor \ngetColorAxisAnchor \n\n Returns the color axis anchor of the given trace.\n\n If there is no color axis set, returns \u0022coloraxis\u0022.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#getColorBar","title":"Trace.getColorBar","content":"Trace.getColorBar \ngetColorBar \n\n Returns the colorbar of the given trace.\n\n If there is no colorbar set, returns an empty ColorBar object.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#getDomain","title":"Trace.getDomain","content":"Trace.getDomain \ngetDomain \n\n Returns the domain of the given trace.\n\n If there is no domain set, returns an empty Domain object.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#getLine","title":"Trace.getLine","content":"Trace.getLine \ngetLine \n\n Returns the Line object of the given trace.\n\n If there is no line set, returns an empty line object.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#getMarker","title":"Trace.getMarker","content":"Trace.getMarker \ngetMarker \n\n Returns the Marker object of the given trace.\n\n If there is no marker set, returns an empty marker object.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#getStackGroup","title":"Trace.getStackGroup","content":"Trace.getStackGroup \ngetStackGroup \n\n Returns the stackgroup of the given trace.\n\n If there is no stackgroup set, returns \u0022stackgroup\u0022.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#getXError","title":"Trace.getXError","content":"Trace.getXError \ngetXError \n\n Returns the Error object for the x dimension of the given trace.\n\n If there is no error set, returns an empty error object.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#getYError","title":"Trace.getYError","content":"Trace.getYError \ngetYError \n\n Returns the Error object for the y dimension of the given trace.\n\n If there is no error set, returns an empty error object.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#getZError","title":"Trace.getZError","content":"Trace.getZError \ngetZError \n\n Returns the Error object for the z dimension of the given trace.\n\n If there is no error set, returns an empty error object.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#setColorAxisAnchor","title":"Trace.setColorAxisAnchor","content":"Trace.setColorAxisAnchor \nsetColorAxisAnchor \n\n Returns a function that sets the color axis anchor of the given trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#setColorBar","title":"Trace.setColorBar","content":"Trace.setColorBar \nsetColorBar \n\n Returns a function that sets the ColorBar of the given trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#setDomain","title":"Trace.setDomain","content":"Trace.setDomain \nsetDomain \n\n Returns a function that sets the domain of the given trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#setLine","title":"Trace.setLine","content":"Trace.setLine \nsetLine \n\n Returns a function that sets the Line object of the given trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#setMarker","title":"Trace.setMarker","content":"Trace.setMarker \nsetMarker \n\n Returns a function that sets the Marker object of the given trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#setStackGroup","title":"Trace.setStackGroup","content":"Trace.setStackGroup \nsetStackGroup \n\n Returns a function that sets the stackgroup of the given trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#setXError","title":"Trace.setXError","content":"Trace.setXError \nsetXError \n\n Returns a function that sets the Error object for the x dimension of the given trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#setYError","title":"Trace.setYError","content":"Trace.setYError \nsetYError \n\n Returns a function that sets the Error object for the x dimension of the given trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#setZError","title":"Trace.setZError","content":"Trace.setZError \nsetZError \n\n Returns a function that sets the Error object for the x dimension of the given trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#tryGetTypedMember","title":"Trace.tryGetTypedMember","content":"Trace.tryGetTypedMember \ntryGetTypedMember \n\n Returns Some(dynamic member value) of the trace object\u0027s underlying DynamicObj when a dynamic member with the given name exists, and None otherwise.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#updateColorBar","title":"Trace.updateColorBar","content":"Trace.updateColorBar \nupdateColorBar \n\n Combines the given ColorBar object with the one already present on the trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#updateDomain","title":"Trace.updateDomain","content":"Trace.updateDomain \nupdateDomain \n\n Combines the given Domain object with the one already present on the trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#updateLine","title":"Trace.updateLine","content":"Trace.updateLine \nupdateLine \n\n Combines the given Line object with the one already present on the trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#updateMarker","title":"Trace.updateMarker","content":"Trace.updateMarker \nupdateMarker \n\n Combines the given marker object with the one already present on the trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#updateXError","title":"Trace.updateXError","content":"Trace.updateXError \nupdateXError \n\n Combines the given Error object for the x dimension with the one already present on the trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#updateYError","title":"Trace.updateYError","content":"Trace.updateYError \nupdateYError \n\n Combines the given Error object for the y dimension with the one already present on the trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace.html#updateZError","title":"Trace.updateZError","content":"Trace.updateZError \nupdateZError \n\n Combines the given Error object for the z dimension with the one already present on the trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html","title":"Trace2D","content":"Trace2D \n\n The most commonly-used kind of subplot is a two-dimensional Cartesian subplot. Traces compatible with these subplots\n support xaxis and yaxis attributes whose values must refer to corresponding objects in the layout portion of the figure.\n For example, if xaxis=\u0022x\u0022, and yaxis=\u0022y\u0022 (which is the default) then this trace is drawn on the subplot at the intersection\n of the axes configured under layout.xaxis and layout.yaxis, but if xaxis=\u0022x2\u0022 and yaxis=\u0022y3\u0022 then the trace is drawn at the\n intersection of the axes configured under layout.xaxis2 and layout.yaxis3. Note that attributes such as layout.xaxis and\n layout.xaxis2 etc do not have to be explicitly defined, in which case default values will be inferred. Multiple traces of\n different types can be drawn on the same subplot.\n\n X- and Y-axes support the type attribute, which enables them to represent continuous values (type=\u0022linear\u0022, type=\u0022log\u0022),\n temporal values (type=\u0022date\u0022) or categorical values (type=\u0022category\u0022, type=\u0022multicategory). Axes can also be overlaid on\n top of one another to create dual-axis or multiple-axis charts. 2-d cartesian subplots lend themselves very well to creating\n \u0022small multiples\u0022 figures, also known as facet or trellis plots.\n\n The following trace types are compatible with 2D-cartesian subplots via the xaxis and yaxis attributes:\n\n - scatter-like trace types: scatter and scattergl can be used to draw scatter plots, line plots and curves, time-series plots,\n bubble charts, dot plots and filled areas and also support error bars\n\n - bar, funnel, waterfall: bar-like trace types which can also be used to draw timelines and Gantt charts\n\n - histogram: an aggregating bar-like trace type\n\n - box and violin: 1-dimensional distribution-like trace types\n\n - histogram2D and histogram2Dcontour: 2-dimensional distribution-like density trace types\n\n - image, heatmap and contour: matrix trace types\n\n - ohlc and candlestick: stock-like trace types\n\n - splom: multi-dimensional scatter plots which implicitly refer to many 2-d cartesian subplots at once.\n \nTrace2D.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTrace2D.initBar \ninitBar \nTrace2D.initBoxPlot \ninitBoxPlot \nTrace2D.initCandlestick \ninitCandlestick \nTrace2D.initContour \ninitContour \nTrace2D.initFunnel \ninitFunnel \nTrace2D.initHeatmap \ninitHeatmap \nTrace2D.initHeatmapGL \ninitHeatmapGL \nTrace2D.initHistogram \ninitHistogram \nTrace2D.initHistogram2D \ninitHistogram2D \nTrace2D.initHistogram2DContour \ninitHistogram2DContour \nTrace2D.initImage \ninitImage \nTrace2D.initOHLC \ninitOHLC \nTrace2D.initScatter \ninitScatter \nTrace2D.initScatterGL \ninitScatterGL \nTrace2D.initSplom \ninitSplom \nTrace2D.initViolin \ninitViolin \nTrace2D.initWaterfall \ninitWaterfall"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#\u0060\u0060.ctor\u0060\u0060","title":"Trace2D.\u0060\u0060.ctor\u0060\u0060","content":"Trace2D.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initBar","title":"Trace2D.initBar","content":"Trace2D.initBar \ninitBar \n\ninitializes a trace of type \u0022bar\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initBoxPlot","title":"Trace2D.initBoxPlot","content":"Trace2D.initBoxPlot \ninitBoxPlot \n\ninitializes a trace of type \u0022box\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initCandlestick","title":"Trace2D.initCandlestick","content":"Trace2D.initCandlestick \ninitCandlestick \n\ninitializes a trace of type \u0022candlestick\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initContour","title":"Trace2D.initContour","content":"Trace2D.initContour \ninitContour \n\ninitializes a trace of type \u0022contour\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initFunnel","title":"Trace2D.initFunnel","content":"Trace2D.initFunnel \ninitFunnel \n\ninitializes a trace of type \u0022funnel\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initHeatmap","title":"Trace2D.initHeatmap","content":"Trace2D.initHeatmap \ninitHeatmap \n\ninitializes a trace of type \u0022heatmap\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initHeatmapGL","title":"Trace2D.initHeatmapGL","content":"Trace2D.initHeatmapGL \ninitHeatmapGL \n\ninitializes a trace of type \u0022heatmapgl\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initHistogram","title":"Trace2D.initHistogram","content":"Trace2D.initHistogram \ninitHistogram \n\ninitializes a trace of type \u0022histogram\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initHistogram2D","title":"Trace2D.initHistogram2D","content":"Trace2D.initHistogram2D \ninitHistogram2D \n\ninitializes a trace of type \u0022histogram2D\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initHistogram2DContour","title":"Trace2D.initHistogram2DContour","content":"Trace2D.initHistogram2DContour \ninitHistogram2DContour \n\ninitializes a trace of type \u0022histogram2Dcontour\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initImage","title":"Trace2D.initImage","content":"Trace2D.initImage \ninitImage \n\ninitializes a trace of type \u0022image\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initOHLC","title":"Trace2D.initOHLC","content":"Trace2D.initOHLC \ninitOHLC \n\ninitializes a trace of type \u0022ohlc\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initScatter","title":"Trace2D.initScatter","content":"Trace2D.initScatter \ninitScatter \n\ninitializes a trace of type \u0022scatter\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initScatterGL","title":"Trace2D.initScatterGL","content":"Trace2D.initScatterGL \ninitScatterGL \n\ninitializes a trace of type \u0022scattergl\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initSplom","title":"Trace2D.initSplom","content":"Trace2D.initSplom \ninitSplom \n\ninitializes a trace of type \u0022SPLOM\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initViolin","title":"Trace2D.initViolin","content":"Trace2D.initViolin \ninitViolin \n\ninitializes a trace of type \u0022violin\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2d.html#initWaterfall","title":"Trace2D.initWaterfall","content":"Trace2D.initWaterfall \ninitWaterfall \n\ninitializes a trace of type \u0022waterfall\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html","title":"Trace2DStyle","content":"Trace2DStyle \n\n Create various functions for applying 2D chart styles to traces\n \nTrace2DStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTrace2DStyle.Bar \nBar \nTrace2DStyle.BoxPlot \nBoxPlot \nTrace2DStyle.Candlestick \nCandlestick \nTrace2DStyle.Contour \nContour \nTrace2DStyle.Funnel \nFunnel \nTrace2DStyle.Heatmap \nHeatmap \nTrace2DStyle.Histogram \nHistogram \nTrace2DStyle.Histogram2D \nHistogram2D \nTrace2DStyle.Histogram2DContour \nHistogram2DContour \nTrace2DStyle.Image \nImage \nTrace2DStyle.OHLC \nOHLC \nTrace2DStyle.Scatter \nScatter \nTrace2DStyle.SetAxisAnchor \nSetAxisAnchor \nTrace2DStyle.Splom \nSplom \nTrace2DStyle.Violin \nViolin \nTrace2DStyle.Waterfall \nWaterfall"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#\u0060\u0060.ctor\u0060\u0060","title":"Trace2DStyle.\u0060\u0060.ctor\u0060\u0060","content":"Trace2DStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Bar","title":"Trace2DStyle.Bar","content":"Trace2DStyle.Bar \nBar \n\n Create a function that applies the styles of a bar plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#BoxPlot","title":"Trace2DStyle.BoxPlot","content":"Trace2DStyle.BoxPlot \nBoxPlot \n\n Create a function that applies the styles of a boxplot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Candlestick","title":"Trace2DStyle.Candlestick","content":"Trace2DStyle.Candlestick \nCandlestick \n\n Create a function that applies the styles of a candlestick plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Contour","title":"Trace2DStyle.Contour","content":"Trace2DStyle.Contour \nContour \n\n Create a function that applies the styles of a contour plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Funnel","title":"Trace2DStyle.Funnel","content":"Trace2DStyle.Funnel \nFunnel \n\n Create a function that applies the styles of a funnel plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Heatmap","title":"Trace2DStyle.Heatmap","content":"Trace2DStyle.Heatmap \nHeatmap \n\n Create a function that applies the styles of a heatmap to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Histogram","title":"Trace2DStyle.Histogram","content":"Trace2DStyle.Histogram \nHistogram \n\n Create a function that applies the styles of a histogram plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Histogram2D","title":"Trace2DStyle.Histogram2D","content":"Trace2DStyle.Histogram2D \nHistogram2D \n\n Create a function that applies the styles of a 2d histogram plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Histogram2DContour","title":"Trace2DStyle.Histogram2DContour","content":"Trace2DStyle.Histogram2DContour \nHistogram2DContour \n\n Create a function that applies the styles of a 2d histogram contour plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Image","title":"Trace2DStyle.Image","content":"Trace2DStyle.Image \nImage \n\n Create a function that applies the styles of a Image plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#OHLC","title":"Trace2DStyle.OHLC","content":"Trace2DStyle.OHLC \nOHLC \n\n Create a function that applies the styles of a OHLC plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Scatter","title":"Trace2DStyle.Scatter","content":"Trace2DStyle.Scatter \nScatter \n\n Create a function that applies the styles of a scatter plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#SetAxisAnchor","title":"Trace2DStyle.SetAxisAnchor","content":"Trace2DStyle.SetAxisAnchor \nSetAxisAnchor \n\n Sets the given axis anchor id(s) on a Trace object.\n"},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Splom","title":"Trace2DStyle.Splom","content":"Trace2DStyle.Splom \nSplom \n\n Create a function that applies the styles of a scatter plot matrix (SPLOM) to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Violin","title":"Trace2DStyle.Violin","content":"Trace2DStyle.Violin \nViolin \n\n Create a function that applies the styles of a violin plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-trace2dstyle.html#Waterfall","title":"Trace2DStyle.Waterfall","content":"Trace2DStyle.Waterfall \nWaterfall \n\n Create a function that applies the styles of a waterfall plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html","title":"Trace3D","content":"Trace3D \n\n Traces for 3D subplots, using layout.scene as anchors.\n\n These trace types are compatible with 3D subplots via the scene attribute, which contains special camera controls:\n\n - scatter3d, which can be used to draw individual markers, 3d bubble charts and lines and curves\n\n - surface and mesh: 3d surface trace types\n\n - cone and streamtube: 3d vector field trace types\n \nTrace3D.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTrace3D.initCone \ninitCone \nTrace3D.initIsoSurface \ninitIsoSurface \nTrace3D.initMesh3D \ninitMesh3D \nTrace3D.initScatter3D \ninitScatter3D \nTrace3D.initStreamTube \ninitStreamTube \nTrace3D.initSurface \ninitSurface \nTrace3D.initVolume \ninitVolume"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html#\u0060\u0060.ctor\u0060\u0060","title":"Trace3D.\u0060\u0060.ctor\u0060\u0060","content":"Trace3D.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html#initCone","title":"Trace3D.initCone","content":"Trace3D.initCone \ninitCone \n\ninitializes a trace of type \u0022cone\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html#initIsoSurface","title":"Trace3D.initIsoSurface","content":"Trace3D.initIsoSurface \ninitIsoSurface \n\ninitializes a trace of type \u0022isosurface\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html#initMesh3D","title":"Trace3D.initMesh3D","content":"Trace3D.initMesh3D \ninitMesh3D \n\ninitializes a trace of type \u0022mesh3d\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html#initScatter3D","title":"Trace3D.initScatter3D","content":"Trace3D.initScatter3D \ninitScatter3D \n\ninitializes a trace of type \u0022scatter3d\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html#initStreamTube","title":"Trace3D.initStreamTube","content":"Trace3D.initStreamTube \ninitStreamTube \n\ninitializes a trace of type \u0022streamtube\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html#initSurface","title":"Trace3D.initSurface","content":"Trace3D.initSurface \ninitSurface \n\ninitializes a trace of type \u0022surface\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3d.html#initVolume","title":"Trace3D.initVolume","content":"Trace3D.initVolume \ninitVolume \n\ninitializes a trace of type \u0022volume\u0022 applying the givin trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html","title":"Trace3DStyle","content":"Trace3DStyle \n\n Create various functions for applying 3D chart styles to traces\n \nTrace3DStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTrace3DStyle.Cone \nCone \nTrace3DStyle.IsoSurface \nIsoSurface \nTrace3DStyle.Mesh3D \nMesh3D \nTrace3DStyle.Scatter3D \nScatter3D \nTrace3DStyle.SetScene \nSetScene \nTrace3DStyle.StreamTube \nStreamTube \nTrace3DStyle.Surface \nSurface \nTrace3DStyle.Volume \nVolume"},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#\u0060\u0060.ctor\u0060\u0060","title":"Trace3DStyle.\u0060\u0060.ctor\u0060\u0060","content":"Trace3DStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#Cone","title":"Trace3DStyle.Cone","content":"Trace3DStyle.Cone \nCone \n\n Create a function that applies the styles of a cone chart to the given trace\n "},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#IsoSurface","title":"Trace3DStyle.IsoSurface","content":"Trace3DStyle.IsoSurface \nIsoSurface \n\n Create a function that applies the styles of a isosurface chart to the given trace\n "},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#Mesh3D","title":"Trace3DStyle.Mesh3D","content":"Trace3DStyle.Mesh3D \nMesh3D \n\n Create a function that applies the styles of a mesh3d chart to the given trace\n "},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#Scatter3D","title":"Trace3DStyle.Scatter3D","content":"Trace3DStyle.Scatter3D \nScatter3D \n\n Create a function that applies the styles of a 3D scatter plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#SetScene","title":"Trace3DStyle.SetScene","content":"Trace3DStyle.SetScene \nSetScene \n"},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#StreamTube","title":"Trace3DStyle.StreamTube","content":"Trace3DStyle.StreamTube \nStreamTube \n\n Create a function that applies the styles of a streamtube chart to the given trace\n "},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#Surface","title":"Trace3DStyle.Surface","content":"Trace3DStyle.Surface \nSurface \n\n Create a function that applies the styles of a surface chart to the given trace\n "},{"uri":"https://plotly.net/reference/plotly-net-trace3dstyle.html#Volume","title":"Trace3DStyle.Volume","content":"Trace3DStyle.Volume \nVolume \n\n Create a function that applies the styles of a volume chart to the given trace\n "},{"uri":"https://plotly.net/reference/plotly-net-tracecarpet.html","title":"TraceCarpet","content":"TraceCarpet \n \nTraceCarpet.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTraceCarpet.initCarpet \ninitCarpet \nTraceCarpet.initContourCarpet \ninitContourCarpet \nTraceCarpet.initScatterCarpet \ninitScatterCarpet"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpet.html#\u0060\u0060.ctor\u0060\u0060","title":"TraceCarpet.\u0060\u0060.ctor\u0060\u0060","content":"TraceCarpet.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpet.html#initCarpet","title":"TraceCarpet.initCarpet","content":"TraceCarpet.initCarpet \ninitCarpet \n\ninitializes a trace of type \u0022carpet\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpet.html#initContourCarpet","title":"TraceCarpet.initContourCarpet","content":"TraceCarpet.initContourCarpet \ninitContourCarpet \n\ninitializes a trace of type \u0022contourcarpet\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpet.html#initScatterCarpet","title":"TraceCarpet.initScatterCarpet","content":"TraceCarpet.initScatterCarpet \ninitScatterCarpet \n\ninitializes a trace of type \u0022scattercarpet\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpetstyle.html","title":"TraceCarpetStyle","content":"TraceCarpetStyle \n \nTraceCarpetStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTraceCarpetStyle.Carpet \nCarpet \nTraceCarpetStyle.ContourCarpet \nContourCarpet \nTraceCarpetStyle.ScatterCarpet \nScatterCarpet \nTraceCarpetStyle.SetAxisAnchor \nSetAxisAnchor \nTraceCarpetStyle.SetCarpet \nSetCarpet"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpetstyle.html#\u0060\u0060.ctor\u0060\u0060","title":"TraceCarpetStyle.\u0060\u0060.ctor\u0060\u0060","content":"TraceCarpetStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpetstyle.html#Carpet","title":"TraceCarpetStyle.Carpet","content":"TraceCarpetStyle.Carpet \nCarpet \n\n Create a function that applies the styles of a carpet to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracecarpetstyle.html#ContourCarpet","title":"TraceCarpetStyle.ContourCarpet","content":"TraceCarpetStyle.ContourCarpet \nContourCarpet \n\n Create a function that applies the styles of a carpet contour scatter plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracecarpetstyle.html#ScatterCarpet","title":"TraceCarpetStyle.ScatterCarpet","content":"TraceCarpetStyle.ScatterCarpet \nScatterCarpet \n\n Create a function that applies the styles of a scatter carpet plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracecarpetstyle.html#SetAxisAnchor","title":"TraceCarpetStyle.SetAxisAnchor","content":"TraceCarpetStyle.SetAxisAnchor \nSetAxisAnchor \n\n Sets the given axis anchor id(s) on a Trace object.\n"},{"uri":"https://plotly.net/reference/plotly-net-tracecarpetstyle.html#SetCarpet","title":"TraceCarpetStyle.SetCarpet","content":"TraceCarpetStyle.SetCarpet \nSetCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html","title":"TraceDomain","content":"TraceDomain \n \nTraceDomain.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTraceDomain.initFunnelArea \ninitFunnelArea \nTraceDomain.initIcicle \ninitIcicle \nTraceDomain.initIndicator \ninitIndicator \nTraceDomain.initParallelCategories \ninitParallelCategories \nTraceDomain.initParallelCoord \ninitParallelCoord \nTraceDomain.initPie \ninitPie \nTraceDomain.initSankey \ninitSankey \nTraceDomain.initSunburst \ninitSunburst \nTraceDomain.initTable \ninitTable \nTraceDomain.initTreemap \ninitTreemap"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#\u0060\u0060.ctor\u0060\u0060","title":"TraceDomain.\u0060\u0060.ctor\u0060\u0060","content":"TraceDomain.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initFunnelArea","title":"TraceDomain.initFunnelArea","content":"TraceDomain.initFunnelArea \ninitFunnelArea \n\ninitializes a trace of type \u0022funnelarea\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initIcicle","title":"TraceDomain.initIcicle","content":"TraceDomain.initIcicle \ninitIcicle \n\ninitializes a trace of type \u0022icicle\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initIndicator","title":"TraceDomain.initIndicator","content":"TraceDomain.initIndicator \ninitIndicator \n\ninitializes a trace of type \u0022indicator\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initParallelCategories","title":"TraceDomain.initParallelCategories","content":"TraceDomain.initParallelCategories \ninitParallelCategories \n\ninitializes a trace of type \u0022parcats\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initParallelCoord","title":"TraceDomain.initParallelCoord","content":"TraceDomain.initParallelCoord \ninitParallelCoord \n\ninitializes a trace of type \u0022parcoords\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initPie","title":"TraceDomain.initPie","content":"TraceDomain.initPie \ninitPie \n\ninitializes a trace of type \u0022pie\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initSankey","title":"TraceDomain.initSankey","content":"TraceDomain.initSankey \ninitSankey \n\ninitializes a trace of type \u0022sankey\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initSunburst","title":"TraceDomain.initSunburst","content":"TraceDomain.initSunburst \ninitSunburst \n\ninitializes a trace of type \u0022sunburst\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initTable","title":"TraceDomain.initTable","content":"TraceDomain.initTable \ninitTable \n\ninitializes a trace of type \u0022Table\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomain.html#initTreemap","title":"TraceDomain.initTreemap","content":"TraceDomain.initTreemap \ninitTreemap \n\ninitializes a trace of type \u0022treemap\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html","title":"TraceDomainStyle","content":"TraceDomainStyle \n \nTraceDomainStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTraceDomainStyle.FunnelArea \nFunnelArea \nTraceDomainStyle.Icicle \nIcicle \nTraceDomainStyle.Indicator \nIndicator \nTraceDomainStyle.ParallelCategories \nParallelCategories \nTraceDomainStyle.ParallelCoord \nParallelCoord \nTraceDomainStyle.Pie \nPie \nTraceDomainStyle.Sankey \nSankey \nTraceDomainStyle.SetDomain \nSetDomain \nTraceDomainStyle.Sunburst \nSunburst \nTraceDomainStyle.Table \nTable \nTraceDomainStyle.Treemap \nTreemap"},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#\u0060\u0060.ctor\u0060\u0060","title":"TraceDomainStyle.\u0060\u0060.ctor\u0060\u0060","content":"TraceDomainStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#FunnelArea","title":"TraceDomainStyle.FunnelArea","content":"TraceDomainStyle.FunnelArea \nFunnelArea \n\n Creates a function that applies the styles of a funnel area chart to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#Icicle","title":"TraceDomainStyle.Icicle","content":"TraceDomainStyle.Icicle \nIcicle \n\n Creates a function that applies the styles of an icicle chart to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#Indicator","title":"TraceDomainStyle.Indicator","content":"TraceDomainStyle.Indicator \nIndicator \n\n Creates a function that applies the styles of an indicator to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#ParallelCategories","title":"TraceDomainStyle.ParallelCategories","content":"TraceDomainStyle.ParallelCategories \nParallelCategories \n\n Creates a function that applies the styles of a parallel categories plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#ParallelCoord","title":"TraceDomainStyle.ParallelCoord","content":"TraceDomainStyle.ParallelCoord \nParallelCoord \n\n Creates a function that applies the styles of a parallel coordinates plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#Pie","title":"TraceDomainStyle.Pie","content":"TraceDomainStyle.Pie \nPie \n\n Creates a function that applies the styles of a pie chart to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#Sankey","title":"TraceDomainStyle.Sankey","content":"TraceDomainStyle.Sankey \nSankey \n\n Creates a function that applies the styles of a sankey chart to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#SetDomain","title":"TraceDomainStyle.SetDomain","content":"TraceDomainStyle.SetDomain \nSetDomain \n"},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#Sunburst","title":"TraceDomainStyle.Sunburst","content":"TraceDomainStyle.Sunburst \nSunburst \n\n Creates a function that applies the styles of a sunburst chart to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#Table","title":"TraceDomainStyle.Table","content":"TraceDomainStyle.Table \nTable \n\n Creates a function that applies the styles of a table to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracedomainstyle.html#Treemap","title":"TraceDomainStyle.Treemap","content":"TraceDomainStyle.Treemap \nTreemap \n\n Creates a function that applies the styles of a treemap chart to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracegeo.html","title":"TraceGeo","content":"TraceGeo \n\nThe following trace types support attributes named geo or mapbox, whose values must refer to corresponding objects in the layout\ni.e. geo=\u0022geo2\u0022 etc. Note that attributes such as layout.geo2 and layout.mapbox etc do not have to be explicitly defined, in which\ncase default values will be inferred. Multiple traces of a compatible type can be placed on the same subplot.\n\n The following trace types are compatible with geo subplots via the geo attribute:\n\n - scattergeo, which can be used to draw individual markers, line and curves and filled areas on outline maps\n\n - choropleth: colored polygons on outline maps\n\n The following trace types are compatible with mapbox subplots via the mapbox attribute:\n\n - scattermapbox, which can be used to draw individual markers, lines and curves and filled areas on tile maps\n\n - choroplethmapbox: colored polygons on tile maps\n\n - densitymapbox: density heatmaps on tile maps\n \nTraceGeo.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTraceGeo.initChoroplethMap \ninitChoroplethMap \nTraceGeo.initScatterGeo \ninitScatterGeo"},{"uri":"https://plotly.net/reference/plotly-net-tracegeo.html#\u0060\u0060.ctor\u0060\u0060","title":"TraceGeo.\u0060\u0060.ctor\u0060\u0060","content":"TraceGeo.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-tracegeo.html#initChoroplethMap","title":"TraceGeo.initChoroplethMap","content":"TraceGeo.initChoroplethMap \ninitChoroplethMap \n\ninitializes a trace of type \u0022choropleth\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracegeo.html#initScatterGeo","title":"TraceGeo.initScatterGeo","content":"TraceGeo.initScatterGeo \ninitScatterGeo \n\ninitializes a trace of type \u0022scattergeo\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracegeostyle.html","title":"TraceGeoStyle","content":"TraceGeoStyle \n \nTraceGeoStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTraceGeoStyle.ChoroplethMap \nChoroplethMap \nTraceGeoStyle.ScatterGeo \nScatterGeo \nTraceGeoStyle.SetGeo \nSetGeo"},{"uri":"https://plotly.net/reference/plotly-net-tracegeostyle.html#\u0060\u0060.ctor\u0060\u0060","title":"TraceGeoStyle.\u0060\u0060.ctor\u0060\u0060","content":"TraceGeoStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-tracegeostyle.html#ChoroplethMap","title":"TraceGeoStyle.ChoroplethMap","content":"TraceGeoStyle.ChoroplethMap \nChoroplethMap \n\n Creates a function that applies the styles of a choropleth map to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracegeostyle.html#ScatterGeo","title":"TraceGeoStyle.ScatterGeo","content":"TraceGeoStyle.ScatterGeo \nScatterGeo \n\n Creates a function that applies the styles of a scattergeo plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracegeostyle.html#SetGeo","title":"TraceGeoStyle.SetGeo","content":"TraceGeoStyle.SetGeo \nSetGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html","title":"TraceID","content":"TraceID \n \nTraceID.ofTrace \nofTrace \nTraceID.ofTraces \nofTraces \nTraceID.Cartesian2D \nCartesian2D \nTraceID.Cartesian3D \nCartesian3D \nTraceID.Polar \nPolar \nTraceID.Geo \nGeo \nTraceID.Mapbox \nMapbox \nTraceID.Ternary \nTernary \nTraceID.Carpet \nCarpet \nTraceID.Domain \nDomain \nTraceID.Smith \nSmith \nTraceID.Multi \nMulti"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#ofTrace","title":"TraceID.ofTrace","content":"TraceID.ofTrace \nofTrace \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#ofTraces","title":"TraceID.ofTraces","content":"TraceID.ofTraces \nofTraces \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Cartesian2D","title":"TraceID.Cartesian2D","content":"TraceID.Cartesian2D \nCartesian2D \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Cartesian3D","title":"TraceID.Cartesian3D","content":"TraceID.Cartesian3D \nCartesian3D \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Polar","title":"TraceID.Polar","content":"TraceID.Polar \nPolar \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Geo","title":"TraceID.Geo","content":"TraceID.Geo \nGeo \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Mapbox","title":"TraceID.Mapbox","content":"TraceID.Mapbox \nMapbox \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Ternary","title":"TraceID.Ternary","content":"TraceID.Ternary \nTernary \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Carpet","title":"TraceID.Carpet","content":"TraceID.Carpet \nCarpet \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Domain","title":"TraceID.Domain","content":"TraceID.Domain \nDomain \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Smith","title":"TraceID.Smith","content":"TraceID.Smith \nSmith \n"},{"uri":"https://plotly.net/reference/plotly-net-traceid.html#Multi","title":"TraceID.Multi","content":"TraceID.Multi \nMulti \n"},{"uri":"https://plotly.net/reference/plotly-net-tracemapbox.html","title":"TraceMapbox","content":"TraceMapbox \n\nThe following trace types support attributes named geo or mapbox, whose values must refer to corresponding objects in the layout\ni.e. geo=\u0022geo2\u0022 etc. Note that attributes such as layout.geo2 and layout.mapbox etc do not have to be explicitly defined, in which\ncase default values will be inferred. Multiple traces of a compatible type can be placed on the same subplot.\n\n The following trace types are compatible with geo subplots via the geo attribute:\n\n - scattergeo, which can be used to draw individual markers, line and curves and filled areas on outline maps\n\n - choropleth: colored polygons on outline maps\n\n The following trace types are compatible with mapbox subplots via the mapbox attribute:\n\n - scattermapbox, which can be used to draw individual markers, lines and curves and filled areas on tile maps\n\n - choroplethmapbox: colored polygons on tile maps\n\n - densitymapbox: density heatmaps on tile maps\n \nTraceMapbox.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTraceMapbox.initChoroplethMapbox \ninitChoroplethMapbox \nTraceMapbox.initDensityMapbox \ninitDensityMapbox \nTraceMapbox.initScatterMapbox \ninitScatterMapbox"},{"uri":"https://plotly.net/reference/plotly-net-tracemapbox.html#\u0060\u0060.ctor\u0060\u0060","title":"TraceMapbox.\u0060\u0060.ctor\u0060\u0060","content":"TraceMapbox.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-tracemapbox.html#initChoroplethMapbox","title":"TraceMapbox.initChoroplethMapbox","content":"TraceMapbox.initChoroplethMapbox \ninitChoroplethMapbox \n\ninitializes a trace of type \u0022choroplethmapbox\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemapbox.html#initDensityMapbox","title":"TraceMapbox.initDensityMapbox","content":"TraceMapbox.initDensityMapbox \ninitDensityMapbox \n\ninitializes a trace of type \u0022densitymapbox\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemapbox.html#initScatterMapbox","title":"TraceMapbox.initScatterMapbox","content":"TraceMapbox.initScatterMapbox \ninitScatterMapbox \n\ninitializes a trace of type \u0022scattermapbox\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracemapboxstyle.html","title":"TraceMapboxStyle","content":"TraceMapboxStyle \n \nTraceMapboxStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTraceMapboxStyle.ChoroplethMapbox \nChoroplethMapbox \nTraceMapboxStyle.DensityMapbox \nDensityMapbox \nTraceMapboxStyle.ScatterMapbox \nScatterMapbox \nTraceMapboxStyle.SetMapbox \nSetMapbox"},{"uri":"https://plotly.net/reference/plotly-net-tracemapboxstyle.html#\u0060\u0060.ctor\u0060\u0060","title":"TraceMapboxStyle.\u0060\u0060.ctor\u0060\u0060","content":"TraceMapboxStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-tracemapboxstyle.html#ChoroplethMapbox","title":"TraceMapboxStyle.ChoroplethMapbox","content":"TraceMapboxStyle.ChoroplethMapbox \nChoroplethMapbox \n\n Create a function that applies the styles of a choropleth mapbox plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracemapboxstyle.html#DensityMapbox","title":"TraceMapboxStyle.DensityMapbox","content":"TraceMapboxStyle.DensityMapbox \nDensityMapbox \n\n Create a function that applies the styles of a density mapbox plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracemapboxstyle.html#ScatterMapbox","title":"TraceMapboxStyle.ScatterMapbox","content":"TraceMapboxStyle.ScatterMapbox \nScatterMapbox \n\n Create a function that applies the styles of a mapbox scatter plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracemapboxstyle.html#SetMapbox","title":"TraceMapboxStyle.SetMapbox","content":"TraceMapboxStyle.SetMapbox \nSetMapbox \n"},{"uri":"https://plotly.net/reference/plotly-net-tracepolar.html","title":"TracePolar","content":"TracePolar \n\n Traces for polar subplots, using layout.polar as anchors.\n\n The following trace types are compatible with polar subplots via the polar attribute:\n\n - scatter-like trace types: scatterpolar and scatterpolargl, which can be used to draw individual markers, curves and filled areas (i.e. radar or spider charts)\n\n - barpolar: useful for wind roses and other polar bar charts\n \nTracePolar.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTracePolar.initBarPolar \ninitBarPolar \nTracePolar.initScatterPolar \ninitScatterPolar \nTracePolar.initScatterPolarGL \ninitScatterPolarGL"},{"uri":"https://plotly.net/reference/plotly-net-tracepolar.html#\u0060\u0060.ctor\u0060\u0060","title":"TracePolar.\u0060\u0060.ctor\u0060\u0060","content":"TracePolar.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-tracepolar.html#initBarPolar","title":"TracePolar.initBarPolar","content":"TracePolar.initBarPolar \ninitBarPolar \n\ninitializes a trace of type \u0022barpolar\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracepolar.html#initScatterPolar","title":"TracePolar.initScatterPolar","content":"TracePolar.initScatterPolar \ninitScatterPolar \n\ninitializes a trace of type \u0022scatterpolar\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracepolar.html#initScatterPolarGL","title":"TracePolar.initScatterPolarGL","content":"TracePolar.initScatterPolarGL \ninitScatterPolarGL \n\ninitializes a trace of type \u0022scatterpolargl\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracepolarstyle.html","title":"TracePolarStyle","content":"TracePolarStyle \n\n Create various functions for applying polar chart styles to traces\n \nTracePolarStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTracePolarStyle.BarPolar \nBarPolar \nTracePolarStyle.ScatterPolar \nScatterPolar \nTracePolarStyle.SetPolar \nSetPolar"},{"uri":"https://plotly.net/reference/plotly-net-tracepolarstyle.html#\u0060\u0060.ctor\u0060\u0060","title":"TracePolarStyle.\u0060\u0060.ctor\u0060\u0060","content":"TracePolarStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-tracepolarstyle.html#BarPolar","title":"TracePolarStyle.BarPolar","content":"TracePolarStyle.BarPolar \nBarPolar \n\n Create a function that applies the styles of a polar bar plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracepolarstyle.html#ScatterPolar","title":"TracePolarStyle.ScatterPolar","content":"TracePolarStyle.ScatterPolar \nScatterPolar \n\n Create a function that applies the styles of a polar scatter plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracepolarstyle.html#SetPolar","title":"TracePolarStyle.SetPolar","content":"TracePolarStyle.SetPolar \nSetPolar \n"},{"uri":"https://plotly.net/reference/plotly-net-tracesmith.html","title":"TraceSmith","content":"TraceSmith \n \nTraceSmith.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTraceSmith.initScatterSmith \ninitScatterSmith"},{"uri":"https://plotly.net/reference/plotly-net-tracesmith.html#\u0060\u0060.ctor\u0060\u0060","title":"TraceSmith.\u0060\u0060.ctor\u0060\u0060","content":"TraceSmith.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-tracesmith.html#initScatterSmith","title":"TraceSmith.initScatterSmith","content":"TraceSmith.initScatterSmith \ninitScatterSmith \n\ninitializes a trace of type \u0022scattersmith\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-tracesmithstyle.html","title":"TraceSmithStyle","content":"TraceSmithStyle \n \nTraceSmithStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTraceSmithStyle.ScatterSmith \nScatterSmith \nTraceSmithStyle.SetSmith \nSetSmith"},{"uri":"https://plotly.net/reference/plotly-net-tracesmithstyle.html#\u0060\u0060.ctor\u0060\u0060","title":"TraceSmithStyle.\u0060\u0060.ctor\u0060\u0060","content":"TraceSmithStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-tracesmithstyle.html#ScatterSmith","title":"TraceSmithStyle.ScatterSmith","content":"TraceSmithStyle.ScatterSmith \nScatterSmith \n\n Create a function that applies the styles of a scatter smith plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-tracesmithstyle.html#SetSmith","title":"TraceSmithStyle.SetSmith","content":"TraceSmithStyle.SetSmith \nSetSmith \n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html","title":"TraceStyle","content":"TraceStyle \n\n Contains general, visualization-unspecific functions to style Trace objects.\n\n These functions are used internally to style traces of Chart objects.\n Users should usually be pointed to the API layer provided by the \u0060Chart\u0060 module/object first.\n\n Visualization-specific equivalents are suffixed with the respective trace subtype, e.g. \u0060TraceStyle2D\u0060\n \nTraceStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTraceStyle.Domain \nDomain \nTraceStyle.Line \nLine \nTraceStyle.Marker \nMarker \nTraceStyle.Selection \nSelection \nTraceStyle.TextLabel \nTextLabel \nTraceStyle.TraceInfo \nTraceInfo \nTraceStyle.XError \nXError \nTraceStyle.YError \nYError \nTraceStyle.ZError \nZError"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#\u0060\u0060.ctor\u0060\u0060","title":"TraceStyle.\u0060\u0060.ctor\u0060\u0060","content":"TraceStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#Domain","title":"TraceStyle.Domain","content":"TraceStyle.Domain \nDomain \n\n Returns a function that applies the given styles to the trace\u0027s domain object.\n \u003C/summary\u003E\n"},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#Line","title":"TraceStyle.Line","content":"TraceStyle.Line \nLine \n\n Returns a function that applies the given styles to the trace\u0027s line object. Overwrites attributes with the same name that are already set.\n "},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#Marker","title":"TraceStyle.Marker","content":"TraceStyle.Marker \nMarker \n\n Returns a function that applies the given styles to the trace\u0027s marker object. Overwrites attributes with the same name that are already set.\n "},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#Selection","title":"TraceStyle.Selection","content":"TraceStyle.Selection \nSelection \n\n Returns a function that applies the given styles to the trace\u0027s selection.\n "},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#TextLabel","title":"TraceStyle.TextLabel","content":"TraceStyle.TextLabel \nTextLabel \n\n Returns a function that applies the given styles to the trace\u0027s text items.\n "},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#TraceInfo","title":"TraceStyle.TraceInfo","content":"TraceStyle.TraceInfo \nTraceInfo \n\n Sets trace information on the given trace.\n "},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#XError","title":"TraceStyle.XError","content":"TraceStyle.XError \nXError \n\n Returns a function that applies the given styles to the trace\u0027s Error object for the x dimension. Overwrites attributes with the same name that are already set.\n "},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#YError","title":"TraceStyle.YError","content":"TraceStyle.YError \nYError \n\n Returns a function that applies the given styles to the trace\u0027s Error object for the y dimension. Overwrites attributes with the same name that are already set.\n "},{"uri":"https://plotly.net/reference/plotly-net-tracestyle.html#ZError","title":"TraceStyle.ZError","content":"TraceStyle.ZError \nZError \n\n Returns a function that applies the given styles to the trace\u0027s Error object for the z dimension.\n "},{"uri":"https://plotly.net/reference/plotly-net-traceternary.html","title":"TraceTernary","content":"TraceTernary \n \nTraceTernary.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTraceTernary.initScatterTernary \ninitScatterTernary"},{"uri":"https://plotly.net/reference/plotly-net-traceternary.html#\u0060\u0060.ctor\u0060\u0060","title":"TraceTernary.\u0060\u0060.ctor\u0060\u0060","content":"TraceTernary.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceternary.html#initScatterTernary","title":"TraceTernary.initScatterTernary","content":"TraceTernary.initScatterTernary \ninitScatterTernary \n\ninitializes a trace of type \u0022scatterternary\u0022 applying the given trace styling function\n"},{"uri":"https://plotly.net/reference/plotly-net-traceternarystyle.html","title":"TraceTernaryStyle","content":"TraceTernaryStyle \n \nTraceTernaryStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTraceTernaryStyle.ScatterTernary \nScatterTernary \nTraceTernaryStyle.SetTernary \nSetTernary"},{"uri":"https://plotly.net/reference/plotly-net-traceternarystyle.html#\u0060\u0060.ctor\u0060\u0060","title":"TraceTernaryStyle.\u0060\u0060.ctor\u0060\u0060","content":"TraceTernaryStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceternarystyle.html#ScatterTernary","title":"TraceTernaryStyle.ScatterTernary","content":"TraceTernaryStyle.ScatterTernary \nScatterTernary \n\n Create a function that applies the styles of a ternary scatter plot to a Trace object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceternarystyle.html#SetTernary","title":"TraceTernaryStyle.SetTernary","content":"TraceTernaryStyle.SetTernary \nSetTernary \n"},{"uri":"https://plotly.net/reference/plotly-net-configobjects-edits.html","title":"Edits","content":"Edits \n\n The Edits object holds information about which elements of the chart are editable.\n \nEdits.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nEdits.init \ninit \nEdits.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-configobjects-edits.html#\u0060\u0060.ctor\u0060\u0060","title":"Edits.\u0060\u0060.ctor\u0060\u0060","content":"Edits.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-configobjects-edits.html#init","title":"Edits.init","content":"Edits.init \ninit \n\n Returns a new Edits Object with the given styling.\n "},{"uri":"https://plotly.net/reference/plotly-net-configobjects-edits.html#style","title":"Edits.style","content":"Edits.style \nstyle \n\n Returns a function that apllioes the given styles to an Edits Object.\n "},{"uri":"https://plotly.net/reference/plotly-net-configobjects-toimagebuttonoptions.html","title":"ToImageButtonOptions","content":"ToImageButtonOptions \n \nToImageButtonOptions.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nToImageButtonOptions.init \ninit \nToImageButtonOptions.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-configobjects-toimagebuttonoptions.html#\u0060\u0060.ctor\u0060\u0060","title":"ToImageButtonOptions.\u0060\u0060.ctor\u0060\u0060","content":"ToImageButtonOptions.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-configobjects-toimagebuttonoptions.html#init","title":"ToImageButtonOptions.init","content":"ToImageButtonOptions.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-configobjects-toimagebuttonoptions.html#style","title":"ToImageButtonOptions.style","content":"ToImageButtonOptions.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-asynchelper.html","title":"AsyncHelper","content":"AsyncHelper \n \nAsyncHelper.runSync \nrunSync \nAsyncHelper.taskSync \ntaskSync \nAsyncHelper.taskSyncUnit \ntaskSyncUnit"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-asynchelper.html#runSync","title":"AsyncHelper.runSync","content":"AsyncHelper.runSync \nrunSync \n"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-asynchelper.html#taskSync","title":"AsyncHelper.taskSync","content":"AsyncHelper.taskSync \ntaskSync \n"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-asynchelper.html#taskSyncUnit","title":"AsyncHelper.taskSyncUnit","content":"AsyncHelper.taskSyncUnit \ntaskSyncUnit \n"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html","title":"ChartExtensions","content":"ChartExtensions \n\n Extensions methods from Plotly.NET.ImageExport for the Chart module, supporting the fluent pipeline style\n \nChartExtensions.toBase64JPGStringAsync \ntoBase64JPGStringAsync \nChartExtensions.toBase64JPGString \ntoBase64JPGString \nChartExtensions.saveJPGAsync \nsaveJPGAsync \nChartExtensions.saveJPG \nsaveJPG \nChartExtensions.toBase64PNGStringAsync \ntoBase64PNGStringAsync \nChartExtensions.toBase64PNGString \ntoBase64PNGString \nChartExtensions.savePNGAsync \nsavePNGAsync \nChartExtensions.savePNG \nsavePNG \nChartExtensions.toSVGStringAsync \ntoSVGStringAsync \nChartExtensions.toSVGString \ntoSVGString \nChartExtensions.saveSVGAsync \nsaveSVGAsync \nChartExtensions.saveSVG \nsaveSVG"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#toBase64JPGStringAsync","title":"ChartExtensions.toBase64JPGStringAsync","content":"ChartExtensions.toBase64JPGStringAsync \ntoBase64JPGStringAsync \n\n Returns an async function that converts a GenericChart to a base64 encoded JPG string\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#toBase64JPGString","title":"ChartExtensions.toBase64JPGString","content":"ChartExtensions.toBase64JPGString \ntoBase64JPGString \n\n Returns a function that converts a GenericChart to a base64 encoded JPG string\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#saveJPGAsync","title":"ChartExtensions.saveJPGAsync","content":"ChartExtensions.saveJPGAsync \nsaveJPGAsync \n\n Returns an async function that saves a GenericChart as JPG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#saveJPG","title":"ChartExtensions.saveJPG","content":"ChartExtensions.saveJPG \nsaveJPG \n\n Returns a function that saves a GenericChart as JPG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#toBase64PNGStringAsync","title":"ChartExtensions.toBase64PNGStringAsync","content":"ChartExtensions.toBase64PNGStringAsync \ntoBase64PNGStringAsync \n\n Returns an async function that converts a GenericChart to a base64 encoded PNG string\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#toBase64PNGString","title":"ChartExtensions.toBase64PNGString","content":"ChartExtensions.toBase64PNGString \ntoBase64PNGString \n\n Returns a function that converts a GenericChart to a base64 encoded PNG string\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#savePNGAsync","title":"ChartExtensions.savePNGAsync","content":"ChartExtensions.savePNGAsync \nsavePNGAsync \n\n Returns an async function that saves a GenericChart as PNG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#savePNG","title":"ChartExtensions.savePNG","content":"ChartExtensions.savePNG \nsavePNG \n\n Returns a function that saves a GenericChart as PNG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#toSVGStringAsync","title":"ChartExtensions.toSVGStringAsync","content":"ChartExtensions.toSVGStringAsync \ntoSVGStringAsync \n\n Returns an async function that converts a GenericChart to a SVG string\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#toSVGString","title":"ChartExtensions.toSVGString","content":"ChartExtensions.toSVGString \ntoSVGString \n\n Returns a function that converts a GenericChart to a SVG string\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#saveSVGAsync","title":"ChartExtensions.saveSVGAsync","content":"ChartExtensions.saveSVGAsync \nsaveSVGAsync \n\n Returns an async function that saves a GenericChart as SVG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-chartextensions.html#saveSVG","title":"ChartExtensions.saveSVG","content":"ChartExtensions.saveSVG \nsaveSVG \n\n Returns a function that saves a GenericChart as SVG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html","title":"GenericChartExtensions","content":"GenericChartExtensions \nExtension methods for providing a Plotly.NET.ImageExport fluent interface pattern for C# \nGenericChartExtensions.ToBase64JPGStringAsync \nToBase64JPGStringAsync \nGenericChartExtensions.ToBase64JPGString \nToBase64JPGString \nGenericChartExtensions.SaveJPGAsync \nSaveJPGAsync \nGenericChartExtensions.SaveJPG \nSaveJPG \nGenericChartExtensions.ToBase64PNGStringAsync \nToBase64PNGStringAsync \nGenericChartExtensions.ToBase64PNGString \nToBase64PNGString \nGenericChartExtensions.SavePNGAsync \nSavePNGAsync \nGenericChartExtensions.SavePNG \nSavePNG \nGenericChartExtensions.ToSVGStringAsync \nToSVGStringAsync \nGenericChartExtensions.ToSVGString \nToSVGString \nGenericChartExtensions.SaveSVGAsync \nSaveSVGAsync \nGenericChartExtensions.SaveSVG \nSaveSVG"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#ToBase64JPGStringAsync","title":"GenericChartExtensions.ToBase64JPGStringAsync","content":"GenericChartExtensions.ToBase64JPGStringAsync \nToBase64JPGStringAsync \n\n Converts the GenericChart to a base64 encoded JPG string (async)\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#ToBase64JPGString","title":"GenericChartExtensions.ToBase64JPGString","content":"GenericChartExtensions.ToBase64JPGString \nToBase64JPGString \n\n Converts the GenericChart to a base64 encoded JPG string\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#SaveJPGAsync","title":"GenericChartExtensions.SaveJPGAsync","content":"GenericChartExtensions.SaveJPGAsync \nSaveJPGAsync \n\n Saves the GenericChart as JPG image (async)\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#SaveJPG","title":"GenericChartExtensions.SaveJPG","content":"GenericChartExtensions.SaveJPG \nSaveJPG \n\n Saves the GenericChart as JPG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#ToBase64PNGStringAsync","title":"GenericChartExtensions.ToBase64PNGStringAsync","content":"GenericChartExtensions.ToBase64PNGStringAsync \nToBase64PNGStringAsync \n\n Converts the GenericChart to a base64 encoded PNG string (async)\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#ToBase64PNGString","title":"GenericChartExtensions.ToBase64PNGString","content":"GenericChartExtensions.ToBase64PNGString \nToBase64PNGString \n\n Converts the GenericChart to a base64 encoded PNG string\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#SavePNGAsync","title":"GenericChartExtensions.SavePNGAsync","content":"GenericChartExtensions.SavePNGAsync \nSavePNGAsync \n\n Saves the GenericChart as PNG image (async)\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#SavePNG","title":"GenericChartExtensions.SavePNG","content":"GenericChartExtensions.SavePNG \nSavePNG \n\n Saves the GenericChart as PNG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#ToSVGStringAsync","title":"GenericChartExtensions.ToSVGStringAsync","content":"GenericChartExtensions.ToSVGStringAsync \nToSVGStringAsync \n\n Converts the GenericChart to a SVG string (async)\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#ToSVGString","title":"GenericChartExtensions.ToSVGString","content":"GenericChartExtensions.ToSVGString \nToSVGString \n\n Converts the GenericChart to a SVG string\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#SaveSVGAsync","title":"GenericChartExtensions.SaveSVGAsync","content":"GenericChartExtensions.SaveSVGAsync \nSaveSVGAsync \n\n Saves the GenericChart as SVG image (async)\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-genericchartextensions.html#SaveSVG","title":"GenericChartExtensions.SaveSVG","content":"GenericChartExtensions.SaveSVG \nSaveSVG \n\n Saves the GenericChart as SVG image\n "},{"uri":"https://plotly.net/reference/plotly-net-imageexport-puppeteersharprendereroptions.html","title":"PuppeteerSharpRendererOptions","content":"PuppeteerSharpRendererOptions \n \nPuppeteerSharpRendererOptions.launchOptions \nlaunchOptions \nPuppeteerSharpRendererOptions.localBrowserExecutablePath \nlocalBrowserExecutablePath"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-puppeteersharprendereroptions.html#launchOptions","title":"PuppeteerSharpRendererOptions.launchOptions","content":"PuppeteerSharpRendererOptions.launchOptions \nlaunchOptions \n"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-puppeteersharprendereroptions.html#localBrowserExecutablePath","title":"PuppeteerSharpRendererOptions.localBrowserExecutablePath","content":"PuppeteerSharpRendererOptions.localBrowserExecutablePath \nlocalBrowserExecutablePath \n"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-exportengine.html","title":"ExportEngine","content":"ExportEngine \nDU containing the available static image export engines for Plotly.NET \nExportEngine.getEngine \ngetEngine \nExportEngine.PuppeteerSharp \nPuppeteerSharp"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-exportengine.html#getEngine","title":"ExportEngine.getEngine","content":"ExportEngine.getEngine \ngetEngine \n"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-exportengine.html#PuppeteerSharp","title":"ExportEngine.PuppeteerSharp","content":"ExportEngine.PuppeteerSharp \nPuppeteerSharp \nUsing this engine will use PuppeteerSharp with a Chromium headless browser to render GenericCharts from Plotly.NET."},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html","title":"IGenericChartRenderer","content":"IGenericChartRenderer \n\n Interface for Engines that render Plotly.NET\u0027s GenericChart to static images.\n  \nIGenericChartRenderer.RenderJPG \nRenderJPG \nIGenericChartRenderer.RenderJPGAsync \nRenderJPGAsync \nIGenericChartRenderer.RenderPNG \nRenderPNG \nIGenericChartRenderer.RenderPNGAsync \nRenderPNGAsync \nIGenericChartRenderer.RenderSVG \nRenderSVG \nIGenericChartRenderer.RenderSVGAsync \nRenderSVGAsync \nIGenericChartRenderer.SaveJPG \nSaveJPG \nIGenericChartRenderer.SaveJPGAsync \nSaveJPGAsync \nIGenericChartRenderer.SavePNG \nSavePNG \nIGenericChartRenderer.SavePNGAsync \nSavePNGAsync \nIGenericChartRenderer.SaveSVG \nSaveSVG \nIGenericChartRenderer.SaveSVGAsync \nSaveSVGAsync"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#RenderJPG","title":"IGenericChartRenderer.RenderJPG","content":"IGenericChartRenderer.RenderJPG \nRenderJPG \nFunction that returns a base64 encoded string representing the input chart as JPG file with the given width and height"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#RenderJPGAsync","title":"IGenericChartRenderer.RenderJPGAsync","content":"IGenericChartRenderer.RenderJPGAsync \nRenderJPGAsync \nAsync function that returns a base64 encoded string representing the input chart as JPG file with the given width and height"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#RenderPNG","title":"IGenericChartRenderer.RenderPNG","content":"IGenericChartRenderer.RenderPNG \nRenderPNG \nFunction that returns a base64 encoded string representing the input chart as PNG file with the given width and height"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#RenderPNGAsync","title":"IGenericChartRenderer.RenderPNGAsync","content":"IGenericChartRenderer.RenderPNGAsync \nRenderPNGAsync \nAsync function that returns a base64 encoded string representing the input chart as PNG file with the given width and height"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#RenderSVG","title":"IGenericChartRenderer.RenderSVG","content":"IGenericChartRenderer.RenderSVG \nRenderSVG \nFunction that returns string representing the input chart as SVG file with the given width and height"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#RenderSVGAsync","title":"IGenericChartRenderer.RenderSVGAsync","content":"IGenericChartRenderer.RenderSVGAsync \nRenderSVGAsync \nAsync function that returns a string representing the input chart as SVG file with the given width and height"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#SaveJPG","title":"IGenericChartRenderer.SaveJPG","content":"IGenericChartRenderer.SaveJPG \nSaveJPG \nFunction that saves the input chart as JPG file with the given width and height at the given path"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#SaveJPGAsync","title":"IGenericChartRenderer.SaveJPGAsync","content":"IGenericChartRenderer.SaveJPGAsync \nSaveJPGAsync \nAsync function that saves the input chart as JPG file with the given width and height at the given path"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#SavePNG","title":"IGenericChartRenderer.SavePNG","content":"IGenericChartRenderer.SavePNG \nSavePNG \nFunction that saves the input chart as PNG file with the given width and height at the given path"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#SavePNGAsync","title":"IGenericChartRenderer.SavePNGAsync","content":"IGenericChartRenderer.SavePNGAsync \nSavePNGAsync \nAsync function that saves the input chart as PNG file with the given width and height at the given path"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#SaveSVG","title":"IGenericChartRenderer.SaveSVG","content":"IGenericChartRenderer.SaveSVG \nSaveSVG \nFunction that saves the input chart as SVG file with the given width and height at the given path"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-igenericchartrenderer.html#SaveSVGAsync","title":"IGenericChartRenderer.SaveSVGAsync","content":"IGenericChartRenderer.SaveSVGAsync \nSaveSVGAsync \nAsync function that saves the input chart as SVG file with the given width and height at the given path"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-puppeteersharprenderer.html","title":"PuppeteerSharpRenderer","content":"PuppeteerSharpRenderer \n \nPuppeteerSharpRenderer.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"https://plotly.net/reference/plotly-net-imageexport-puppeteersharprenderer.html#\u0060\u0060.ctor\u0060\u0060","title":"PuppeteerSharpRenderer.\u0060\u0060.ctor\u0060\u0060","content":"PuppeteerSharpRenderer.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-interactive-formatters.html","title":"Formatters","content":"Formatters \n \nFormatters.toInteractiveHTML \ntoInteractiveHTML"},{"uri":"https://plotly.net/reference/plotly-net-interactive-formatters.html#toInteractiveHTML","title":"Formatters.toInteractiveHTML","content":"Formatters.toInteractiveHTML \ntoInteractiveHTML \n\n Converts a GenericChart to it\u0027s HTML representation and embeds it in a div element, together with the chart description for display in notebook environments.\n"},{"uri":"https://plotly.net/reference/plotly-net-interactive-formatterkernelextension.html","title":"FormatterKernelExtension","content":"FormatterKernelExtension \n \nFormatterKernelExtension.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"https://plotly.net/reference/plotly-net-interactive-formatterkernelextension.html#\u0060\u0060.ctor\u0060\u0060","title":"FormatterKernelExtension.\u0060\u0060.ctor\u0060\u0060","content":"FormatterKernelExtension.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-activeselection.html","title":"ActiveSelection","content":"ActiveSelection \n \nActiveSelection.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nActiveSelection.init \ninit \nActiveSelection.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-activeselection.html#\u0060\u0060.ctor\u0060\u0060","title":"ActiveSelection.\u0060\u0060.ctor\u0060\u0060","content":"ActiveSelection.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-activeselection.html#init","title":"ActiveSelection.init","content":"ActiveSelection.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-activeselection.html#style","title":"ActiveSelection.style","content":"ActiveSelection.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-activeshape.html","title":"ActiveShape","content":"ActiveShape \n \nActiveShape.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nActiveShape.init \ninit \nActiveShape.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-activeshape.html#\u0060\u0060.ctor\u0060\u0060","title":"ActiveShape.\u0060\u0060.ctor\u0060\u0060","content":"ActiveShape.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-activeshape.html#init","title":"ActiveShape.init","content":"ActiveShape.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-activeshape.html#style","title":"ActiveShape.style","content":"ActiveShape.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-angularaxis.html","title":"AngularAxis","content":"AngularAxis \nAngular axes can be used as a scale for the angular coordinates in polar plots. \nAngularAxis.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nAngularAxis.init \ninit \nAngularAxis.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-angularaxis.html#\u0060\u0060.ctor\u0060\u0060","title":"AngularAxis.\u0060\u0060.ctor\u0060\u0060","content":"AngularAxis.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-angularaxis.html#init","title":"AngularAxis.init","content":"AngularAxis.init \ninit \n\n Initialize an AngularAxis object that can be used as a angular scale for polar coordinates.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-angularaxis.html#style","title":"AngularAxis.style","content":"AngularAxis.style \nstyle \n\n Creates a function that applies the given style parameters to a AngularAxis object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-annotation.html","title":"Annotation","content":"Annotation \n\n Text annotations inside a plot\n \nAnnotation.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nAnnotation.init \ninit \nAnnotation.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-annotation.html#\u0060\u0060.ctor\u0060\u0060","title":"Annotation.\u0060\u0060.ctor\u0060\u0060","content":"Annotation.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-annotation.html#init","title":"Annotation.init","content":"Annotation.init \ninit \n\n Init Annotation type\n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-annotation.html#style","title":"Annotation.style","content":"Annotation.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-aspectratio.html","title":"AspectRatio","content":"AspectRatio \n \nAspectRatio.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nAspectRatio.init \ninit \nAspectRatio.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-aspectratio.html#\u0060\u0060.ctor\u0060\u0060","title":"AspectRatio.\u0060\u0060.ctor\u0060\u0060","content":"AspectRatio.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-aspectratio.html#init","title":"AspectRatio.init","content":"AspectRatio.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-aspectratio.html#style","title":"AspectRatio.style","content":"AspectRatio.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-button.html","title":"Button","content":"Button \n\n Dimensions type inherits from dynamic object\n \nButton.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nButton.init \ninit \nButton.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-button.html#\u0060\u0060.ctor\u0060\u0060","title":"Button.\u0060\u0060.ctor\u0060\u0060","content":"Button.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-button.html#init","title":"Button.init","content":"Button.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-button.html#style","title":"Button.style","content":"Button.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-camera.html","title":"Camera","content":"Camera \n \nCamera.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCamera.init \ninit \nCamera.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-camera.html#\u0060\u0060.ctor\u0060\u0060","title":"Camera.\u0060\u0060.ctor\u0060\u0060","content":"Camera.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-camera.html#init","title":"Camera.init","content":"Camera.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-camera.html#style","title":"Camera.style","content":"Camera.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-cameracenter.html","title":"CameraCenter","content":"CameraCenter \n \nCameraCenter.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCameraCenter.init \ninit \nCameraCenter.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-cameracenter.html#\u0060\u0060.ctor\u0060\u0060","title":"CameraCenter.\u0060\u0060.ctor\u0060\u0060","content":"CameraCenter.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-cameracenter.html#init","title":"CameraCenter.init","content":"CameraCenter.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-cameracenter.html#style","title":"CameraCenter.style","content":"CameraCenter.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-cameraeye.html","title":"CameraEye","content":"CameraEye \n \nCameraEye.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCameraEye.init \ninit \nCameraEye.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-cameraeye.html#\u0060\u0060.ctor\u0060\u0060","title":"CameraEye.\u0060\u0060.ctor\u0060\u0060","content":"CameraEye.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-cameraeye.html#init","title":"CameraEye.init","content":"CameraEye.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-cameraeye.html#style","title":"CameraEye.style","content":"CameraEye.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-cameraprojection.html","title":"CameraProjection","content":"CameraProjection \n \nCameraProjection.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCameraProjection.init \ninit \nCameraProjection.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-cameraprojection.html#\u0060\u0060.ctor\u0060\u0060","title":"CameraProjection.\u0060\u0060.ctor\u0060\u0060","content":"CameraProjection.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-cameraprojection.html#init","title":"CameraProjection.init","content":"CameraProjection.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-cameraprojection.html#style","title":"CameraProjection.style","content":"CameraProjection.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-cameraup.html","title":"CameraUp","content":"CameraUp \n \nCameraUp.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCameraUp.init \ninit \nCameraUp.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-cameraup.html#\u0060\u0060.ctor\u0060\u0060","title":"CameraUp.\u0060\u0060.ctor\u0060\u0060","content":"CameraUp.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-cameraup.html#init","title":"CameraUp.init","content":"CameraUp.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-cameraup.html#style","title":"CameraUp.style","content":"CameraUp.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-coloraxis.html","title":"ColorAxis","content":"ColorAxis \n \nColorAxis.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nColorAxis.init \ninit \nColorAxis.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-coloraxis.html#\u0060\u0060.ctor\u0060\u0060","title":"ColorAxis.\u0060\u0060.ctor\u0060\u0060","content":"ColorAxis.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-coloraxis.html#init","title":"ColorAxis.init","content":"ColorAxis.init \ninit \n\n Initializes a ColorAxis object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-coloraxis.html#style","title":"ColorAxis.style","content":"ColorAxis.style \nstyle \n\n Creates a function that applies the given style parameters to a ColorAxis object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-defaultcolorscales.html","title":"DefaultColorScales","content":"DefaultColorScales \n \nDefaultColorScales.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDefaultColorScales.init \ninit \nDefaultColorScales.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-defaultcolorscales.html#\u0060\u0060.ctor\u0060\u0060","title":"DefaultColorScales.\u0060\u0060.ctor\u0060\u0060","content":"DefaultColorScales.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-defaultcolorscales.html#init","title":"DefaultColorScales.init","content":"DefaultColorScales.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-defaultcolorscales.html#style","title":"DefaultColorScales.style","content":"DefaultColorScales.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-domain.html","title":"Domain","content":"Domain \n\n Dimensions type inherits from dynamic object\n \nDomain.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDomain.init \ninit \nDomain.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-domain.html#\u0060\u0060.ctor\u0060\u0060","title":"Domain.\u0060\u0060.ctor\u0060\u0060","content":"Domain.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-domain.html#init","title":"Domain.init","content":"Domain.init \ninit \n\n Initialized Dimensions object\n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-domain.html#style","title":"Domain.style","content":"Domain.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geo.html","title":"Geo","content":"Geo \nDetermines the style of the map shown in geo traces \nGeo.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nGeo.init \ninit \nGeo.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geo.html#\u0060\u0060.ctor\u0060\u0060","title":"Geo.\u0060\u0060.ctor\u0060\u0060","content":"Geo.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geo.html#init","title":"Geo.init","content":"Geo.init \ninit \nInitialize a Geo object that determines the style of the map shown in geo traces"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geo.html#style","title":"Geo.style","content":"Geo.style \nstyle \nCreate a function that applies the given style parameters to a Geo object."},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geoprojection.html","title":"GeoProjection","content":"GeoProjection \nDetermines the map projection in geo traces. \nGeoProjection.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nGeoProjection.init \ninit \nGeoProjection.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geoprojection.html#\u0060\u0060.ctor\u0060\u0060","title":"GeoProjection.\u0060\u0060.ctor\u0060\u0060","content":"GeoProjection.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geoprojection.html#init","title":"GeoProjection.init","content":"GeoProjection.init \ninit \nInitialize a GeoProjection object that determines the map projection in geo traces."},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geoprojection.html#style","title":"GeoProjection.style","content":"GeoProjection.style \nstyle \nCreate a function that applies the given style parameters to a GeoProjection object."},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geoprojectionrotation.html","title":"GeoProjectionRotation","content":"GeoProjectionRotation \nDetermines Map rotation in GeoProjections \nGeoProjectionRotation.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nGeoProjectionRotation.init \ninit \nGeoProjectionRotation.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geoprojectionrotation.html#\u0060\u0060.ctor\u0060\u0060","title":"GeoProjectionRotation.\u0060\u0060.ctor\u0060\u0060","content":"GeoProjectionRotation.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geoprojectionrotation.html#init","title":"GeoProjectionRotation.init","content":"GeoProjectionRotation.init \ninit \nInitialize a GeoProjectionRotation object that determines Map rotation in GeoProjections"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-geoprojectionrotation.html#style","title":"GeoProjectionRotation.style","content":"GeoProjectionRotation.style \nstyle \nCreate a function that applies the given style parameters to a GeoProjectionRotation object"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-hoverlabel.html","title":"Hoverlabel","content":"Hoverlabel \n\n Hoverlabels that appear while hovering over elements on charts\n \nHoverlabel.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nHoverlabel.init \ninit \nHoverlabel.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-hoverlabel.html#\u0060\u0060.ctor\u0060\u0060","title":"Hoverlabel.\u0060\u0060.ctor\u0060\u0060","content":"Hoverlabel.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-hoverlabel.html#init","title":"Hoverlabel.init","content":"Hoverlabel.init \ninit \n\n Returns a new Hoverlabel object with the given styles\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-hoverlabel.html#style","title":"Hoverlabel.style","content":"Hoverlabel.style \nstyle \n\n Returns a function that applies the given styles to a Legend object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-imaginaryaxis.html","title":"ImaginaryAxis","content":"ImaginaryAxis \nAngular axes can be used as a scale for the angular coordinates in polar plots. \nImaginaryAxis.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nImaginaryAxis.init \ninit \nImaginaryAxis.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-imaginaryaxis.html#\u0060\u0060.ctor\u0060\u0060","title":"ImaginaryAxis.\u0060\u0060.ctor\u0060\u0060","content":"ImaginaryAxis.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-imaginaryaxis.html#init","title":"ImaginaryAxis.init","content":"ImaginaryAxis.init \ninit \n\n Initialize an ImaginaryAxis object that can be used as a imaginary scale for smith coordinates.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-imaginaryaxis.html#style","title":"ImaginaryAxis.style","content":"ImaginaryAxis.style \nstyle \n\n Creates a function that applies the given style parameters to a ImaginaryAxis object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-layoutgrid.html","title":"LayoutGrid","content":"LayoutGrid \n\n A plot grid that can contain subplots with shared axes.\n \nLayoutGrid.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nLayoutGrid.init \ninit \nLayoutGrid.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-layoutgrid.html#\u0060\u0060.ctor\u0060\u0060","title":"LayoutGrid.\u0060\u0060.ctor\u0060\u0060","content":"LayoutGrid.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-layoutgrid.html#init","title":"LayoutGrid.init","content":"LayoutGrid.init \ninit \nInitializes a LayoutGrid object"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-layoutgrid.html#style","title":"LayoutGrid.style","content":"LayoutGrid.style \nstyle \nReturns a function that applies the given styles to a LayoutGrid."},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-layoutimage.html","title":"LayoutImage","content":"LayoutImage \n\n Dimensions type inherits from dynamic object\n \nLayoutImage.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nLayoutImage.init \ninit \nLayoutImage.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-layoutimage.html#\u0060\u0060.ctor\u0060\u0060","title":"LayoutImage.\u0060\u0060.ctor\u0060\u0060","content":"LayoutImage.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-layoutimage.html#init","title":"LayoutImage.init","content":"LayoutImage.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-layoutimage.html#style","title":"LayoutImage.style","content":"LayoutImage.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-legend.html","title":"Legend","content":"Legend \n\n Legend\n \nLegend.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nLegend.init \ninit \nLegend.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-legend.html#\u0060\u0060.ctor\u0060\u0060","title":"Legend.\u0060\u0060.ctor\u0060\u0060","content":"Legend.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-legend.html#init","title":"Legend.init","content":"Legend.init \ninit \n\n Returns a new Legend object with the given styles\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-legend.html#style","title":"Legend.style","content":"Legend.style \nstyle \n\n Returns a function that applies the given styles to a Legend object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-linearaxis.html","title":"LinearAxis","content":"LinearAxis \nLinear axes can be used as x and y scales on 2D plots, and as x,y, and z scales on 3D plots. \nLinearAxis.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nLinearAxis.init \ninit \nLinearAxis.initCarpet \ninitCarpet \nLinearAxis.initCategorical \ninitCategorical \nLinearAxis.initIndicatorGauge \ninitIndicatorGauge \nLinearAxis.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-linearaxis.html#\u0060\u0060.ctor\u0060\u0060","title":"LinearAxis.\u0060\u0060.ctor\u0060\u0060","content":"LinearAxis.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-linearaxis.html#init","title":"LinearAxis.init","content":"LinearAxis.init \ninit \n\n Initialize a LinearAxis object that can be used as a positional scale for Y, X or Z coordinates.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-linearaxis.html#initCarpet","title":"LinearAxis.initCarpet","content":"LinearAxis.initCarpet \ninitCarpet \n\n Initialize a LinearAxis object that can be used as a positional scale for carpet coordinates.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-linearaxis.html#initCategorical","title":"LinearAxis.initCategorical","content":"LinearAxis.initCategorical \ninitCategorical \n\n Initialize a categorical LinearAxis object that can be used as a positional scale for Y, X or Z coordinates.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-linearaxis.html#initIndicatorGauge","title":"LinearAxis.initIndicatorGauge","content":"LinearAxis.initIndicatorGauge \ninitIndicatorGauge \n\n Initialize a LinearAxis object that can be used as a positional scale for indicator gauges.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-linearaxis.html#style","title":"LinearAxis.style","content":"LinearAxis.style \nstyle \n\n Creates a function that applies the given style parameters to a LinearAxis object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapbox.html","title":"Mapbox","content":"Mapbox \nDetermines the style of the map shown in mapbox traces \nMapbox.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nMapbox.init \ninit \nMapbox.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapbox.html#\u0060\u0060.ctor\u0060\u0060","title":"Mapbox.\u0060\u0060.ctor\u0060\u0060","content":"Mapbox.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapbox.html#init","title":"Mapbox.init","content":"Mapbox.init \ninit \n\n Returns a new Mapbox object with the given styles applied.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapbox.html#style","title":"Mapbox.style","content":"Mapbox.style \nstyle \nCreate a function that applies the given style parameters to a Mapbox object."},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxbounds.html","title":"MapboxBounds","content":"MapboxBounds \n \nMapboxBounds.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nMapboxBounds.init \ninit \nMapboxBounds.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxbounds.html#\u0060\u0060.ctor\u0060\u0060","title":"MapboxBounds.\u0060\u0060.ctor\u0060\u0060","content":"MapboxBounds.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxbounds.html#init","title":"MapboxBounds.init","content":"MapboxBounds.init \ninit \n\n Returns a new MapboxBounds object with the given styles\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxbounds.html#style","title":"MapboxBounds.style","content":"MapboxBounds.style \nstyle \n\n Returns a function that applies the given styles to a MapoxBounds object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxcluster.html","title":"MapboxCluster","content":"MapboxCluster \nClustering options for points on mapbox traces \nMapboxCluster.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nMapboxCluster.init \ninit \nMapboxCluster.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxcluster.html#\u0060\u0060.ctor\u0060\u0060","title":"MapboxCluster.\u0060\u0060.ctor\u0060\u0060","content":"MapboxCluster.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxcluster.html#init","title":"MapboxCluster.init","content":"MapboxCluster.init \ninit \n\n Returns a new MapboxCluster object with the given styles\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxcluster.html#style","title":"MapboxCluster.style","content":"MapboxCluster.style \nstyle \n\n Returns a function that applies the given styles to a MapboxCluster object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxlayer.html","title":"MapboxLayer","content":"MapboxLayer \n \nMapboxLayer.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nMapboxLayer.init \ninit \nMapboxLayer.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxlayer.html#\u0060\u0060.ctor\u0060\u0060","title":"MapboxLayer.\u0060\u0060.ctor\u0060\u0060","content":"MapboxLayer.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxlayer.html#init","title":"MapboxLayer.init","content":"MapboxLayer.init \ninit \nInitialize a MapboxLayer object"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxlayer.html#style","title":"MapboxLayer.style","content":"MapboxLayer.style \nstyle \nCreate a function that applies the given style parameters to a MapboxLayer object."},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxlayersymbol.html","title":"MapboxLayerSymbol","content":"MapboxLayerSymbol \n \nMapboxLayerSymbol.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nMapboxLayerSymbol.init \ninit \nMapboxLayerSymbol.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxlayersymbol.html#\u0060\u0060.ctor\u0060\u0060","title":"MapboxLayerSymbol.\u0060\u0060.ctor\u0060\u0060","content":"MapboxLayerSymbol.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxlayersymbol.html#init","title":"MapboxLayerSymbol.init","content":"MapboxLayerSymbol.init \ninit \nInitialize a MapboxLayer object"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-mapboxlayersymbol.html#style","title":"MapboxLayerSymbol.style","content":"MapboxLayerSymbol.style \nstyle \nCreate a function that applies the given style parameters to a MapboxLayer object."},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-margin.html","title":"Margin","content":"Margin \n\n Margin\n \nMargin.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nMargin.init \ninit \nMargin.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-margin.html#\u0060\u0060.ctor\u0060\u0060","title":"Margin.\u0060\u0060.ctor\u0060\u0060","content":"Margin.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-margin.html#init","title":"Margin.init","content":"Margin.init \ninit \n\n Init Margin type\n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-margin.html#style","title":"Margin.style","content":"Margin.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-minor.html","title":"Minor","content":"Minor \nThe Minor object holds various parameters to style minor ticks on cartesian axes \nMinor.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nMinor.init \ninit \nMinor.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-minor.html#\u0060\u0060.ctor\u0060\u0060","title":"Minor.\u0060\u0060.ctor\u0060\u0060","content":"Minor.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-minor.html#init","title":"Minor.init","content":"Minor.init \ninit \n\n Initialize a Minor object that holds various parameters to style minor ticks on cartesian axes.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-minor.html#style","title":"Minor.style","content":"Minor.style \nstyle \n\n Creates a function that applies the given style parameters to a Minor object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-modebar.html","title":"ModeBar","content":"ModeBar \n \nModeBar.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nModeBar.init \ninit \nModeBar.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-modebar.html#\u0060\u0060.ctor\u0060\u0060","title":"ModeBar.\u0060\u0060.ctor\u0060\u0060","content":"ModeBar.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-modebar.html#init","title":"ModeBar.init","content":"ModeBar.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-modebar.html#style","title":"ModeBar.style","content":"ModeBar.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-newselection.html","title":"NewSelection","content":"NewSelection \n \nNewSelection.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nNewSelection.init \ninit \nNewSelection.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-newselection.html#\u0060\u0060.ctor\u0060\u0060","title":"NewSelection.\u0060\u0060.ctor\u0060\u0060","content":"NewSelection.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-newselection.html#init","title":"NewSelection.init","content":"NewSelection.init \ninit \n\n Returns a new NewSelection object with the given styles\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-newselection.html#style","title":"NewSelection.style","content":"NewSelection.style \nstyle \n\n Returns a function that applies the given styles to a NewSelection object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-newshape.html","title":"NewShape","content":"NewShape \n \nNewShape.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nNewShape.init \ninit \nNewShape.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-newshape.html#\u0060\u0060.ctor\u0060\u0060","title":"NewShape.\u0060\u0060.ctor\u0060\u0060","content":"NewShape.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-newshape.html#init","title":"NewShape.init","content":"NewShape.init \ninit \n\n Returns a new NewShape object with the given styling.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-newshape.html#style","title":"NewShape.style","content":"NewShape.style \nstyle \n\n Returns a function that applies the given styles to a NewShape object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-padding.html","title":"Padding","content":"Padding \n \nPadding.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nPadding.init \ninit \nPadding.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-padding.html#\u0060\u0060.ctor\u0060\u0060","title":"Padding.\u0060\u0060.ctor\u0060\u0060","content":"Padding.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-padding.html#init","title":"Padding.init","content":"Padding.init \ninit \n\n Set the padding of the slider component along each side\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-padding.html#style","title":"Padding.style","content":"Padding.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-polar.html","title":"Polar","content":"Polar \n \nPolar.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nPolar.getAngularAxis \ngetAngularAxis \nPolar.getRadialAxis \ngetRadialAxis \nPolar.init \ninit \nPolar.setAngularAxis \nsetAngularAxis \nPolar.setRadialAxis \nsetRadialAxis \nPolar.style \nstyle \nPolar.tryGetTypedMember \ntryGetTypedMember"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-polar.html#\u0060\u0060.ctor\u0060\u0060","title":"Polar.\u0060\u0060.ctor\u0060\u0060","content":"Polar.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-polar.html#getAngularAxis","title":"Polar.getAngularAxis","content":"Polar.getAngularAxis \ngetAngularAxis \n\n Returns the AngularAxis object of the given polar object.\n\n If there is no AngularAxis set, returns an empty AngularAxis object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-polar.html#getRadialAxis","title":"Polar.getRadialAxis","content":"Polar.getRadialAxis \ngetRadialAxis \n\n Returns the RadialAxis object of the given polar object.\n\n If there is no RadialAxis set, returns an empty RadialAxis object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-polar.html#init","title":"Polar.init","content":"Polar.init \ninit \n\n Initialize a Polar object that contains layout options concerned with polar plots.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-polar.html#setAngularAxis","title":"Polar.setAngularAxis","content":"Polar.setAngularAxis \nsetAngularAxis \n\n Returns a function that sets the AngularAxis object of the given polar object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-polar.html#setRadialAxis","title":"Polar.setRadialAxis","content":"Polar.setRadialAxis \nsetRadialAxis \n\n Returns a function that sets the RadialAxis object of the given polar object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-polar.html#style","title":"Polar.style","content":"Polar.style \nstyle \n\n Create a function that applies the given style parameters to a Polar object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-polar.html#tryGetTypedMember","title":"Polar.tryGetTypedMember","content":"Polar.tryGetTypedMember \ntryGetTypedMember \n\n Returns Some(dynamic member value) of the object\u0027s underlying DynamicObj when a dynamic member with the given name exists, and None otherwise.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-radialaxis.html","title":"RadialAxis","content":"RadialAxis \nRadial axes can be used as a scale for the radial coordinates in polar plots. \nRadialAxis.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nRadialAxis.init \ninit \nRadialAxis.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-radialaxis.html#\u0060\u0060.ctor\u0060\u0060","title":"RadialAxis.\u0060\u0060.ctor\u0060\u0060","content":"RadialAxis.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-radialaxis.html#init","title":"RadialAxis.init","content":"RadialAxis.init \ninit \n\n Initialize an AngularAxis object that can be used as a angular scale for polar coordinates.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-radialaxis.html#style","title":"RadialAxis.style","content":"RadialAxis.style \nstyle \n\n Creates a function that applies the given style parameters to a RadialAxis object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangeselector.html","title":"RangeSelector","content":"RangeSelector \n\n Dimensions type inherits from dynamic object\n \nRangeSelector.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nRangeSelector.init \ninit \nRangeSelector.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangeselector.html#\u0060\u0060.ctor\u0060\u0060","title":"RangeSelector.\u0060\u0060.ctor\u0060\u0060","content":"RangeSelector.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangeselector.html#init","title":"RangeSelector.init","content":"RangeSelector.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangeselector.html#style","title":"RangeSelector.style","content":"RangeSelector.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangeslider.html","title":"RangeSlider","content":"RangeSlider \n \nRangeSlider.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nRangeSlider.init \ninit \nRangeSlider.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangeslider.html#\u0060\u0060.ctor\u0060\u0060","title":"RangeSlider.\u0060\u0060.ctor\u0060\u0060","content":"RangeSlider.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangeslider.html#init","title":"RangeSlider.init","content":"RangeSlider.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangeslider.html#style","title":"RangeSlider.style","content":"RangeSlider.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangebreak.html","title":"Rangebreak","content":"Rangebreak \n \nRangebreak.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nRangebreak.init \ninit \nRangebreak.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangebreak.html#\u0060\u0060.ctor\u0060\u0060","title":"Rangebreak.\u0060\u0060.ctor\u0060\u0060","content":"Rangebreak.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangebreak.html#init","title":"Rangebreak.init","content":"Rangebreak.init \ninit \n\n Initialize a Rangebreak object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-rangebreak.html#style","title":"Rangebreak.style","content":"Rangebreak.style \nstyle \n\n Creates a function that applies the given style parameters to a Rangebreak object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-realaxis.html","title":"RealAxis","content":"RealAxis \nAngular axes can be used as a scale for the angular coordinates in polar plots. \nRealAxis.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nRealAxis.init \ninit \nRealAxis.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-realaxis.html#\u0060\u0060.ctor\u0060\u0060","title":"RealAxis.\u0060\u0060.ctor\u0060\u0060","content":"RealAxis.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-realaxis.html#init","title":"RealAxis.init","content":"RealAxis.init \ninit \n\n Initialize an RealAxis object that can be used as a real scale for smith coordinates.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-realaxis.html#style","title":"RealAxis.style","content":"RealAxis.style \nstyle \n\n Creates a function that applies the given style parameters to a RealAxis object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-scene.html","title":"Scene","content":"Scene \n\n Scene\n \nScene.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nScene.getXAxis \ngetXAxis \nScene.getYAxis \ngetYAxis \nScene.getZAxis \ngetZAxis \nScene.init \ninit \nScene.setXAxis \nsetXAxis \nScene.setYAxis \nsetYAxis \nScene.setZAxis \nsetZAxis \nScene.style \nstyle \nScene.tryGetTypedMember \ntryGetTypedMember"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-scene.html#\u0060\u0060.ctor\u0060\u0060","title":"Scene.\u0060\u0060.ctor\u0060\u0060","content":"Scene.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-scene.html#getXAxis","title":"Scene.getXAxis","content":"Scene.getXAxis \ngetXAxis \n\n Returns the x axis object of the given scene.\n\n If there is no x axis set, returns an empty LinearAxis object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-scene.html#getYAxis","title":"Scene.getYAxis","content":"Scene.getYAxis \ngetYAxis \n\n Returns the y axis object of the given scene.\n\n If there is no y axis set, returns an empty LinearAxis object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-scene.html#getZAxis","title":"Scene.getZAxis","content":"Scene.getZAxis \ngetZAxis \n\n Returns the z axis object of the given scene.\n\n If there is no z axis set, returns an empty LinearAxis object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-scene.html#init","title":"Scene.init","content":"Scene.init \ninit \n\n Initialize a categorical Scene object that can be used as a laxout anchor for a 3D coordinate system.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-scene.html#setXAxis","title":"Scene.setXAxis","content":"Scene.setXAxis \nsetXAxis \n\n Returns a function that sets the x axis object of the given scene.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-scene.html#setYAxis","title":"Scene.setYAxis","content":"Scene.setYAxis \nsetYAxis \n\n Returns a function that sets the y axis object of the given scene.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-scene.html#setZAxis","title":"Scene.setZAxis","content":"Scene.setZAxis \nsetZAxis \n\n Returns a function that sets the z axis object of the given scene.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-scene.html#style","title":"Scene.style","content":"Scene.style \nstyle \n\n Creates a function that applies the given style parameters to a Scene object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-scene.html#tryGetTypedMember","title":"Scene.tryGetTypedMember","content":"Scene.tryGetTypedMember \ntryGetTypedMember \n\n Returns Some(dynamic member value) of the scene object\u0027s underlying DynamicObj when a dynamic member with the given name exists, and None otherwise.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-selection.html","title":"Selection","content":"Selection \n \nSelection.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSelection.init \ninit \nSelection.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-selection.html#\u0060\u0060.ctor\u0060\u0060","title":"Selection.\u0060\u0060.ctor\u0060\u0060","content":"Selection.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-selection.html#init","title":"Selection.init","content":"Selection.init \ninit \n\n Returns a new Selection object with the given styles\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-selection.html#style","title":"Selection.style","content":"Selection.style \nstyle \n\n Returns a function that applies the given styles to a Selection object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-shape.html","title":"Shape","content":"Shape \n\n Shapes are layers that can be drawn onto a chart layout.\n \nShape.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nShape.init \ninit \nShape.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-shape.html#\u0060\u0060.ctor\u0060\u0060","title":"Shape.\u0060\u0060.ctor\u0060\u0060","content":"Shape.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-shape.html#init","title":"Shape.init","content":"Shape.init \ninit \n\n Returns a new Shape object with the given styling.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-shape.html#style","title":"Shape.style","content":"Shape.style \nstyle \n\n Returns a function that applies the given styles to a Shape object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-shapelabel.html","title":"ShapeLabel","content":"ShapeLabel \n\nThe label of a shape.\n \nShapeLabel.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nShapeLabel.init \ninit \nShapeLabel.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-shapelabel.html#\u0060\u0060.ctor\u0060\u0060","title":"ShapeLabel.\u0060\u0060.ctor\u0060\u0060","content":"ShapeLabel.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-shapelabel.html#init","title":"ShapeLabel.init","content":"ShapeLabel.init \ninit \n\n Returns a new ShapeLabel object with the given styling.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-shapelabel.html#style","title":"ShapeLabel.style","content":"ShapeLabel.style \nstyle \n\n Returns a function that applies the given styles to a ShapeLabel object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-slider.html","title":"Slider","content":"Slider \n\n The layout object for custom slider implementation\n  \nSlider.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSlider.init \ninit \nSlider.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-slider.html#\u0060\u0060.ctor\u0060\u0060","title":"Slider.\u0060\u0060.ctor\u0060\u0060","content":"Slider.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-slider.html#init","title":"Slider.init","content":"Slider.init \ninit \n\n Initializes the slider with style parameters\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-slider.html#style","title":"Slider.style","content":"Slider.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-slidercurrentvalue.html","title":"SliderCurrentValue","content":"SliderCurrentValue \n \nSliderCurrentValue.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSliderCurrentValue.init \ninit \nSliderCurrentValue.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-slidercurrentvalue.html#\u0060\u0060.ctor\u0060\u0060","title":"SliderCurrentValue.\u0060\u0060.ctor\u0060\u0060","content":"SliderCurrentValue.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-slidercurrentvalue.html#init","title":"SliderCurrentValue.init","content":"SliderCurrentValue.init \ninit \n\n Object containing the current slider value style\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-slidercurrentvalue.html#style","title":"SliderCurrentValue.style","content":"SliderCurrentValue.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-sliderstep.html","title":"SliderStep","content":"SliderStep \n\n The object including the slider steps style and update parameters\n  \nSliderStep.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSliderStep.init \ninit \nSliderStep.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-sliderstep.html#\u0060\u0060.ctor\u0060\u0060","title":"SliderStep.\u0060\u0060.ctor\u0060\u0060","content":"SliderStep.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-sliderstep.html#init","title":"SliderStep.init","content":"SliderStep.init \ninit \n\n Initializes the slider with style parameters\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-sliderstep.html#style","title":"SliderStep.style","content":"SliderStep.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-smith.html","title":"Smith","content":"Smith \n\n The smith subplot is used by TraceSmith traces.\n \nSmith.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSmith.getImaginaryAxis \ngetImaginaryAxis \nSmith.getRealAxis \ngetRealAxis \nSmith.init \ninit \nSmith.setImaginaryAxis \nsetImaginaryAxis \nSmith.setRealAxis \nsetRealAxis \nSmith.style \nstyle \nSmith.tryGetTypedMember \ntryGetTypedMember"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-smith.html#\u0060\u0060.ctor\u0060\u0060","title":"Smith.\u0060\u0060.ctor\u0060\u0060","content":"Smith.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-smith.html#getImaginaryAxis","title":"Smith.getImaginaryAxis","content":"Smith.getImaginaryAxis \ngetImaginaryAxis \n\n Returns the ImaginaryAxis object of the given smith object.\n\n If there is no ImaginaryAxis set, returns an empty ImaginaryAxis object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-smith.html#getRealAxis","title":"Smith.getRealAxis","content":"Smith.getRealAxis \ngetRealAxis \n\n Returns the RealAxis object of the given smith object.\n\n If there is no RealAxis set, returns an empty RealAxis object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-smith.html#init","title":"Smith.init","content":"Smith.init \ninit \n\n Initialize a Smith object that contains layout options concerned with smith plots.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-smith.html#setImaginaryAxis","title":"Smith.setImaginaryAxis","content":"Smith.setImaginaryAxis \nsetImaginaryAxis \n\n Returns a function that sets the ImaginaryAxis object of the given smith object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-smith.html#setRealAxis","title":"Smith.setRealAxis","content":"Smith.setRealAxis \nsetRealAxis \n\n Returns a function that sets the RealAxis object of the given smith object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-smith.html#style","title":"Smith.style","content":"Smith.style \nstyle \n\n Create a function that applies the given style parameters to a Smith object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-smith.html#tryGetTypedMember","title":"Smith.tryGetTypedMember","content":"Smith.tryGetTypedMember \ntryGetTypedMember \n\n Returns Some(dynamic member value) of the object\u0027s underlying DynamicObj when a dynamic member with the given name exists, and None otherwise.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-ternary.html","title":"Ternary","content":"Ternary \n \nTernary.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTernary.getAAxis \ngetAAxis \nTernary.getBAxis \ngetBAxis \nTernary.getCAxis \ngetCAxis \nTernary.init \ninit \nTernary.setAAxis \nsetAAxis \nTernary.setBAxis \nsetBAxis \nTernary.setCAxis \nsetCAxis \nTernary.style \nstyle \nTernary.tryGetTypedMember \ntryGetTypedMember"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-ternary.html#\u0060\u0060.ctor\u0060\u0060","title":"Ternary.\u0060\u0060.ctor\u0060\u0060","content":"Ternary.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-ternary.html#getAAxis","title":"Ternary.getAAxis","content":"Ternary.getAAxis \ngetAAxis \n\n Returns the a axis of the given ternary object.\n\n If there is no a axis set, returns an empty LinearAxis object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-ternary.html#getBAxis","title":"Ternary.getBAxis","content":"Ternary.getBAxis \ngetBAxis \n\n Returns the b axis of the given ternary object.\n\n If there is no b axis set, returns an empty LinearAxis object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-ternary.html#getCAxis","title":"Ternary.getCAxis","content":"Ternary.getCAxis \ngetCAxis \n\n Returns the c axis of the given ternary object.\n\n If there is no c axis set, returns an empty LinearAxis object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-ternary.html#init","title":"Ternary.init","content":"Ternary.init \ninit \n\n Initializes a ternary object\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-ternary.html#setAAxis","title":"Ternary.setAAxis","content":"Ternary.setAAxis \nsetAAxis \n\n Returns a function that sets the a axis object of the given ternary object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-ternary.html#setBAxis","title":"Ternary.setBAxis","content":"Ternary.setBAxis \nsetBAxis \n\n Returns a function that sets the b axis object of the given ternary object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-ternary.html#setCAxis","title":"Ternary.setCAxis","content":"Ternary.setCAxis \nsetCAxis \n\n Returns a function that sets the c axis object of the given ternary object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-ternary.html#style","title":"Ternary.style","content":"Ternary.style \nstyle \n\n Creates a function that applies the given style parameters to a Ternary object.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-ternary.html#tryGetTypedMember","title":"Ternary.tryGetTypedMember","content":"Ternary.tryGetTypedMember \ntryGetTypedMember \n\n Returns Some(dynamic member value) of the object\u0027s underlying DynamicObj when a dynamic member with the given name exists, and None otherwise.\n "},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-transition.html","title":"Transition","content":"Transition \n \nTransition.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTransition.init \ninit \nTransition.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-transition.html#\u0060\u0060.ctor\u0060\u0060","title":"Transition.\u0060\u0060.ctor\u0060\u0060","content":"Transition.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-transition.html#init","title":"Transition.init","content":"Transition.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-transition.html#style","title":"Transition.style","content":"Transition.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-uniformtext.html","title":"UniformText","content":"UniformText \n \nUniformText.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nUniformText.init \ninit \nUniformText.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-uniformtext.html#\u0060\u0060.ctor\u0060\u0060","title":"UniformText.\u0060\u0060.ctor\u0060\u0060","content":"UniformText.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-uniformtext.html#init","title":"UniformText.init","content":"UniformText.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-uniformtext.html#style","title":"UniformText.style","content":"UniformText.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-updatemenu.html","title":"UpdateMenu","content":"UpdateMenu \n \nUpdateMenu.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nUpdateMenu.init \ninit \nUpdateMenu.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-updatemenu.html#\u0060\u0060.ctor\u0060\u0060","title":"UpdateMenu.\u0060\u0060.ctor\u0060\u0060","content":"UpdateMenu.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-updatemenu.html#init","title":"UpdateMenu.init","content":"UpdateMenu.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-updatemenu.html#style","title":"UpdateMenu.style","content":"UpdateMenu.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-updatemenubutton.html","title":"UpdateMenuButton","content":"UpdateMenuButton \n \nUpdateMenuButton.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nUpdateMenuButton.init \ninit \nUpdateMenuButton.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-updatemenubutton.html#\u0060\u0060.ctor\u0060\u0060","title":"UpdateMenuButton.\u0060\u0060.ctor\u0060\u0060","content":"UpdateMenuButton.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-updatemenubutton.html#init","title":"UpdateMenuButton.init","content":"UpdateMenuButton.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-layoutobjects-updatemenubutton.html#style","title":"UpdateMenuButton.style","content":"UpdateMenuButton.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-bins.html","title":"Bins","content":"Bins \n\n Bin type inherits from dynamic object\n \nBins.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nBins.init \ninit \nBins.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-bins.html#\u0060\u0060.ctor\u0060\u0060","title":"Bins.\u0060\u0060.ctor\u0060\u0060","content":"Bins.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-bins.html#init","title":"Bins.init","content":"Bins.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-bins.html#style","title":"Bins.style","content":"Bins.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-box.html","title":"Box","content":"Box \n\n Box type inherits from dynamic object (parent violin)\n \nBox.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nBox.init \ninit \nBox.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-box.html#\u0060\u0060.ctor\u0060\u0060","title":"Box.\u0060\u0060.ctor\u0060\u0060","content":"Box.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-box.html#init","title":"Box.init","content":"Box.init \ninit \n\n Initialized Line object\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-box.html#style","title":"Box.style","content":"Box.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-capfill.html","title":"CapFill","content":"CapFill \n \nCapFill.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCapFill.init \ninit \nCapFill.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-capfill.html#\u0060\u0060.ctor\u0060\u0060","title":"CapFill.\u0060\u0060.ctor\u0060\u0060","content":"CapFill.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-capfill.html#init","title":"CapFill.init","content":"CapFill.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-capfill.html#style","title":"CapFill.style","content":"CapFill.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-caps.html","title":"Caps","content":"Caps \n \nCaps.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCaps.init \ninit \nCaps.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-caps.html#\u0060\u0060.ctor\u0060\u0060","title":"Caps.\u0060\u0060.ctor\u0060\u0060","content":"Caps.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-caps.html#init","title":"Caps.init","content":"Caps.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-caps.html#style","title":"Caps.style","content":"Caps.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contour.html","title":"Contour","content":"Contour \n\n Contour object inherits from dynamic object\n \nContour.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nContour.init \ninit \nContour.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contour.html#\u0060\u0060.ctor\u0060\u0060","title":"Contour.\u0060\u0060.ctor\u0060\u0060","content":"Contour.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contour.html#init","title":"Contour.init","content":"Contour.init \ninit \n\n Initialized a Contour object\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contour.html#style","title":"Contour.style","content":"Contour.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contourproject.html","title":"ContourProject","content":"ContourProject \n \nContourProject.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nContourProject.init \ninit \nContourProject.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contourproject.html#\u0060\u0060.ctor\u0060\u0060","title":"ContourProject.\u0060\u0060.ctor\u0060\u0060","content":"ContourProject.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contourproject.html#init","title":"ContourProject.init","content":"ContourProject.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contourproject.html#style","title":"ContourProject.style","content":"ContourProject.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contours.html","title":"Contours","content":"Contours \n\n Contours type inherits from dynamic object\n \nContours.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nContours.init \ninit \nContours.initSurface \ninitSurface \nContours.initXyz \ninitXyz \nContours.style \nstyle \nContours.styleXyz \nstyleXyz"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contours.html#\u0060\u0060.ctor\u0060\u0060","title":"Contours.\u0060\u0060.ctor\u0060\u0060","content":"Contours.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contours.html#init","title":"Contours.init","content":"Contours.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contours.html#initSurface","title":"Contours.initSurface","content":"Contours.initSurface \ninitSurface \n\n Initialized Contours object\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contours.html#initXyz","title":"Contours.initXyz","content":"Contours.initXyz \ninitXyz \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contours.html#style","title":"Contours.style","content":"Contours.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-contours.html#styleXyz","title":"Contours.styleXyz","content":"Contours.styleXyz \nstyleXyz \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-cumulative.html","title":"Cumulative","content":"Cumulative \n\n Cumulative type inherits from dynamic object\n \nCumulative.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCumulative.init \ninit \nCumulative.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-cumulative.html#\u0060\u0060.ctor\u0060\u0060","title":"Cumulative.\u0060\u0060.ctor\u0060\u0060","content":"Cumulative.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-cumulative.html#init","title":"Cumulative.init","content":"Cumulative.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-cumulative.html#style","title":"Cumulative.style","content":"Cumulative.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-dimension.html","title":"Dimension","content":"Dimension \n\n Dimensions type inherits from dynamic object\n \nDimension.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDimension.initParallel \ninitParallel \nDimension.initSplom \ninitSplom \nDimension.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-dimension.html#\u0060\u0060.ctor\u0060\u0060","title":"Dimension.\u0060\u0060.ctor\u0060\u0060","content":"Dimension.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-dimension.html#initParallel","title":"Dimension.initParallel","content":"Dimension.initParallel \ninitParallel \n\n Initializes dimensions object to be used with parcats and parcoords plots\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-dimension.html#initSplom","title":"Dimension.initSplom","content":"Dimension.initSplom \ninitSplom \n\n Initializes dimensions object to be used with SPLOM plots\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-dimension.html#style","title":"Dimension.style","content":"Dimension.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-error.html","title":"Error","content":"Error \n\n Error type inherits from dynamic object\n \nError.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nError.init \ninit \nError.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-error.html#\u0060\u0060.ctor\u0060\u0060","title":"Error.\u0060\u0060.ctor\u0060\u0060","content":"Error.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-error.html#init","title":"Error.init","content":"Error.init \ninit \n\n Returns a new Error object with the given styling.\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-error.html#style","title":"Error.style","content":"Error.style \nstyle \n\n Returns a function that applies the given style parameters to an Error object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-financemarker.html","title":"FinanceMarker","content":"FinanceMarker \n \nFinanceMarker.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nFinanceMarker.init \ninit \nFinanceMarker.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-financemarker.html#\u0060\u0060.ctor\u0060\u0060","title":"FinanceMarker.\u0060\u0060.ctor\u0060\u0060","content":"FinanceMarker.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-financemarker.html#init","title":"FinanceMarker.init","content":"FinanceMarker.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-financemarker.html#style","title":"FinanceMarker.style","content":"FinanceMarker.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-fontselectionstyle.html","title":"FontSelectionStyle","content":"FontSelectionStyle \nControls the style of selected text in supported traces \nFontSelectionStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nFontSelectionStyle.init \ninit \nFontSelectionStyle.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-fontselectionstyle.html#\u0060\u0060.ctor\u0060\u0060","title":"FontSelectionStyle.\u0060\u0060.ctor\u0060\u0060","content":"FontSelectionStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-fontselectionstyle.html#init","title":"FontSelectionStyle.init","content":"FontSelectionStyle.init \ninit \n\n Returns a new FontSelectionStyle object with the given styles\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-fontselectionstyle.html#style","title":"FontSelectionStyle.style","content":"FontSelectionStyle.style \nstyle \n\n Returns a function that applies the given styles to a FontSelectionStyle object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-funnelconnector.html","title":"FunnelConnector","content":"FunnelConnector \n\n Styles for connector lines in Funnel Charts.\n\n Parameters:\n\n Line          : Sets the Line style for this WaterfallConnector\n\n Visible       : Whether or not connectors are visible\n\n ConnectorMode : Sets the shape of connector lines.\n \nFunnelConnector.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nFunnelConnector.init \ninit \nFunnelConnector.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-funnelconnector.html#\u0060\u0060.ctor\u0060\u0060","title":"FunnelConnector.\u0060\u0060.ctor\u0060\u0060","content":"FunnelConnector.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-funnelconnector.html#init","title":"FunnelConnector.init","content":"FunnelConnector.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-funnelconnector.html#style","title":"FunnelConnector.style","content":"FunnelConnector.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-gradient.html","title":"Gradient","content":"Gradient \n \nGradient.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nGradient.init \ninit \nGradient.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-gradient.html#\u0060\u0060.ctor\u0060\u0060","title":"Gradient.\u0060\u0060.ctor\u0060\u0060","content":"Gradient.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-gradient.html#init","title":"Gradient.init","content":"Gradient.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-gradient.html#style","title":"Gradient.style","content":"Gradient.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicleleaf.html","title":"IcicleLeaf","content":"IcicleLeaf \n \nIcicleLeaf.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nIcicleLeaf.init \ninit \nIcicleLeaf.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicleleaf.html#\u0060\u0060.ctor\u0060\u0060","title":"IcicleLeaf.\u0060\u0060.ctor\u0060\u0060","content":"IcicleLeaf.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicleleaf.html#init","title":"IcicleLeaf.init","content":"IcicleLeaf.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicleleaf.html#style","title":"IcicleLeaf.style","content":"IcicleLeaf.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicleroot.html","title":"IcicleRoot","content":"IcicleRoot \n \nIcicleRoot.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nIcicleRoot.init \ninit \nIcicleRoot.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicleroot.html#\u0060\u0060.ctor\u0060\u0060","title":"IcicleRoot.\u0060\u0060.ctor\u0060\u0060","content":"IcicleRoot.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicleroot.html#init","title":"IcicleRoot.init","content":"IcicleRoot.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicleroot.html#style","title":"IcicleRoot.style","content":"IcicleRoot.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicletiling.html","title":"IcicleTiling","content":"IcicleTiling \n \nIcicleTiling.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nIcicleTiling.init \ninit \nIcicleTiling.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicletiling.html#\u0060\u0060.ctor\u0060\u0060","title":"IcicleTiling.\u0060\u0060.ctor\u0060\u0060","content":"IcicleTiling.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicletiling.html#init","title":"IcicleTiling.init","content":"IcicleTiling.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-icicletiling.html#style","title":"IcicleTiling.style","content":"IcicleTiling.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorbar.html","title":"IndicatorBar","content":"IndicatorBar \n \nIndicatorBar.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nIndicatorBar.init \ninit \nIndicatorBar.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorbar.html#\u0060\u0060.ctor\u0060\u0060","title":"IndicatorBar.\u0060\u0060.ctor\u0060\u0060","content":"IndicatorBar.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorbar.html#init","title":"IndicatorBar.init","content":"IndicatorBar.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorbar.html#style","title":"IndicatorBar.style","content":"IndicatorBar.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatordelta.html","title":"IndicatorDelta","content":"IndicatorDelta \n \nIndicatorDelta.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nIndicatorDelta.init \ninit \nIndicatorDelta.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatordelta.html#\u0060\u0060.ctor\u0060\u0060","title":"IndicatorDelta.\u0060\u0060.ctor\u0060\u0060","content":"IndicatorDelta.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatordelta.html#init","title":"IndicatorDelta.init","content":"IndicatorDelta.init \ninit \n\n Returns a new IndicatorDelta object with the given styles\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatordelta.html#style","title":"IndicatorDelta.style","content":"IndicatorDelta.style \nstyle \n\n Returns a function that applies the given styles to an IndicatorDelta object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorgauge.html","title":"IndicatorGauge","content":"IndicatorGauge \n \nIndicatorGauge.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nIndicatorGauge.init \ninit \nIndicatorGauge.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorgauge.html#\u0060\u0060.ctor\u0060\u0060","title":"IndicatorGauge.\u0060\u0060.ctor\u0060\u0060","content":"IndicatorGauge.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorgauge.html#init","title":"IndicatorGauge.init","content":"IndicatorGauge.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorgauge.html#style","title":"IndicatorGauge.style","content":"IndicatorGauge.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatornumber.html","title":"IndicatorNumber","content":"IndicatorNumber \n \nIndicatorNumber.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nIndicatorNumber.init \ninit \nIndicatorNumber.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatornumber.html#\u0060\u0060.ctor\u0060\u0060","title":"IndicatorNumber.\u0060\u0060.ctor\u0060\u0060","content":"IndicatorNumber.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatornumber.html#init","title":"IndicatorNumber.init","content":"IndicatorNumber.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatornumber.html#style","title":"IndicatorNumber.style","content":"IndicatorNumber.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorstep.html","title":"IndicatorStep","content":"IndicatorStep \n \nIndicatorStep.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nIndicatorStep.init \ninit \nIndicatorStep.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorstep.html#\u0060\u0060.ctor\u0060\u0060","title":"IndicatorStep.\u0060\u0060.ctor\u0060\u0060","content":"IndicatorStep.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorstep.html#init","title":"IndicatorStep.init","content":"IndicatorStep.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorstep.html#style","title":"IndicatorStep.style","content":"IndicatorStep.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorsymbol.html","title":"IndicatorSymbol","content":"IndicatorSymbol \n \nIndicatorSymbol.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nIndicatorSymbol.init \ninit \nIndicatorSymbol.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorsymbol.html#\u0060\u0060.ctor\u0060\u0060","title":"IndicatorSymbol.\u0060\u0060.ctor\u0060\u0060","content":"IndicatorSymbol.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorsymbol.html#init","title":"IndicatorSymbol.init","content":"IndicatorSymbol.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorsymbol.html#style","title":"IndicatorSymbol.style","content":"IndicatorSymbol.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorthreshold.html","title":"IndicatorThreshold","content":"IndicatorThreshold \n \nIndicatorThreshold.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nIndicatorThreshold.init \ninit \nIndicatorThreshold.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorthreshold.html#\u0060\u0060.ctor\u0060\u0060","title":"IndicatorThreshold.\u0060\u0060.ctor\u0060\u0060","content":"IndicatorThreshold.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorthreshold.html#init","title":"IndicatorThreshold.init","content":"IndicatorThreshold.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-indicatorthreshold.html#style","title":"IndicatorThreshold.style","content":"IndicatorThreshold.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lightposition.html","title":"LightPosition","content":"LightPosition \n \nLightPosition.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nLightPosition.init \ninit \nLightPosition.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lightposition.html#\u0060\u0060.ctor\u0060\u0060","title":"LightPosition.\u0060\u0060.ctor\u0060\u0060","content":"LightPosition.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lightposition.html#init","title":"LightPosition.init","content":"LightPosition.init \ninit \n\n Initialize a LightPosition object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lightposition.html#style","title":"LightPosition.style","content":"LightPosition.style \nstyle \n\n Creates a function that applies the given style parameters to a LightPosition object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lighting.html","title":"Lighting","content":"Lighting \n\n An object to set the Lighting of a 3D Scene\n \nLighting.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nLighting.init \ninit \nLighting.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lighting.html#\u0060\u0060.ctor\u0060\u0060","title":"Lighting.\u0060\u0060.ctor\u0060\u0060","content":"Lighting.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lighting.html#init","title":"Lighting.init","content":"Lighting.init \ninit \n\n Initialize a Lighting object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lighting.html#style","title":"Lighting.style","content":"Lighting.style \nstyle \n\n Creates a function that applies the given style parameters to a Lighting object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lineselectionstyle.html","title":"LineSelectionStyle","content":"LineSelectionStyle \nControls the style of selected lines in supported traces \nLineSelectionStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nLineSelectionStyle.init \ninit \nLineSelectionStyle.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lineselectionstyle.html#\u0060\u0060.ctor\u0060\u0060","title":"LineSelectionStyle.\u0060\u0060.ctor\u0060\u0060","content":"LineSelectionStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lineselectionstyle.html#init","title":"LineSelectionStyle.init","content":"LineSelectionStyle.init \ninit \n\n Returns a new LineSelectionStyle object with the given styles\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-lineselectionstyle.html#style","title":"LineSelectionStyle.style","content":"LineSelectionStyle.style \nstyle \n\n Returns a function that applies the given styles to a LineSelectionStyle object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-marker.html","title":"Marker","content":"Marker \n\n The marker object determines the style of the markers representing datums in various types of plots.\n \nMarker.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nMarker.init \ninit \nMarker.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-marker.html#\u0060\u0060.ctor\u0060\u0060","title":"Marker.\u0060\u0060.ctor\u0060\u0060","content":"Marker.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-marker.html#init","title":"Marker.init","content":"Marker.init \ninit \n\n Returns a new Marker object with the given styling.\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-marker.html#style","title":"Marker.style","content":"Marker.style \nstyle \n\n Returns a function that applies the given styles to a Marker object.\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-markerselectionstyle.html","title":"MarkerSelectionStyle","content":"MarkerSelectionStyle \nControls the style of selected markers in supported traces \nMarkerSelectionStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nMarkerSelectionStyle.init \ninit \nMarkerSelectionStyle.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-markerselectionstyle.html#\u0060\u0060.ctor\u0060\u0060","title":"MarkerSelectionStyle.\u0060\u0060.ctor\u0060\u0060","content":"MarkerSelectionStyle.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-markerselectionstyle.html#init","title":"MarkerSelectionStyle.init","content":"MarkerSelectionStyle.init \ninit \n\n Returns a new MarkerSelectionStyle object with the given styles\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-markerselectionstyle.html#style","title":"MarkerSelectionStyle.style","content":"MarkerSelectionStyle.style \nstyle \n\n Returns a function that applies the given styles to a MarkerSelectionStyle object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-meanline.html","title":"MeanLine","content":"MeanLine \n\n Meanline type inherits from dynamic object (parent violin)\n \nMeanLine.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nMeanLine.init \ninit \nMeanLine.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-meanline.html#\u0060\u0060.ctor\u0060\u0060","title":"MeanLine.\u0060\u0060.ctor\u0060\u0060","content":"MeanLine.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-meanline.html#init","title":"MeanLine.init","content":"MeanLine.init \ninit \n\n Initialized Line object\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-meanline.html#style","title":"MeanLine.style","content":"MeanLine.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-pathbar.html","title":"Pathbar","content":"Pathbar \n \nPathbar.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nPathbar.init \ninit \nPathbar.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-pathbar.html#\u0060\u0060.ctor\u0060\u0060","title":"Pathbar.\u0060\u0060.ctor\u0060\u0060","content":"Pathbar.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-pathbar.html#init","title":"Pathbar.init","content":"Pathbar.init \ninit \n\nInitializes pathbar object (used in Chart.Treemap)\n\nParameters:\n\nVisible  : Determines if the path bar is drawn i.e. outside the trace \u0060domain\u0060 and with one pixel gap.\n\nSide     : Determines on which side of the the treemap the \u0060pathbar\u0060 should be presented.\n\nEdgeShape: Determines which shape is used for edges between \u0060pathbar\u0060 labels.\n\nThickness: Sets the thickness of \u0060pathbar\u0060 (in px). If not specified the \u0060pathbar.textfont.size\u0060 is used with 3 pixles extra padding on each side.\n\nTextfont : Sets the font used inside \u0060pathbar\u0060.\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-pathbar.html#style","title":"Pathbar.style","content":"Pathbar.style \nstyle \n\nApplies the given styles to the given pathbar object\n\nParameters:\n\nVisible  : Determines if the path bar is drawn i.e. outside the trace \u0060domain\u0060 and with one pixel gap.\n\nSide     : Determines on which side of the the treemap the \u0060pathbar\u0060 should be presented.\n\nEdgeShape: Determines which shape is used for edges between \u0060pathbar\u0060 labels.\n\nThickness: Sets the thickness of \u0060pathbar\u0060 (in px). If not specified the \u0060pathbar.textfont.size\u0060 is used with 3 pixles extra padding on each side.\n\nTextfont : Sets the font used inside \u0060pathbar\u0060.\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-pattern.html","title":"Pattern","content":"Pattern \n \nPattern.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nPattern.init \ninit \nPattern.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-pattern.html#\u0060\u0060.ctor\u0060\u0060","title":"Pattern.\u0060\u0060.ctor\u0060\u0060","content":"Pattern.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-pattern.html#init","title":"Pattern.init","content":"Pattern.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-pattern.html#style","title":"Pattern.style","content":"Pattern.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-projection.html","title":"Projection","content":"Projection \n \nProjection.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nProjection.init \ninit \nProjection.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-projection.html#\u0060\u0060.ctor\u0060\u0060","title":"Projection.\u0060\u0060.ctor\u0060\u0060","content":"Projection.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-projection.html#init","title":"Projection.init","content":"Projection.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-projection.html#style","title":"Projection.style","content":"Projection.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-projectiondimension.html","title":"ProjectionDimension","content":"ProjectionDimension \n \nProjectionDimension.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nProjectionDimension.init \ninit \nProjectionDimension.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-projectiondimension.html#\u0060\u0060.ctor\u0060\u0060","title":"ProjectionDimension.\u0060\u0060.ctor\u0060\u0060","content":"ProjectionDimension.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-projectiondimension.html#init","title":"ProjectionDimension.init","content":"ProjectionDimension.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-projectiondimension.html#style","title":"ProjectionDimension.style","content":"ProjectionDimension.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sankeylinkcolorscale.html","title":"SankeyLinkColorscale","content":"SankeyLinkColorscale \n \nSankeyLinkColorscale.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSankeyLinkColorscale.init \ninit \nSankeyLinkColorscale.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sankeylinkcolorscale.html#\u0060\u0060.ctor\u0060\u0060","title":"SankeyLinkColorscale.\u0060\u0060.ctor\u0060\u0060","content":"SankeyLinkColorscale.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sankeylinkcolorscale.html#init","title":"SankeyLinkColorscale.init","content":"SankeyLinkColorscale.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sankeylinkcolorscale.html#style","title":"SankeyLinkColorscale.style","content":"SankeyLinkColorscale.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sankeylinks.html","title":"SankeyLinks","content":"SankeyLinks \n \nSankeyLinks.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSankeyLinks.init \ninit \nSankeyLinks.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sankeylinks.html#\u0060\u0060.ctor\u0060\u0060","title":"SankeyLinks.\u0060\u0060.ctor\u0060\u0060","content":"SankeyLinks.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sankeylinks.html#init","title":"SankeyLinks.init","content":"SankeyLinks.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sankeylinks.html#style","title":"SankeyLinks.style","content":"SankeyLinks.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sankeynodes.html","title":"SankeyNodes","content":"SankeyNodes \n \nSankeyNodes.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSankeyNodes.init \ninit \nSankeyNodes.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sankeynodes.html#\u0060\u0060.ctor\u0060\u0060","title":"SankeyNodes.\u0060\u0060.ctor\u0060\u0060","content":"SankeyNodes.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sankeynodes.html#init","title":"SankeyNodes.init","content":"SankeyNodes.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sankeynodes.html#style","title":"SankeyNodes.style","content":"SankeyNodes.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-slices.html","title":"Slices","content":"Slices \n \nSlices.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSlices.init \ninit \nSlices.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-slices.html#\u0060\u0060.ctor\u0060\u0060","title":"Slices.\u0060\u0060.ctor\u0060\u0060","content":"Slices.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-slices.html#init","title":"Slices.init","content":"Slices.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-slices.html#style","title":"Slices.style","content":"Slices.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-slicesfill.html","title":"SlicesFill","content":"SlicesFill \n \nSlicesFill.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSlicesFill.init \ninit \nSlicesFill.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-slicesfill.html#\u0060\u0060.ctor\u0060\u0060","title":"SlicesFill.\u0060\u0060.ctor\u0060\u0060","content":"SlicesFill.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-slicesfill.html#init","title":"SlicesFill.init","content":"SlicesFill.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-slicesfill.html#style","title":"SlicesFill.style","content":"SlicesFill.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-spaceframe.html","title":"Spaceframe","content":"Spaceframe \n \nSpaceframe.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSpaceframe.init \ninit \nSpaceframe.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-spaceframe.html#\u0060\u0060.ctor\u0060\u0060","title":"Spaceframe.\u0060\u0060.ctor\u0060\u0060","content":"Spaceframe.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-spaceframe.html#init","title":"Spaceframe.init","content":"Spaceframe.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-spaceframe.html#style","title":"Spaceframe.style","content":"Spaceframe.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-splomdiagonal.html","title":"SplomDiagonal","content":"SplomDiagonal \n \nSplomDiagonal.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSplomDiagonal.init \ninit \nSplomDiagonal.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-splomdiagonal.html#\u0060\u0060.ctor\u0060\u0060","title":"SplomDiagonal.\u0060\u0060.ctor\u0060\u0060","content":"SplomDiagonal.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-splomdiagonal.html#init","title":"SplomDiagonal.init","content":"SplomDiagonal.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-splomdiagonal.html#style","title":"SplomDiagonal.style","content":"SplomDiagonal.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-stockdata.html","title":"StockData","content":"StockData \n \nStockData.Create \nCreate \nStockData.create \ncreate \nStockData.Open \nOpen \nStockData.High \nHigh \nStockData.Low \nLow \nStockData.Close \nClose"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-stockdata.html#Create","title":"StockData.Create","content":"StockData.Create \nCreate \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-stockdata.html#create","title":"StockData.create","content":"StockData.create \ncreate \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-stockdata.html#Open","title":"StockData.Open","content":"StockData.Open \nOpen \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-stockdata.html#High","title":"StockData.High","content":"StockData.High \nHigh \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-stockdata.html#Low","title":"StockData.Low","content":"StockData.Low \nLow \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-stockdata.html#Close","title":"StockData.Close","content":"StockData.Close \nClose \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-streamtubestarts.html","title":"StreamTubeStarts","content":"StreamTubeStarts \n\n An object to set the Lighting of a 3D Scene\n \nStreamTubeStarts.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nStreamTubeStarts.init \ninit \nStreamTubeStarts.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-streamtubestarts.html#\u0060\u0060.ctor\u0060\u0060","title":"StreamTubeStarts.\u0060\u0060.ctor\u0060\u0060","content":"StreamTubeStarts.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-streamtubestarts.html#init","title":"StreamTubeStarts.init","content":"StreamTubeStarts.init \ninit \n\n Initializes a TubeStarts object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-streamtubestarts.html#style","title":"StreamTubeStarts.style","content":"StreamTubeStarts.style \nstyle \n\n Creates a function that applies the given style parameters to a TubeStarts object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sunburstleaf.html","title":"SunburstLeaf","content":"SunburstLeaf \n \nSunburstLeaf.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSunburstLeaf.init \ninit \nSunburstLeaf.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sunburstleaf.html#\u0060\u0060.ctor\u0060\u0060","title":"SunburstLeaf.\u0060\u0060.ctor\u0060\u0060","content":"SunburstLeaf.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sunburstleaf.html#init","title":"SunburstLeaf.init","content":"SunburstLeaf.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sunburstleaf.html#style","title":"SunburstLeaf.style","content":"SunburstLeaf.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sunburstroot.html","title":"SunburstRoot","content":"SunburstRoot \n \nSunburstRoot.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSunburstRoot.init \ninit \nSunburstRoot.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sunburstroot.html#\u0060\u0060.ctor\u0060\u0060","title":"SunburstRoot.\u0060\u0060.ctor\u0060\u0060","content":"SunburstRoot.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sunburstroot.html#init","title":"SunburstRoot.init","content":"SunburstRoot.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-sunburstroot.html#style","title":"SunburstRoot.style","content":"SunburstRoot.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-surface.html","title":"Surface","content":"Surface \n \nSurface.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nSurface.init \ninit \nSurface.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-surface.html#\u0060\u0060.ctor\u0060\u0060","title":"Surface.\u0060\u0060.ctor\u0060\u0060","content":"Surface.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-surface.html#init","title":"Surface.init","content":"Surface.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-surface.html#style","title":"Surface.style","content":"Surface.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-tablecells.html","title":"TableCells","content":"TableCells \n\n Cells type inherits from dynamic object\n \nTableCells.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTableCells.init \ninit \nTableCells.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-tablecells.html#\u0060\u0060.ctor\u0060\u0060","title":"TableCells.\u0060\u0060.ctor\u0060\u0060","content":"TableCells.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-tablecells.html#init","title":"TableCells.init","content":"TableCells.init \ninit \n\n Initialized Cells object\n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-tablecells.html#style","title":"TableCells.style","content":"TableCells.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-tablefill.html","title":"TableFill","content":"TableFill \n\n CellColor type inherits from dynamic object\n \nTableFill.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTableFill.init \ninit \nTableFill.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-tablefill.html#\u0060\u0060.ctor\u0060\u0060","title":"TableFill.\u0060\u0060.ctor\u0060\u0060","content":"TableFill.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-tablefill.html#init","title":"TableFill.init","content":"TableFill.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-tablefill.html#style","title":"TableFill.style","content":"TableFill.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-tableheader.html","title":"TableHeader","content":"TableHeader \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-traceselection.html","title":"TraceSelection","content":"TraceSelection \n\n Used to control selected/unselected trace item styles in supported traces.\n  \nTraceSelection.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTraceSelection.init \ninit \nTraceSelection.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-traceselection.html#\u0060\u0060.ctor\u0060\u0060","title":"TraceSelection.\u0060\u0060.ctor\u0060\u0060","content":"TraceSelection.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-traceselection.html#init","title":"TraceSelection.init","content":"TraceSelection.init \ninit \n\n Returns a new TraceSelection object with the given styles\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-traceselection.html#style","title":"TraceSelection.style","content":"TraceSelection.style \nstyle \n\n Returns a function that applies the given styles to a TraceSelection object\n "},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-treemapleaf.html","title":"TreemapLeaf","content":"TreemapLeaf \n \nTreemapLeaf.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTreemapLeaf.init \ninit \nTreemapLeaf.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-treemapleaf.html#\u0060\u0060.ctor\u0060\u0060","title":"TreemapLeaf.\u0060\u0060.ctor\u0060\u0060","content":"TreemapLeaf.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-treemapleaf.html#init","title":"TreemapLeaf.init","content":"TreemapLeaf.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-treemapleaf.html#style","title":"TreemapLeaf.style","content":"TreemapLeaf.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-treemaproot.html","title":"TreemapRoot","content":"TreemapRoot \n \nTreemapRoot.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTreemapRoot.init \ninit \nTreemapRoot.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-treemaproot.html#\u0060\u0060.ctor\u0060\u0060","title":"TreemapRoot.\u0060\u0060.ctor\u0060\u0060","content":"TreemapRoot.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-treemaproot.html#init","title":"TreemapRoot.init","content":"TreemapRoot.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-treemaproot.html#style","title":"TreemapRoot.style","content":"TreemapRoot.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-treemaptiling.html","title":"TreemapTiling","content":"TreemapTiling \n \nTreemapTiling.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTreemapTiling.init \ninit \nTreemapTiling.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-treemaptiling.html#\u0060\u0060.ctor\u0060\u0060","title":"TreemapTiling.\u0060\u0060.ctor\u0060\u0060","content":"TreemapTiling.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-treemaptiling.html#init","title":"TreemapTiling.init","content":"TreemapTiling.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-treemaptiling.html#style","title":"TreemapTiling.style","content":"TreemapTiling.style \nstyle \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-waterfallconnector.html","title":"WaterfallConnector","content":"WaterfallConnector \n\n Styles for connector lines in Waterfall Charts.\n\n Parameters:\n\n Line          : Sets the Line style for this WaterfallConnector\n\n Visible       : Whether or not connectors are visible\n\n ConnectorMode : Sets the shape of connector lines.\n \nWaterfallConnector.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nWaterfallConnector.init \ninit \nWaterfallConnector.style \nstyle"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-waterfallconnector.html#\u0060\u0060.ctor\u0060\u0060","title":"WaterfallConnector.\u0060\u0060.ctor\u0060\u0060","content":"WaterfallConnector.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-waterfallconnector.html#init","title":"WaterfallConnector.init","content":"WaterfallConnector.init \ninit \n"},{"uri":"https://plotly.net/reference/plotly-net-traceobjects-waterfallconnector.html#style","title":"WaterfallConnector.style","content":"WaterfallConnector.style \nstyle \n"},{"uri":"https://plotly.net/reference/global-globals.html","title":"Globals","content":"Globals \n \nGlobals.PLOTLYJS_VERSION \nPLOTLYJS_VERSION \nGlobals.SCRIPT_TEMPLATE \nSCRIPT_TEMPLATE \nGlobals.REQUIREJS_SCRIPT_TEMPLATE \nREQUIREJS_SCRIPT_TEMPLATE \nGlobals.LOGO_BASE64 \nLOGO_BASE64"},{"uri":"https://plotly.net/reference/global-globals.html#PLOTLYJS_VERSION","title":"Globals.PLOTLYJS_VERSION","content":"Globals.PLOTLYJS_VERSION \nPLOTLYJS_VERSION \n\n The plotly js version loaded from cdn in rendered html docs\n"},{"uri":"https://plotly.net/reference/global-globals.html#SCRIPT_TEMPLATE","title":"Globals.SCRIPT_TEMPLATE","content":"Globals.SCRIPT_TEMPLATE \nSCRIPT_TEMPLATE \n"},{"uri":"https://plotly.net/reference/global-globals.html#REQUIREJS_SCRIPT_TEMPLATE","title":"Globals.REQUIREJS_SCRIPT_TEMPLATE","content":"Globals.REQUIREJS_SCRIPT_TEMPLATE \nREQUIREJS_SCRIPT_TEMPLATE \n"},{"uri":"https://plotly.net/reference/global-globals.html#LOGO_BASE64","title":"Globals.LOGO_BASE64","content":"Globals.LOGO_BASE64 \nLOGO_BASE64 \n\n base64 encoded favicon logo for generated htmls\n"},{"uri":"https://plotly.net/index.html","title":"Plotly.NET\r\n","content":"(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Deedle\u0022\n#r \u0022nuget: FsHttp\u0022\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n# Plotly.NET\n \n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\nPlotly.NET provides functions for generating and rendering plotly.js charts in **.NET** programming languages \uD83D\uDCC8\uD83D\uDE80. \n\n**This documentation page is almost exclusively for the core F# API of Plotly.NET.** \n\nIt should be easy to translate them into C#. However, as work on the idiomatic C# API progresses, we will privde native C# docs as well.\n\n### Table of contents \n\n- [Installation](#Installation)\n    - [For applications and libraries](#For-applications-and-libraries)\n    - [For scripting](#For-scripting)\n    - [For dotnet interactive notebooks](#For-dotnet-interactive-notebooks)\n- [Overview](#Overview)\n    - [Basics](#Basics)\n        - [Initializing a chart](#Initializing-a-chart)\n        - [Styling a chart](#Styling-a-chart)\n        - [Displaying a chart](#Displaying-a-chart)\n    - [Comparison: Usage in F# and C#](#Comparison-Usage-in-F-and-C)\n        - [Functional pipeline style in F#](#Functional-pipeline-style-in-F)\n        - [Fluent interface style in C#](#Fluent-interface-style-in-C)\n        - [Declarative style in F# using the underlying \u0060DynamicObj\u0060](#Declarative-style-in-F-using-the-underlying)\n        - [Declarative style in C# using the underlying \u0060DynamicObj\u0060](#Declarative-style-in-C-using-the-underlying)\n- [Contributing and copyright](#Contributing-and-copyright)\n\n# Installation\n\nPlotly.NET consists of multiple packages. The two main ones are:\n\n- Plotly.NET [![](https://img.shields.io/nuget/vpre/Plotly.NET)](https://www.nuget.org/packages/Plotly.NET/), the core API written in F#. \n- Plotly.NET.CSharp [![](https://img.shields.io/nuget/vpre/Plotly.NET.CSharp)](https://www.nuget.org/packages/Plotly.NET.CSharp/), native C# bindings that make the usage of Plotly.NET more idiomatic from C#. This is work in progress. Missing charts and/or styling must be done via the core API. \n\n### For applications and libraries\n\nPlotly.NET packages are available on nuget to plug into your favorite package manager.\n\n - dotnet CLI\n\n    \u0060\u0060\u0060shell\n    dotnet add package Plotly.NET --version {{fsdocs-package-version}}\n    \u0060\u0060\u0060\n\n - paket CLI\n\n    \u0060\u0060\u0060shell\n    paket add Plotly.NET --version {{fsdocs-package-version}}\n    \u0060\u0060\u0060\n\n - package manager\n\n    \u0060\u0060\u0060shell\n    Install-Package Plotly.NET -Version {{fsdocs-package-version}}\n    \u0060\u0060\u0060\n\n    Or add the package reference directly to your \u0060.*proj\u0060 file:\n\n    \u0060\u0060\u0060\n    \u003CPackageReference Include=\u0022Plotly.NET\u0022 Version=\u0022{{fsdocs-package-version}}\u0022 /\u003E\n    \u0060\u0060\u0060\n\n### For scripting\n\nYou can include the package via an inline package reference:\n\n\u0060\u0060\u0060\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n\u0060\u0060\u0060\n\n### For dotnet interactive notebooks\n\nYou can use the same inline package reference as in scripts, but as an additional goodie\nthe interactive extensions for dotnet interactive have you covered for seamless chart rendering:\n\n\u0060\u0060\u0060\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n\u0060\u0060\u0060\n\n_Note_: \n\ndue to the currently fast development cycles of Dotnet Interactive, there might be increments in their versioning that renders the current version of Plotly.NET.Interactive incompatible (example [here](https://github.com/plotly/Plotly.NET/issues/67)).\n\nIf the interactive extension does not work, please file an issue and we will try to get it running again as soon as possible.\n\nA possible fix for this is the inclusion of Dotnet.Interactive preview package sources. To use these, add the following lines before referencning Plotly.NET.Interactive:\n\n\u0060\u0060\u0060no-hl\n#i \u0022nuget:https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5/nuget/v3/index.json\u0022\n#i \u0022nuget:https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json\u0022\n\u0060\u0060\u0060\n\n# Overview\n\n## Basics\n\nThe general, high-level API of Plotly.NET implements the following visualization flow:\n\n- **initialize** a \u0060GenericChart\u0060 object from the data you want to visualize by using the respective \u0060Chart.*\u0060 function, optionally setting some specific style parameters\n- further **style** the chart with fine-grained control, e.g. by setting axis titles, tick intervals, etc.\n- **display** (in the browser or as cell result in a notebook) or save the chart \n\n### Initializing a chart\n\nThe \u0060Chart\u0060 module contains a lot of functions named after the type of chart they will create, e.g. \n\u0060Chart.Point\u0060 will create a point chart, \u0060Chart.Scatter3d\u0060 wil create a 3D scatter chart, and so on.\n\nThe respective functions all contain specific arguments, but they all have in common that the first \nmandatory arguments are the data to visualize. \n\nExample: The first two arguments of the \u0060Chart.Point\u0060 function are the x and y data. You can therefore initialize a point chart like this:\n\n*)\nopen Plotly.NET\nlet xData = [ 0. .. 10. ]\nlet yData = [ 0. .. 10. ]\nlet myFirstChart = Chart.Point(xData, yData)\n\n(**\n\n### Styling a chart\n\nStyling functions are generally the \u0060Chart.with*\u0060 naming convention. The following styling example does:\n\n - set the chart title via \u0060Chart.withTitle\u0060\n - set the x axis title and removes the gridline from the axis via \u0060Chart.withXAxisStyle\u0060\n - set the y axis title and removes the gridline from the axis via \u0060Chart.withYAxisStyle\u0060\n\n*)\n\nlet myFirstStyledChart =\n    Chart.Point(xData, yData)\n    |\u003E Chart.withTitle \u0022Hello world!\u0022\n    |\u003E Chart.withXAxisStyle (\u0022xAxis\u0022)\n    |\u003E Chart.withYAxisStyle (\u0022yAxis\u0022)\n\n(**\n**Attention:** Styling functions mutate \uD83D\uDE08 the input chart, therefore possibly affecting bindings to intermediary results. \nWe recommend creating a single chart for each workflow to prevent unexpected results\n\n### Displaying a chart in the browser\n\nThe \u0060Chart.Show\u0060 function will open a browser window and render the input chart there. When working in a notebook context, after\n[referencing Plotly.NET.Interactive](#For-dotnet-interactive-notebooks), the function is not necessary, just end the cell with the value of the chart.\n\n*)\n\n(***do-not-eval***)\nmyFirstChart |\u003E Chart.show\n\n(**Should render this chart in your brower:*)\n\n(***hide***)\nmyFirstChart |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n(***do-not-eval***)\nmyFirstStyledChart |\u003E Chart.show\n\n(**And here is what happened after applying the styles from above:*)\n\n(***hide***)\nmyFirstStyledChart |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n\n(**\n### Displaying a chart in a notbook cell output\n\nIn a notebook context you usually have (at leat when running on a jupyter server like binder) no access to the browser on the machine where plotly runs on.\nThat\u0027s why you can render charts directly in the cell output. Just end the cell with the chart value:\n*)\n\nlet xData\u0027 = [ 0. .. 10. ]\nlet yData\u0027 = [ 0. .. 10. ]\nChart.Point(xData\u0027, yData\u0027)\n\n(**Here is the styled chart:*)\n\nChart.Point(xData, yData)\n|\u003E Chart.withTitle \u0022Hello world!\u0022\n|\u003E Chart.withXAxisStyle (\u0022xAxis\u0022)\n|\u003E Chart.withYAxisStyle (\u0022yAxis\u0022)\n\n\n(**\n## Comparison: Usage in F# and C#\n\nOne of the main design points of Plotly.NET it is to provide support for multiple flavors of chart generation. Here are 2 examples in different styles and languages that create an equivalent chart:\n \n### Functional pipeline style in F#:\n*)\n\n[ (1, 5); (2, 10) ]\n|\u003E Chart.Point\n|\u003E Chart.withTraceInfo (Name = \u0022Hello from F#\u0022)\n|\u003E Chart.withYAxisStyle (TitleText = \u0022xAxis\u0022)\n|\u003E Chart.withXAxisStyle (TitleText = \u0022yAxis\u0022)\n\n(**\n### Fluent interface style in C#:\n\nThis example uses the high-level native C# bindings for Plotly.NET that are provided by the \u0060Plotly.NET.CSharp\u0060 package.\n\n\u0060\u0060\u0060csharp\nusing System;\nusing Plotly.NET.CSharp;\n\nChart.Point\u003Cdouble, double, string\u003E(\n    x: new double[] { 1, 2 }, \n    y: new double[] { 5, 10 }\n)\n.WithTraceInfo(\u0022Hello from C#\u0022, ShowLegend: true)\n.WithXAxisStyle\u003Cdouble, double, string\u003E(Title: Plotly.NET.Title.init(\u0022xAxis\u0022))\n.WithYAxisStyle\u003Cdouble, double, string\u003E(Title: Plotly.NET.Title.init(\u0022yAxis\u0022))\n.Show();\n\u0060\u0060\u0060\n\n### Declarative style in F# using the underlying \u0060DynamicObj\u0060:\n\nThis API is the most low-level and closest to the original plotly.js syntax. Make sure to spell dynamic members exactly as they are used in the plotly.js json schema.\n*)\n\nopen Plotly.NET.LayoutObjects\n\nlet xAxis =\n    let tmp = LinearAxis()\n    tmp?title \u003C- \u0022xAxis\u0022\n    tmp?showgrid \u003C- false\n    tmp?showline \u003C- true\n    tmp\n\nlet yAxis =\n    let tmp = LinearAxis()\n    tmp?title \u003C- \u0022yAxis\u0022\n    tmp?showgrid \u003C- false\n    tmp?showline \u003C- true\n    tmp\n\nlet layout =\n    let tmp = Layout()\n    tmp?xaxis \u003C- xAxis\n    tmp?yaxis \u003C- yAxis\n    tmp?showlegend \u003C- true\n    tmp\n\nlet trace =\n    let tmp = Trace(\u0022scatter\u0022)\n    tmp?x \u003C- [ 1; 2 ]\n    tmp?y \u003C- [ 5; 10 ]\n    tmp?mode \u003C- \u0022markers\u0022\n    tmp?name \u003C- \u0022Hello from F#\u0022\n    tmp\n\nGenericChart.ofTraceObject true trace |\u003E GenericChart.setLayout layout\n\n(**\n### Declarative style in C# using the underlying \u0060DynamicObj\u0060:\n\nnote that this works only when using the Plotly.NET core API, as the C# bindings only target the high level API.\n\n\u0060\u0060\u0060csharp\nusing System;\nusing Plotly.NET;\nusing Plotly.NET.LayoutObjects;\n\ndouble[] x = new double[] { 1, 2 };\ndouble[] y = new double[] { 5, 10 };\n\nLinearAxis xAxis = new LinearAxis();\nxAxis.SetValue(\u0022title\u0022, \u0022xAxis\u0022);\nxAxis.SetValue(\u0022showgrid\u0022, false);\nxAxis.SetValue(\u0022showline\u0022, true);\n\nLinearAxis yAxis = new LinearAxis();\nyAxis.SetValue(\u0022title\u0022, \u0022yAxis\u0022);\nyAxis.SetValue(\u0022showgrid\u0022, false);\nyAxis.SetValue(\u0022showline\u0022, true);\n\nLayout layout = new Layout();\nlayout.SetValue(\u0022xaxis\u0022, xAxis);\nlayout.SetValue(\u0022yaxis\u0022, yAxis);\nlayout.SetValue(\u0022showlegend\u0022, true);\n\nTrace trace = new Trace(\u0022scatter\u0022);\ntrace.SetValue(\u0022x\u0022, x);\ntrace.SetValue(\u0022y\u0022, y);\ntrace.SetValue(\u0022mode\u0022, \u0022markers\u0022);\ntrace.SetValue(\u0022name\u0022, \u0022Hello from C#\u0022);\n\nGenericChart\n    .ofTraceObject(true, trace)\n    .WithLayout(layout)\n    .Show();\n\u0060\u0060\u0060\n\n# Contributing and copyright\n\nThe project is hosted on [GitHub][gh] where you can [report issues][issues], fork \nthe project and submit pull requests. If you\u0027re adding a new public API, please also \nconsider adding [samples][docs] that can be turned into a documentation. You might\nalso want to read the [library design notes][readme] to understand how it works.\n\nThe library is available under the OSI-approved MIT license, which allows modification and \nredistribution for both commercial and non-commercial purposes. For more information see the \n[License file][license] in the GitHub repository. \n\n  [docs]: https://github.com/plotly/Plotly.NET/tree/dev/docs\n  [gh]: https://github.com/plotly/Plotly.NET\n  [issues]: https://github.com/plotly/Plotly.NET/issues\n  [readme]: https://github.com/plotly/Plotly.NET/blob/dev/README.md\n  [license]: https://github.com/plotly/Plotly.NET/blob/dev/LICENSE\n*)"},{"uri":"https://plotly.net/3D-charts/3d-cone-charts.html","title":"3D Cone plots","content":"(**\n---\ntitle: 3D Cone plots\ncategory: 3D Charts\ncategoryindex: 4\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D Cone plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create 3D-Cone charts in F#.\n\n*)\n\nopen System\nopen Plotly.NET\n\n\nlet cone =\n    Chart.Cone(x = [ 1; 1; 1 ], y = [ 1; 2; 3 ], z = [ 1; 1; 1 ], u = [ 1; 2; 3 ], v = [ 1; 1; 2 ], w = [ 4; 4; 1 ])\n\n(*** condition: ipynb ***)\n#if IPYNB\ncone\n#endif // IPYNB\n\n(***hide***)\ncone |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/3D-charts/3d-isosurface-plots.html","title":"3D IsoSurface plots","content":"(**\n---\ntitle: 3D IsoSurface plots\ncategory: 3D Charts\ncategoryindex: 4\nindex: 7\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D IsoSurface plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create 3D-IsoSurface charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen System\nopen Plotly.NET\n\nlet linspace (min, max, n) =\n    if n \u003C= 2 then\n        failwithf \u0022n needs to be larger then 2\u0022\n\n    let bw = float (max - min) / (float n - 1.)\n    Array.init n (fun i -\u003E min \u002B (bw * float i))\n\nlet mgrid (min, max, n) =\n\n    let data = linspace (min, max, n)\n\n    let z =\n        [| for i in 1..n do\n               [| for i in 1..n do\n                      yield data |] |]\n\n    let x =\n        [| for i in 1..n do\n               [| for j in 1..n do\n                      yield\n                          [| for k in 1..n do\n                                 yield data.[i - 1] |] |] |]\n\n    let y =\n        [| for i in 1..n do\n               [| for j in 1..n do\n                      yield\n                          [| for k in 1..n do\n                                 yield data.[j - 1] |] |] |]\n\n    x, y, z\n\nlet xIso, yIso, zIso =\n    mgrid (-5., 5., 40)\n    |\u003E fun (x, y, z) -\u003E\n        (x |\u003E Array.concat |\u003E Array.concat), (y |\u003E Array.concat |\u003E Array.concat), (z |\u003E Array.concat |\u003E Array.concat)\n\nlet valueIso =\n    Array.map3 (fun x y z -\u003E x * x * 0.5 \u002B y * y \u002B z * z * 2.) xIso yIso zIso\n\nopen Plotly.NET.TraceObjects\n\nlet isoSurface =\n    Chart.IsoSurface(\n        x = xIso,\n        y = yIso,\n        z = zIso,\n        value = valueIso,\n        IsoMin = 10.,\n        IsoMax = 40.,\n        Caps = Caps.init (X = (CapFill.init (Show = false)), Y = (CapFill.init (Show = false))),\n        Surface = Surface.init (Count = 5)\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nisoSurface\n#endif // IPYNB\n\n(***hide***)\nisoSurface |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/3D-charts/3d-mesh-plots.html","title":"3D Mesh plots","content":"(**\n---\ntitle: 3D Mesh plots\ncategory: 3D Charts\ncategoryindex: 4\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D Mesh plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create 3D-Mesh charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen System\nopen Plotly.NET\n\n\n//---------------------- Generate linearly spaced vector ----------------------\nlet linspace (min, max, n) =\n    if n \u003C= 2 then\n        failwithf \u0022n needs to be larger then 2\u0022\n\n    let bw = float (max - min) / (float n - 1.)\n    Array.init n (fun i -\u003E min \u002B (bw * float i))\n//[|min ..bw ..max|]\n\n//---------------------- Create example data ----------------------\nlet size = 100\nlet x = linspace (-2. * Math.PI, 2. * Math.PI, size)\nlet y = linspace (-2. * Math.PI, 2. * Math.PI, size)\n\nlet f x y = -(5. * x / (x ** 2. \u002B y ** 2. \u002B 1.))\n\nlet z = Array.init size (fun i -\u003E Array.init size (fun j -\u003E f x.[j] y.[i]))\n\nlet rnd = System.Random()\nlet a = Array.init 50 (fun _ -\u003E rnd.NextDouble())\nlet b = Array.init 50 (fun _ -\u003E rnd.NextDouble())\nlet c = Array.init 50 (fun _ -\u003E rnd.NextDouble())\n\nopen Plotly.NET.TraceObjects\n\nlet mesh3d = Chart.Mesh3D(x = a, y = b, z = c, FlatShading = true)\n\n(*** condition: ipynb ***)\n#if IPYNB\nmesh3d\n#endif // IPYNB\n\n(***hide***)\nmesh3d |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/3D-charts/3d-scatter-plots.html","title":"3D point and line charts","content":"(**\n---\ntitle: 3D point and line charts\ncategory: 3D Charts\ncategoryindex: 4\nindex: 1\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D point plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create three-dimensional point and line charts in F#.\n\nPoint3D, Line3D, and Bubble3D charts are all derived from \u0060Chart.Scatter3D\u0060 and can be generated by that function as well.\nHowever, \u0060Chart.Point3D\u0060, \u0060Chart.Line3D\u0060, or \u0060Chart.Bubble3D\u0060 provide sensible defaults and arguments for the respective derived chart, and are recommended to use.\n\n## 3D point chart\n*)\n\nopen Plotly.NET\n\nlet point3d =\n    Chart.Point3D(\n        xyz = [ 1, 3, 2; 6, 5, 4; 7, 9, 8 ],\n        MultiText = [ \u0022A\u0022; \u0022B\u0022; \u0022C\u0022 ],\n        TextPosition = StyleParam.TextPosition.BottomCenter\n    )\n    |\u003E Chart.withXAxisStyle (\u0022my x-axis\u0022, Id = StyleParam.SubPlotId.Scene 1) // in contrast to 2D plots, x and y axes of 3D charts have to be set via the scene object\n    |\u003E Chart.withYAxisStyle (\u0022my y-axis\u0022, Id = StyleParam.SubPlotId.Scene 1) // in contrast to 2D plots, x and y axes of 3D charts have to be set via the scene object\n    |\u003E Chart.withZAxisStyle (\u0022my z-axis\u0022)\n    |\u003E Chart.withSize (800., 800.)\n\n(*** condition: ipynb ***)\n#if IPYNB\npoint3d\n#endif // IPYNB\n\n(***hide***)\npoint3d |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n(**\n## 3D point chart with marker colorscale\n*)\n\nlet point3d2 =\n    Chart.Point3D(\n        xyz = [ 1, 3, 2; 6, 5, 4; 7, 9, 8 ],\n        MarkerColor = Color.fromColorScaleValues [ 0; 1; 2 ],\n        MultiText = [ \u0022A\u0022; \u0022B\u0022; \u0022C\u0022 ],\n        TextPosition = StyleParam.TextPosition.BottomCenter\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\npoint3d2\n#endif // IPYNB\n\n(***hide***)\npoint3d2 |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n(**\n# 3D Line chart\n*)\n\nlet line3d =\n    Chart.Line3D(\n        xyz = [ 1, 3, 2; 6, 5, 4; 7, 9, 8 ],\n        MultiText = [ \u0022A\u0022; \u0022B\u0022; \u0022C\u0022 ],\n        TextPosition = StyleParam.TextPosition.BottomCenter,\n        ShowMarkers = true\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nline3d\n#endif // IPYNB\n\n(***hide***)\nline3d |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n(**\n## 3D line chart with line colorscale\n*)\n\nlet line3d2 =\n    Chart.Line3D(\n        xyz = [ 1, 3, 2; 6, 5, 4; 7, 9, 8 ],\n        MultiText = [ \u0022A\u0022; \u0022B\u0022; \u0022C\u0022 ],\n        TextPosition = StyleParam.TextPosition.BottomCenter,\n        ShowMarkers = true,\n        LineColor = Color.fromColorScaleValues [ 0; 1; 2 ],\n        LineWidth = 10.\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nline3d2\n#endif // IPYNB\n\n(***hide***)\nline3d2 |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n\n(**\n# 3D Bubble plots\n*)\n\nlet bubble3d =\n    Chart.Bubble3D(\n        xyz = [ 1, 3, 2; 6, 5, 4; 7, 9, 8 ],\n        sizes = [ 10; 20; 30 ],\n        MultiText = [ \u0022A\u0022; \u0022B\u0022; \u0022C\u0022 ],\n        TextPosition = StyleParam.TextPosition.BottomCenter\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nbubble3d\n#endif // IPYNB\n\n(***hide***)\nbubble3d |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n\n(**\n## 3D bubble chart with colorscale\n*)\n\nlet bubble3d2 =\n    Chart.Bubble3D(\n        xyz = [ 1, 3, 2; 6, 5, 4; 7, 9, 8 ],\n        sizes = [ 10; 20; 30 ],\n        MultiText = [ \u0022A\u0022; \u0022B\u0022; \u0022C\u0022 ],\n        TextPosition = StyleParam.TextPosition.BottomCenter,\n        MarkerColor = Color.fromColorScaleValues [ 0; 1; 2 ],\n        MarkerColorScale = StyleParam.Colorscale.Viridis\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nbubble3d2\n#endif // IPYNB\n\n(***hide***)\nbubble3d2 |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/3D-charts/3d-streamtube-plots.html","title":"3D streamtube plots","content":"(**\n---\ntitle: 3D streamtube plots\ncategory: 3D Charts\ncategoryindex: 4\nindex: 5\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../data/Deedle.dll\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D Streamtube plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create 3D-StreamTube charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Deedle\nopen System\nopen Plotly.NET\nopen Plotly.NET.TraceObjects\n\nlet tubeData =\n    __SOURCE_DIRECTORY__ \u002B \u0022/../data/streamtube-wind.csv\u0022\n    |\u003E Frame.ReadCsv\n\nlet streamTube =\n    Chart.StreamTube(\n        x = (tubeData.[\u0022x\u0022] |\u003E Series.values),\n        y = (tubeData.[\u0022y\u0022] |\u003E Series.values),\n        z = (tubeData.[\u0022z\u0022] |\u003E Series.values),\n        u = (tubeData.[\u0022u\u0022] |\u003E Series.values),\n        v = (tubeData.[\u0022v\u0022] |\u003E Series.values),\n        w = (tubeData.[\u0022w\u0022] |\u003E Series.values),\n        TubeStarts =\n            StreamTubeStarts.init (\n                X = Array.init 16 (fun _ -\u003E 80),\n                Y = [ 20; 30; 40; 50; 20; 30; 40; 50; 20; 30; 40; 50; 20; 30; 40; 50 ],\n                Z = [ 0; 0; 0; 0; 5; 5; 5; 5; 10; 10; 10; 10; 15; 15; 15; 15 ]\n            )\n    )\n\n\n(*** condition: ipynb ***)\n#if IPYNB\nstreamTube\n#endif // IPYNB\n\n(***hide***)\nstreamTube |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/3D-charts/3d-surface-plots.html","title":"3D surface plots","content":"(**\n---\ntitle: 3D surface plots\ncategory: 3D Charts\ncategoryindex: 4\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D surface plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create 3D surface plots in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\nopen System\nopen Plotly.NET\n\n//---------------------- Generate linearly spaced vector ----------------------\nlet linspace (min, max, n) =\n    if n \u003C= 2 then\n        failwithf \u0022n needs to be larger then 2\u0022\n\n    let bw = float (max - min) / (float n - 1.)\n    Array.init n (fun i -\u003E min \u002B (bw * float i))\n\n//---------------------- Create example data ----------------------\nlet size = 100\nlet x = linspace (-2. * Math.PI, 2. * Math.PI, size)\nlet y = linspace (-2. * Math.PI, 2. * Math.PI, size)\n\nlet f x y = -(5. * x / (x ** 2. \u002B y ** 2. \u002B 1.))\n\nlet z = Array.init size (fun i -\u003E Array.init size (fun j -\u003E f x.[j] y.[i]))\n\nlet surface = Chart.Surface(zData = z)\n\n(*** condition: ipynb ***)\n#if IPYNB\nsurface\n#endif // IPYNB\n\n(***hide***)\nsurface |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n// Create simple example data were x y and z is given (z is a xy-Matrix)\nlet x\u0027 = [ 0.; 2.5 ]\nlet y\u0027 = [ 0.; 2.5 ]\n\nlet z\u0027 =\n    [ [ 1.; 1. ] // row wise (length x)\n      [ 1.; 2. ] ] // column (length y)\n\nopen Plotly.NET.TraceObjects\n\nlet surface2 =\n    Chart.Surface(zData = z\u0027, X = x\u0027, Y = y\u0027, Opacity = 0.5, Contours = Contours.initXyz (Show = true))\n\n(*** condition: ipynb ***)\n#if IPYNB\nsurface2\n#endif // IPYNB\n\n(***hide***)\nsurface2 |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/3D-charts/3d-volume-plots.html","title":"3D Volume plots","content":"(**\n---\ntitle: 3D Volume plots\ncategory: 3D Charts\ncategoryindex: 4\nindex: 6\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 3D Volume plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create 3D-Volume charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen System\nopen Plotly.NET\n\nlet linspace (min, max, n) =\n    if n \u003C= 2 then\n        failwithf \u0022n needs to be larger then 2\u0022\n\n    let bw = float (max - min) / (float n - 1.)\n    Array.init n (fun i -\u003E min \u002B (bw * float i))\n\nlet mgrid (min, max, n) =\n\n    let data = linspace (min, max, n)\n\n    let z =\n        [| for i in 1..n do\n               [| for i in 1..n do\n                      yield data |] |]\n\n    let x =\n        [| for i in 1..n do\n               [| for j in 1..n do\n                      yield\n                          [| for k in 1..n do\n                                 yield data.[i - 1] |] |] |]\n\n    let y =\n        [| for i in 1..n do\n               [| for j in 1..n do\n                      yield\n                          [| for k in 1..n do\n                                 yield data.[j - 1] |] |] |]\n\n    x, y, z\n\nlet x, y, z =\n    mgrid (-8., 8., 40)\n    |\u003E fun (x, y, z) -\u003E\n        (x |\u003E Array.concat |\u003E Array.concat), (y |\u003E Array.concat |\u003E Array.concat), (z |\u003E Array.concat |\u003E Array.concat)\n\nlet values = Array.map3 (fun x y z -\u003E sin (x * y * z) / (x * y * z)) x y z\n\nopen Plotly.NET.TraceObjects\n\nlet volume =\n    Chart.Volume(\n        x = x,\n        y = y,\n        z = z,\n        value = values,\n        Opacity = 0.1,\n        Surface = (Surface.init (Count = 17)),\n        IsoMin = 0.1,\n        IsoMax = 0.8\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nvolume\n#endif // IPYNB\n\n(***hide***)\nvolume |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/carpet-charts/carpet_line_scatter_plots.html","title":"Carpet line and scatter plots","content":"(**\n---\ntitle: Carpet line and scatter plots\ncategory: Carpet Plots\ncategoryindex: 12\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Carpet charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create carpet charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\n//carpet coordinate data\nlet a = [ 4.; 4.; 4.; 4.5; 4.5; 4.5; 5.; 5.; 5.; 6.; 6.; 6. ]\nlet b = [ 1.; 2.; 3.; 1.; 2.; 3.; 1.; 2.; 3.; 1.; 2.; 3. ]\nlet y = [ 2.; 3.5; 4.; 3.; 4.5; 5.; 5.5; 6.5; 7.5; 8.; 8.5; 10. ]\n\n//carpet plot data\nlet aData = [ 4.; 5.; 5.; 6. ]\nlet bData = [ 1.; 1.; 2.; 3. ]\nlet sizes = [ 5; 10; 15; 20 ]\n\n(**\nA [carpet plot](https://en.wikipedia.org/wiki/Carpet_plot) is any of a few different specific types of plot. The more common plot referred to as a carpet plot is one that illustrates the interaction between two or more independent variables and one or more dependent variables in a two-dimensional plot. \n\nBesides the ability to incorporate more variables, another feature that distinguishes a carpet plot from an equivalent contour plot or 3D surface plot is that a carpet plot can be used to more accurately interpolate data points. \n\nA conventional carpet plot can capture the interaction of up to three independent variables and three dependent variables and still be easily read and interpolated.\n\nCarpet plots have common applications within areas such as material science for showing elastic modulus in laminates,and within aeronautics.\n\nA carpet plot with two independent variables and one dependent variable is often called a cheater plot for the use of a phantom \u0022cheater\u0022 axis instead of the horizontal axis. \n\n\n\n## Carpet Traces\n\nIn plotly, carpet plots are different to all other trace types in the regard that the coordinate system of the carpet is not set on the layout, but is itself a trace.\n\nUse \u0060Chart.Carpet\u0060 to define these \u0060coordinate traces\u0060. All carpets have a mandatory identifier, which will be used by other traces to define which carpet coordinate system to use.\n*)\n\nlet carpet = Chart.Carpet(carpetId = \u0022carpetIdentifier\u0022, A = a, B = b, Y = y)\n\n(*** condition: ipynb ***)\n#if IPYNB\ncarpet\n#endif // IPYNB\n\n(***hide***)\ncarpet |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Carpet point charts\n\nuse \u0060Chart.PointCarpet\u0060 to create a point plot on the referenced carpet coordinate system:\n*)\nlet carpetPoint =\n    [ carpet\n      Chart.PointCarpet(a = aData, b = bData, carpetAnchorId = \u0022carpetIdentifier\u0022, Name = \u0022Point\u0022) ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\ncarpetPoint\n#endif // IPYNB\n\n(***hide***)\ncarpetPoint |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Carpet line charts\n\nuse \u0060Chart.LineCarpet\u0060 to create a line plot on the referenced carpet coordinate system:\n*)\n\nlet carpetLine =\n    [ carpet\n      Chart.LineCarpet(a = aData, b = bData, carpetAnchorId = \u0022carpetIdentifier\u0022, Name = \u0022Line\u0022) ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\ncarpetLine\n#endif // IPYNB\n\n(***hide***)\ncarpetLine |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Carpet Spline charts\n\nuse \u0060Chart.LineCarpet\u0060 to create a spline plot on the referenced carpet coordinate system:\n*)\n\nlet carpetSpline =\n    [ carpet\n      Chart.SplineCarpet(a = aData, b = bData, carpetAnchorId = \u0022carpetIdentifier\u0022, Name = \u0022Spline\u0022) ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\ncarpetSpline\n#endif // IPYNB\n\n(***hide***)\ncarpetSpline |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Carpet bubble charts\n\nuse \u0060Chart.LineCarpet\u0060 to create a bubble plot on the referenced carpet coordinate system:\n*)\n\nlet carpetBubble =\n    [ carpet\n      Chart.BubbleCarpet(absizes = (Seq.zip3 aData bData sizes), carpetAnchorId = \u0022carpetIdentifier\u0022, Name = \u0022Bubble\u0022) ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\ncarpetBubble\n#endif // IPYNB\n\n(***hide***)\ncarpetBubble |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/carpet-charts/contourcarpet_plots.html","title":"Contour carpet plots","content":"(**\n---\ntitle: Contour carpet plots\ncategory: Carpet Plots\ncategoryindex: 12\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Contour carpet charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create contour plots on carpets in F#.\n\n*)\n\nopen Plotly.NET\nopen Plotly.NET.LayoutObjects\n\nlet contourCarpet =\n    [ Chart.Carpet(\n          carpetId = \u0022contour\u0022,\n          A = [ 0.; 1.; 2.; 3.; 0.; 1.; 2.; 3.; 0.; 1.; 2.; 3. ],\n          B = [ 4.; 4.; 4.; 4.; 5.; 5.; 5.; 5.; 6.; 6.; 6.; 6. ],\n          X = [ 2.; 3.; 4.; 5.; 2.2; 3.1; 4.1; 5.1; 1.5; 2.5; 3.5; 4.5 ],\n          Y = [ 1.; 1.4; 1.6; 1.75; 2.; 2.5; 2.7; 2.75; 3.; 3.5; 3.7; 3.75 ],\n          AAxis =\n              LinearAxis.initCarpet (\n                  TickPrefix = \u0022a = \u0022,\n                  Smoothing = 0.,\n                  MinorGridCount = 9,\n                  AxisType = StyleParam.AxisType.Linear\n              ),\n          BAxis =\n              LinearAxis.initCarpet (\n                  TickPrefix = \u0022b = \u0022,\n                  Smoothing = 0.,\n                  MinorGridCount = 9,\n                  AxisType = StyleParam.AxisType.Linear\n              ),\n          Opacity = 0.75\n      )\n      Chart.ContourCarpet(\n          z = [ 1.; 1.96; 2.56; 3.0625; 4.; 5.0625; 1.; 7.5625; 9.; 12.25; 15.21; 14.0625 ],\n          carpetAnchorId = \u0022contour\u0022,\n          A = [ 0; 1; 2; 3; 0; 1; 2; 3; 0; 1; 2; 3 ],\n          B = [ 4; 4; 4; 4; 5; 5; 5; 5; 6; 6; 6; 6 ],\n          ContourLineColor = Color.fromKeyword White,\n          ShowContourLabels = true\n      ) ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\ncontourCarpet\n#endif // IPYNB\n\n(***hide***)\ncontourCarpet |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/categorical-charts/icicle.html","title":"Icicle Charts","content":"(**\n---\ntitle: Icicle Charts\ncategory: Categorical Charts\ncategoryindex: 10\nindex: 4\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Icicle charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create icicle charts in F#.\n\nIcicle charts visualize hierarchical data using rectangular sectors that cascade from root to leaves in one of four directions: up, down, left, or right. \nSimilar to Sunburst charts and Treemaps charts, the hierarchy is defined by labels and parents attributes. \nClick on one sector to zoom in/out, which also displays a pathbar on the top of your icicle. \nTo zoom out, you can click the parent sector or click the pathbar as well.\n*)\n\nopen Plotly.NET\nopen Plotly.NET.TraceObjects\n\nlet character =\n    [ \u0022Eve\u0022; \u0022Cain\u0022; \u0022Seth\u0022; \u0022Enos\u0022; \u0022Noam\u0022; \u0022Abel\u0022; \u0022Awan\u0022; \u0022Enoch\u0022; \u0022Azura\u0022 ]\n\nlet parent = [ \u0022\u0022; \u0022Eve\u0022; \u0022Eve\u0022; \u0022Seth\u0022; \u0022Seth\u0022; \u0022Eve\u0022; \u0022Eve\u0022; \u0022Awan\u0022; \u0022Eve\u0022 ]\n\nlet icicle =\n    Chart.Icicle(\n        labels = character,\n        parents = parent,\n        ShowSectionColorScale = true,\n        SectionColorScale = StyleParam.Colorscale.Viridis,\n        TilingOrientation = StyleParam.Orientation.Vertical,\n        TilingFlip = StyleParam.TilingFlip.Y,\n        PathBarEdgeShape = StyleParam.PathbarEdgeShape.BackSlash\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nicicle\n#endif // IPYNB\n\n(***hide***)\nicicle |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## More styled example\n\nThis example shows the usage of some of the styling possibility using \u0060Chart.Icicle\u0060.\nFor even more styling control, use the respective TraceStyle function \u0060TraceDomainStyle.Icicle\u0060\n*)\n\nlet icicleStyled =\n    let labelsParents =\n        [ (\u0022A\u0022, \u0022\u0022), 20\n          (\u0022B\u0022, \u0022\u0022), 1\n          (\u0022C\u0022, \u0022\u0022), 2\n          (\u0022D\u0022, \u0022\u0022), 3\n          (\u0022E\u0022, \u0022\u0022), 4\n\n          (\u0022AA\u0022, \u0022A\u0022), 15\n          (\u0022AB\u0022, \u0022A\u0022), 5\n\n          (\u0022BA\u0022, \u0022B\u0022), 1\n\n          (\u0022AAA\u0022, \u0022AA\u0022), 10\n          (\u0022AAB\u0022, \u0022AA\u0022), 5 ]\n\n    Chart.Icicle(\n        labelsparents = (labelsParents |\u003E Seq.map fst),\n        Values = (labelsParents |\u003E Seq.map snd),\n        BranchValues = StyleParam.BranchValues.Total, // branch values are the total of their childrens values\n        SectionColorScale = StyleParam.Colorscale.Viridis,\n        ShowSectionColorScale = true,\n        SectionOutlineColor = Color.fromKeyword Black,\n        Tiling = IcicleTiling.init (Flip = StyleParam.TilingFlip.XY),\n        UseDefaults = false\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nicicleStyled\n#endif // IPYNB\n\n(***hide***)\nicicleStyled |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/categorical-charts/parallel-categories.html","title":"Parallel categories","content":"(**\n---\ntitle: Parallel categories\ncategory: Categorical Charts\ncategoryindex: 10\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Parallel categories\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create parallel categories plot in F#.\n\nThe parallel categories diagram (also known as parallel sets or alluvial diagram) is a visualization of multi-dimensional categorical data sets. Each variable in the data set is represented by a column of rectangles, where each rectangle corresponds to a discrete value taken on by that variable. The relative heights of the rectangles reflect the relative frequency of occurrence of the corresponding value.\n\nCombinations of category rectangles across dimensions are connected by ribbons, where the height of the ribbon corresponds to the relative frequency of occurrence of the combination of categories in the data set.\n*)\nopen Plotly.NET\nopen Plotly.NET.TraceObjects\n\nlet dims =\n    [ Dimension.initParallel (Values = [ \u0022Cat1\u0022; \u0022Cat1\u0022; \u0022Cat1\u0022; \u0022Cat1\u0022; \u0022Cat2\u0022; \u0022Cat2\u0022; \u0022Cat3\u0022 ], Label = \u0022A\u0022)\n      Dimension.initParallel (Values = [ 0; 1; 0; 1; 0; 0; 0 ], Label = \u0022B\u0022, TickText = [ \u0022YES\u0022; \u0022NO\u0022 ]) ]\n\nlet parcats =\n    Chart.ParallelCategories(\n        dimensions = dims,\n        LineColor = Color.fromColorScaleValues [ 0.; 1.; 0.; 1.; 0.; 0.; 0. ],\n        LineColorScale = StyleParam.Colorscale.Blackbody\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nparcats\n#endif // IPYNB\n\n(***hide***)\nparcats |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## More styled example\n\nThis example shows the usage of some of the styling possibility using \u0060Chart.ParallelCategories\u0060.\nFor even more styling control, use the respective TraceStyle function \u0060TraceDomainStyle.ParallelCategories\u0060\n*)\n\nlet parcatsStyled =\n    let dims =\n        [ Dimension.initParallel (Values = [ \u0022A\u0022; \u0022A\u0022; \u0022A\u0022; \u0022B\u0022; \u0022B\u0022; \u0022B\u0022; \u0022C\u0022; \u0022D\u0022 ], Label = \u0022Lvl1\u0022)\n          Dimension.initParallel (Values = [ \u0022AA\u0022; \u0022AA\u0022; \u0022AB\u0022; \u0022AB\u0022; \u0022AB\u0022; \u0022AB\u0022; \u0022AB\u0022; \u0022AB\u0022 ], Label = \u0022Lvl2\u0022)\n          Dimension.initParallel (Values = [ \u0022AAA\u0022; \u0022AAB\u0022; \u0022AAC\u0022; \u0022AAC\u0022; \u0022AAB\u0022; \u0022AAB\u0022; \u0022AAA\u0022; \u0022AAA\u0022 ], Label = \u0022Lvl3\u0022) ]\n\n    Chart.ParallelCategories(\n        dimensions = dims,\n        LineColor = Color.fromColorScaleValues [ 0; 1; 2; 2; 1; 1; 0; 0 ], // These values map to the last category axis, meaning [AAA =\u003E 0; AAB = 1; AAC =\u003E 2]\n        LineColorScale = StyleParam.Colorscale.Viridis,\n        BundleColors = false\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nparcatsStyled\n#endif // IPYNB\n\n(***hide***)\nparcatsStyled |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/categorical-charts/parallel-coords.html","title":"Parallel coordinates","content":"(**\n---\ntitle: Parallel coordinates\ncategory: Categorical Charts\ncategoryindex: 10\nindex: 2\n---\n*)\n \n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../data/Deedle.dll\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n\n(** \n# Parallel coordinates\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create parallel coordinates plot in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\nlet data =\n    [ \u0022A\u0022, [ 1.; 4.; 3.4; 0.7 ]\n      \u0022B\u0022, [ 3.; 1.5; 1.7; 2.3 ]\n      \u0022C\u0022, [ 2.; 4.; 3.1; 5. ]\n      \u0022D\u0022, [ 4.; 2.; 2.; 4. ] ]\n\n(**\n\nParallel coordinates are a common way of visualizing high-dimensional geometry and analyzing multivariate data.\nTo show a set of points in an n-dimensional space, a backdrop is drawn consisting of n parallel lines, typically \nvertical and equally spaced. A point in n-dimensional space is represented as a polyline with vertices on the parallel axes; \nthe position of the vertex on the i-th axis corresponds to the i-th coordinate of the point.\n*)\n\nlet parcoords1 =\n    Chart.ParallelCoord(keyValues = data, LineColor = Color.fromString \u0022blue\u0022)\n\n(*** condition: ipynb ***)\n#if IPYNB\nparcoords1\n#endif // IPYNB\n\n(***hide***)\nparcoords1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## More styled example\n\nThis example shows the usage of some of the styling possibility using \u0060Chart.ParallelCoord\u0060.\nFor even more styling control, use the respective TraceStyle function \u0060TraceDomainStyle.ParallelCoord\u0060\n*)\n\nopen Plotly.NET.TraceObjects\nopen Deedle\n\nlet parcoordsStyled =\n\n    let data =\n        __SOURCE_DIRECTORY__ \u002B \u0022/../data/iris_cat.csv\u0022\n        |\u003E Frame.ReadCsv\n\n    let dims =\n        [ Dimension.initParallel (\n              Label = \u0022sepal_length\u0022,\n              Values = (data |\u003E Frame.getCol \u0022sepal_length\u0022 |\u003E Series.values),\n              Range = StyleParam.Range.MinMax(0., 8.)\n          )\n          Dimension.initParallel (\n              Label = \u0022sepal_width\u0022,\n              Values = (data |\u003E Frame.getCol \u0022sepal_width\u0022 |\u003E Series.values),\n              Range = StyleParam.Range.MinMax(0., 8.)\n          )\n          Dimension.initParallel (\n              Label = \u0022petal_length\u0022,\n              Values = (data |\u003E Frame.getCol \u0022petal_length\u0022 |\u003E Series.values),\n              Range = StyleParam.Range.MinMax(0., 8.)\n          )\n          Dimension.initParallel (\n              Label = \u0022petal_width\u0022,\n              Values = (data |\u003E Frame.getCol \u0022petal_width\u0022 |\u003E Series.values),\n              Range = StyleParam.Range.MinMax(0., 8.)\n          ) ]\n\n    let colors =\n        data |\u003E Frame.getCol \u0022species_id\u0022 |\u003E Series.values |\u003E Color.fromColorScaleValues\n\n    Chart.ParallelCoord(dimensions = dims, LineColorScale = StyleParam.Colorscale.Viridis, LineColor = colors)\n\n\n(*** condition: ipynb ***)\n#if IPYNB\nparcoordsStyled\n#endif // IPYNB\n\n(***hide***)\nparcoordsStyled |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/categorical-charts/sankey.html","title":"Sankey Charts","content":"(**\n---\ntitle: Sankey Charts\ncategory: Categorical Charts\ncategoryindex: 10\nindex: 3\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Sankey charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create sankey charts in F#.\n\nSankey charts are a visualization of multiple, linked graphs layed out linearly. \nThese are usually used to depict flow between nodes or stations.\nTo create Sankey, a set of nodes and links between them are required. \nThese are created using the provided Node and Link structures.\n*)\nopen Plotly.NET\n\nlet sankey1 =\n    Chart.Sankey(\n        nodeLabels = [ \u0022A1\u0022; \u0022A2\u0022; \u0022B1\u0022; \u0022B2\u0022; \u0022C1\u0022; \u0022C2\u0022; \u0022D1\u0022 ],\n        linkedNodeIds =\n            [ // Edgelist, toupling sourceIndex =\u003E targetIndex of the link\n              0, 2\n              0, 3\n              1, 3\n              2, 4\n              3, 4\n              3, 5\n              4, 6\n              5, 6 ],\n        NodeOutlineColor = Color.fromKeyword Black,\n        NodeOutlineWidth = 1.,\n        linkValues = [ 8; 4; 2; 7; 3; 2; 5; 2 ],\n        LinkColor =\n            Color.fromColors\n                [ Color.fromHex \u0022#828BFB\u0022\n                  Color.fromHex \u0022#828BFB\u0022\n                  Color.fromHex \u0022#F27762\u0022\n                  Color.fromHex \u0022#33D6AB\u0022\n                  Color.fromHex \u0022#BC82FB\u0022\n                  Color.fromHex \u0022#BC82FB\u0022\n                  Color.fromHex \u0022#FFB47B\u0022\n                  Color.fromHex \u0022#47DCF5\u0022 ],\n        LinkOutlineColor = Color.fromKeyword Black,\n        LinkOutlineWidth = 1.,\n        UseDefaults = false\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nsankey1\n#endif // IPYNB\n\n(***hide***)\nsankey1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/categorical-charts/sunburst.html","title":"Sunburst Charts","content":"(**\n---\ntitle: Sunburst Charts\ncategory: Categorical Charts\ncategoryindex: 10\nindex: 6\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Sunburst charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create sunburst charts in F#.\n\nSunburst Chart \uFFFD also known as Ring Chart, Multi-level Pie Chart, and Radial Treemap \uFFFD is typically used to visualize hierarchical data structures.\nA Sunburst Chart consists of an inner circle surrounded by rings of deeper hierarchy levels.\nThe angle of each segment is either proportional to a value or divided equally under its parent node.\n\n## Simple sunburst plot\n*)\nopen Plotly.NET\n\nlet values = [ 19; 26; 55 ]\nlet labels = [ \u0022Residential\u0022; \u0022Non-Residential\u0022; \u0022Utility\u0022 ]\n\nlet sunburstChart =\n    Chart.Sunburst(\n        labels = [ \u0022A\u0022; \u0022B\u0022; \u0022C\u0022; \u0022D\u0022; \u0022E\u0022 ],\n        parents = [ \u0022\u0022; \u0022\u0022; \u0022B\u0022; \u0022B\u0022; \u0022\u0022 ],\n        Values = [ 5.; 0.; 3.; 2.; 3. ],\n        MultiText = [ \u0022At\u0022; \u0022Bt\u0022; \u0022Ct\u0022; \u0022Dt\u0022; \u0022Et\u0022 ]\n    )\n\n(**\n## More styled example\n\nThis example shows the usage of some of the styling possibility using \u0060Chart.Sunburst\u0060.\nFor even more styling control, use the respective TraceStyle function \u0060TraceDomainStyle.Sunburst\u0060\n*)\n\nlet sunburstStyled =\n    let labelsParents =\n        [ (\u0022A\u0022, \u0022\u0022), 20\n          (\u0022B\u0022, \u0022\u0022), 1\n          (\u0022C\u0022, \u0022\u0022), 2\n          (\u0022D\u0022, \u0022\u0022), 3\n          (\u0022E\u0022, \u0022\u0022), 4\n\n          (\u0022AA\u0022, \u0022A\u0022), 15\n          (\u0022AB\u0022, \u0022A\u0022), 5\n\n          (\u0022BA\u0022, \u0022B\u0022), 1\n\n          (\u0022AAA\u0022, \u0022AA\u0022), 10\n          (\u0022AAB\u0022, \u0022AA\u0022), 5 ]\n\n    Chart.Sunburst(\n        labelsparents = (labelsParents |\u003E Seq.map fst),\n        Values = (labelsParents |\u003E Seq.map snd),\n        BranchValues = StyleParam.BranchValues.Total, // branch values are the total of their childrens values\n        SectionColorScale = StyleParam.Colorscale.Viridis,\n        ShowSectionColorScale = true,\n        SectionOutlineColor = Color.fromKeyword Black,\n        Rotation = 45\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nsunburstStyled\n#endif // IPYNB\n\n(***hide***)\nsunburstStyled |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/categorical-charts/treemap.html","title":"Treemap Charts","content":"(**\n---\ntitle: Treemap Charts\ncategory: Categorical Charts\ncategoryindex: 10\nindex: 5\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Treemap charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create treemap charts in F#.\n\nTreemap Chart is intended for the visualization of hierarchical data in the form of nested rectangles. \nEach level of such a tree structure is depicted as a colored rectangle, often called a branch, which contains other rectangles (leaves). \nThe space inside each of the rectangles that compose a Treemap is highlighted based on the quantitative value in the corresponding data point.\n\n## Treemap example\n\nThis example shows the usage of some of the styling possibility using \u0060Chart.Treemap\u0060.\nFor even more styling control, use the respective TraceStyle function \u0060TraceDomainStyle.Treemap\u0060\n*)\n\nopen Plotly.NET\nopen Plotly.NET.TraceObjects\n\nlet treemapStyled =\n    let labelsParents =\n        [ (\u0022A\u0022, \u0022\u0022), 20\n          (\u0022B\u0022, \u0022\u0022), 1\n          (\u0022C\u0022, \u0022\u0022), 2\n          (\u0022D\u0022, \u0022\u0022), 3\n          (\u0022E\u0022, \u0022\u0022), 4\n\n          (\u0022AA\u0022, \u0022A\u0022), 15\n          (\u0022AB\u0022, \u0022A\u0022), 5\n\n          (\u0022BA\u0022, \u0022B\u0022), 1\n\n          (\u0022AAA\u0022, \u0022AA\u0022), 10\n          (\u0022AAB\u0022, \u0022AA\u0022), 5 ]\n\n    Chart.Treemap(\n        labelsparents = (labelsParents |\u003E Seq.map fst),\n        Values = (labelsParents |\u003E Seq.map snd),\n        BranchValues = StyleParam.BranchValues.Total, // branch values are the total of their childrens values\n        SectionColorScale = StyleParam.Colorscale.Viridis,\n        ShowSectionColorScale = true,\n        SectionOutlineColor = Color.fromKeyword Black,\n        Tiling = TreemapTiling.init (Packing = StyleParam.TreemapTilingPacking.SliceDice)\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ntreemapStyled\n#endif // IPYNB\n\n(***hide***)\ntreemapStyled |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/chart-layout/annotations.html","title":"Annotations","content":"(**\n---\ntitle: Annotations\ncategory: Chart Layout\ncategoryindex: 2\nindex: 5\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Annotations\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create Shapes and add them to the Charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\nlet x = [ 1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10. ]\nlet y = [ 2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1. ]\n\n(**\nuse the \u0060Annotation.init\u0060 function to generate a shape, and either the \u0060Chart.withAnnotation\u0060 or the \u0060Chart.withAnnotations\u0060 function to add\nmultiple annotations at once.\n\n*)\n\nopen Plotly.NET.LayoutObjects\n\nlet a1 = Annotation.init (X = 2., Y = 4., Text = \u0022Hi there!\u0022)\n\nlet a2 =\n    Annotation.init (\n        X = 5.,\n        Y = 7.,\n        Text = \u0022I am another annotation!\u0022,\n        BGColor = Color.fromString \u0022white\u0022,\n        BorderColor = Color.fromString \u0022black\u0022\n    )\n\nlet annotations =\n    Chart.Line(x = x, y = y, Name = \u0022line\u0022) |\u003E Chart.withAnnotations ([ a1; a2 ])\n\n(*** condition: ipynb ***)\n#if IPYNB\nannotations\n#endif // IPYNB\n\n(***hide***)\nannotations |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/chart-layout/axis-styling.html","title":"Axis styling","content":"(**\n---\ntitle: Axis styling\ncategory: Chart Layout\ncategoryindex: 2\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n# Axis styling\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to style chart axes in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET\n\nlet x = [ 1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10. ]\nlet y = [ 2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1. ]\nlet y\u0027 = y |\u003E List.map (fun y -\u003E y * 2.) |\u003E List.rev\n(**\n## Single axis styling\n\nTo style a specific axis of a plot, use the respective \u0060Chart.with*_AxisStyle\u0060 function:\n\n*)\n\nlet plot1 =\n    Chart.Point(x = x, y = y)\n    |\u003E Chart.withXAxisStyle (TitleText = \u0022X axis title\u0022, MinMax = (-1., 10.))\n    |\u003E Chart.withYAxisStyle (TitleText = \u0022Y axis title\u0022, MinMax = (-1., 10.))\n\n(*** condition: ipynb ***)\n#if IPYNB\nplot1\n#endif // IPYNB\n\n(***hide***)\nplot1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nfor even more fine-grained control, initialize a new axis and replace the old one of the plot with \u0060\u0060\u0060\u0060.\nThe following example creates two mirrored axes with inside ticks, one of them with a log scale:\n*)\n\nopen Plotly.NET.LayoutObjects // this namespace contains all object abstractions for layout styling\n\nlet mirroredXAxis =\n    LinearAxis.init (\n        Title = Title.init (Text = \u0022Mirrored axis\u0022),\n        ShowLine = true,\n        Mirror = StyleParam.Mirror.AllTicks,\n        ShowGrid = false,\n        Ticks = StyleParam.TickOptions.Inside\n    )\n\nlet mirroredLogYAxis =\n    LinearAxis.init (\n        Title = Title.init (Text = \u0022Log axis\u0022),\n        AxisType = StyleParam.AxisType.Log,\n        ShowLine = true,\n        Mirror = StyleParam.Mirror.AllTicks,\n        ShowGrid = false,\n        Ticks = StyleParam.TickOptions.Inside\n    )\n\nlet plot2 =\n    Chart.Point(x = x, y = y)\n    |\u003E Chart.withXAxis mirroredXAxis\n    |\u003E Chart.withYAxis mirroredLogYAxis\n\n(*** condition: ipynb ***)\n#if IPYNB\nplot2\n#endif // IPYNB\n\n(***hide***)\nplot2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n### Formatting the tick label\n\nYou can use \u0060TickFormat\u0060 to format the tick label. The formatting rule uses the d3 formatting mini-languages which are very similar to those in Python. See [here](https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md#d3_format) for numbers and [here](https://github.com/d3/d3-time-format#locale_format) for dates. Plotly adds two items to d3\u0027s date formatter: \u0022%h\u0022 for half of the year as a decimal number as well as \u0022%{n}f\u0022 for fractional seconds with n digits. For example, \u00222016-10-13 09:15:23.456\u0022 with TickFormat \u0022%H~%M~%S.%2f\u0022 would display \u002209~15~23.46\u0022.\n\nThis example styles the x-axis tick labels as dollars and the y-axis tick label as percentages with one decimal place.\n*)\n\nlet dollarAxis = LinearAxis.init (TickFormat = \u0022$\u0022)\nlet percentAxis = LinearAxis.init (TickFormat = \u0022.1%\u0022)\n\nlet plot3 =\n    Chart.Point(x = x, y = y)\n    |\u003E Chart.withXAxis dollarAxis\n    |\u003E Chart.withYAxis percentAxis\n\n(*** condition: ipynb ***)\n#if IPYNB\nplot3\n#endif // IPYNB\n\n(***hide***)\nplot3 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Multiple axes\n\nAssign different axis anchors to subplots to map them to different axes.\n\n### Multiple axes on different sides of the chart\n\nThe following example first creates a multichart containing two plots with different axis anchors.\nSubsequently, multiple axes with the respective anchors are added to the plot. \nNote that the same can be done as above, defining axes beforehand.\n\n*)\n\nlet anchoredAt1 =\n    Chart.Line(x = x, y = y, Name = \u0022anchor 1\u0022) |\u003E Chart.withAxisAnchor (Y = 1)\n\nlet anchoredAt2 =\n    Chart.Line(x = x, y = y\u0027, Name = \u0022anchor 2\u0022) |\u003E Chart.withAxisAnchor (Y = 2)\n\nlet twoXAxes1 =\n    [ anchoredAt1; anchoredAt2 ]\n    |\u003E Chart.combine\n    |\u003E Chart.withYAxisStyle (TitleText = \u0022axis 1\u0022, Side = StyleParam.Side.Left, Id = StyleParam.SubPlotId.YAxis 1)\n    |\u003E Chart.withYAxisStyle (\n        TitleText = \u0022axis2\u0022,\n        Side = StyleParam.Side.Right,\n        Id = StyleParam.SubPlotId.YAxis 2,\n        Overlaying = StyleParam.LinearAxisId.Y 1\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ntwoXAxes1\n#endif // IPYNB\n\n(***hide***)\ntwoXAxes1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n### Multiple axes on the same side of the chart\n\nAnalogous to above, but move the whole plot to the right by adjusting its domain, and then add a second axis to the left:\n\n*)\n\nlet twoXAxes2 =\n    [ anchoredAt1; anchoredAt2 ]\n    |\u003E Chart.combine\n    |\u003E Chart.withYAxisStyle (TitleText = \u0022first y-axis\u0022, ShowLine = true)\n    |\u003E Chart.withXAxisStyle (\n        TitleText = \u0022x-axis\u0022,\n        Domain = (0.3, 1.0) // moves the first axis and the whole plot to the right\n    )\n    |\u003E Chart.withYAxisStyle (\n        TitleText = \u0022second y-axis\u0022,\n        Side = StyleParam.Side.Left,\n        Id = StyleParam.SubPlotId.YAxis 2,\n        Overlaying = StyleParam.LinearAxisId.Y 1,\n        Position = 0.10, // position the axis beteen the leftmost edge and the firt axis at 0.3\n        //Anchor=StyleParam.AxisAnchorId.Free,\n        ShowLine = true\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ntwoXAxes2\n#endif // IPYNB\n\n(***hide***)\ntwoXAxes2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/chart-layout/errorbars.html","title":"Error bars","content":"(**\n---\ntitle: Error bars\ncategory: Chart Layout\ncategoryindex: 2\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n# Error bars\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to add error bars to plots in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\nlet x = [ 1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10. ]\nlet y\u0027 = [ 2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1. ]\nlet xError = [| 0.2; 0.3; 0.2; 0.1; 0.2; 0.4; 0.2; 0.08; 0.2; 0.1 |]\nlet yError = [| 0.3; 0.2; 0.1; 0.4; 0.2; 0.4; 0.1; 0.18; 0.02; 0.2 |]\n(**\nTo add error bars to a chart, use the \u0060Chart.with*ErrorStyle\u0060 functions for either X, Y, or Z.\n*)\n\nlet pointsWithErrorBars =\n    Chart.Point(x = x, y = y\u0027, Name = \u0022points with errors\u0022)\n    |\u003E Chart.withXErrorStyle (Array = xError, Symmetric = true)\n    |\u003E Chart.withYErrorStyle (Array = yError, Arrayminus = xError) // for negative error, use positive values in the \u0060Arrayminus\u0060 argument\n\n(*** condition: ipynb ***)\n#if IPYNB\npointsWithErrorBars\n#endif // IPYNB\n\n(***hide***)\npointsWithErrorBars |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/chart-layout/layout_images.html","title":"Layout images","content":"(**\n---\ntitle: Layout images\ncategory: Chart Layout\ncategoryindex: 2\nindex: 6\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Layout images\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create Images and add them to the Charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\nlet x = [ 1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10. ]\nlet y = [ 2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1. ]\n\n(**\nuse the \u0060LayoutImage.init\u0060 function to generate an image, and either the \u0060Chart.withLayoutImage\u0060 or the \u0060Chart.withLayoutImages\u0060 function to add\nmultiple annotations at once.\n\n*)\n\nopen Plotly.NET.LayoutObjects\n\nlet image =\n    LayoutImage.init (\n        Source = \u0022https://fsharp.org/img/logo/fsharp.svg\u0022,\n        XRef = \u0022x\u0022,\n        YRef = \u0022y\u0022,\n        X = 4,\n        Y = 4,\n        SizeX = 5,\n        SizeY = 3,\n        Sizing = StyleParam.LayoutImageSizing.Stretch,\n        Opacity = 0.5,\n        Layer = StyleParam.Layer.Below\n    )\n\nlet imageChart =\n    Chart.Line(x = x, y = y, Name = \u0022line\u0022) |\u003E Chart.withLayoutImage (image)\n\n(*** condition: ipynb ***)\n#if IPYNB\nimageChart\n#endif // IPYNB\n\n(***hide***)\nimageChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/chart-layout/multiple-charts.html","title":"Multicharts and subplots","content":"(**\n---\ntitle: Multicharts and subplots\ncategory: Chart Layout\ncategoryindex: 2\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n# Multicharts and subplots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create charts with multiple subplots in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\nlet x = [ 1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10. ]\nlet y = [ 2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1. ]\n\n\n(**\n\n## Combining charts\n\n\u0060Chart.Combine\u0060 takes a sequence of charts, and attempts to combine their layouts to \nproduce a composite chart with one layout containing all traces of the input:\n\n*)\n\nlet combinedChart =\n    [ Chart.Line(x = x, y = y, Name = \u0022first\u0022)\n      Chart.Line(x = y, y = x, Name = \u0022second\u0022) ]\n    |\u003E Chart.combine\n\n#if IPYNB\ncombinedChart\n#endif // end cell with chart value in a notebook context\n(***hide***)\ncombinedChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n\n## Chart subplot grids\n\n### Chart.Grid\n\n\u0060Chart.Grid\u0060 creates a subplot grid. There are two overloads:\n\nYou can either use Chart.Grid with a 1 dimensional sequence of Charts and specify the amount of rows and columns:\n\n*)\n\n//simple 2x2 subplot grid\nlet grid =\n    [ Chart.Point(x = x, y = y, Name = \u00221,1\u0022)\n      |\u003E Chart.withXAxisStyle \u0022x1\u0022\n      |\u003E Chart.withYAxisStyle \u0022y1\u0022\n      Chart.Line(x = x, y = y, Name = \u00221,2\u0022)\n      |\u003E Chart.withXAxisStyle \u0022x2\u0022\n      |\u003E Chart.withYAxisStyle \u0022y2\u0022\n      Chart.Spline(x = x, y = y, Name = \u00222,1\u0022)\n      |\u003E Chart.withXAxisStyle \u0022x3\u0022\n      |\u003E Chart.withYAxisStyle \u0022y3\u0022\n      Chart.Point(x = x, y = y, Name = \u00222,2\u0022)\n      |\u003E Chart.withXAxisStyle \u0022x4\u0022\n      |\u003E Chart.withYAxisStyle \u0022y4\u0022 ]\n    |\u003E Chart.Grid(2, 2)\n\n(*** condition: ipynb ***)\n#if IPYNB\ngrid\n#endif // IPYNB\n\n(***hide***)\ngrid |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nor provide a 2-dimensional Chart sequence as input, the dimensions of the input will then be used to set the dimensions of the grid:\n*)\n\n//simple 2x2 subplot grid using a 2x2 2D chart sequence as input\nlet grid2 =\n    [ [ Chart.Point(x = x, y = y, Name = \u00221,1\u0022)\n        |\u003E Chart.withXAxisStyle \u0022x1\u0022\n        |\u003E Chart.withYAxisStyle \u0022y1\u0022\n        Chart.Line(x = x, y = y, Name = \u00221,2\u0022)\n        |\u003E Chart.withXAxisStyle \u0022x2\u0022\n        |\u003E Chart.withYAxisStyle \u0022y2\u0022 ]\n      [ Chart.Spline(x = x, y = y, Name = \u00222,1\u0022)\n        |\u003E Chart.withXAxisStyle \u0022x3\u0022\n        |\u003E Chart.withYAxisStyle \u0022y3\u0022\n        Chart.Point(x = x, y = y, Name = \u00222,2\u0022)\n        |\u003E Chart.withXAxisStyle \u0022x4\u0022\n        |\u003E Chart.withYAxisStyle \u0022y4\u0022\n\n        ] ]\n    |\u003E Chart.Grid()\n\n(*** condition: ipynb ***)\n#if IPYNB\ngrid2\n#endif // IPYNB\n\n(***hide***)\ngrid2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nTo leave cells of the grid empty, you have to fill it with dummy charts via \u0060Chart.Invisible()\u0060.\nPleas enote that when using a 2D sequence with unequal amounts of charts in the rows, the column amount will be set\nto the row with the highest amount of charts, and the other rows will be filled by invisible charts to the right.\n*)\n\n//simple 2x2 subplot grid with an empty cell at position 1,2\nlet grid3 =\n    [ Chart.Point(x = x, y = y, Name = \u00221,1\u0022)\n      |\u003E Chart.withXAxisStyle \u0022x1\u0022\n      |\u003E Chart.withYAxisStyle \u0022y1\u0022\n\n      Chart.Invisible()\n\n      Chart.Spline(x = x, y = y, Name = \u00222,1\u0022)\n      |\u003E Chart.withXAxisStyle \u0022x3\u0022\n      |\u003E Chart.withYAxisStyle \u0022y3\u0022\n\n      Chart.Point(x = x, y = y, Name = \u00222,2\u0022)\n      |\u003E Chart.withXAxisStyle \u0022x4\u0022\n      |\u003E Chart.withYAxisStyle \u0022y4\u0022 ]\n    |\u003E Chart.Grid(2, 2)\n\n(*** condition: ipynb ***)\n#if IPYNB\ngrid3\n#endif // IPYNB\n\n(***hide***)\ngrid3 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nuse \u0060Pattern=StyleParam.LayoutGridPatter.Coupled\u0060 to use one shared x axis per column and one shared y axis per row. \n(Try zooming in the single subplots below)\n*)\n\nlet grid4 =\n    [ Chart.Point(x = x, y = y, Name = \u00221,1\u0022)\n      |\u003E Chart.withXAxisStyle \u0022x1\u0022\n      |\u003E Chart.withYAxisStyle \u0022y1\u0022\n      Chart.Line(x = x, y = y, Name = \u00221,2\u0022)\n      |\u003E Chart.withXAxisStyle \u0022x2\u0022\n      |\u003E Chart.withYAxisStyle \u0022y2\u0022\n      Chart.Spline(x = x, y = y, Name = \u00222,1\u0022)\n      |\u003E Chart.withXAxisStyle \u0022x3\u0022\n      |\u003E Chart.withYAxisStyle \u0022y3\u0022\n      Chart.Point(x = x, y = y, Name = \u00222,2\u0022)\n      |\u003E Chart.withXAxisStyle \u0022x4\u0022\n      |\u003E Chart.withYAxisStyle \u0022y4\u0022 ]\n    |\u003E Chart.Grid(nRows = 2, nCols = 2, Pattern = StyleParam.LayoutGridPattern.Coupled)\n\n(*** condition: ipynb ***)\n#if IPYNB\ngrid4\n#endif // IPYNB\n\n(***hide***)\ngrid4 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \n### Chart.SingleStack\n\nThe \u0060Chart.SingleStack\u0060 function is a special version of Chart.Grid that creates only one column from a 1D input chart sequence.\nIt uses a shared x axis per default.\n\nAs with all grid charts, you can also use the Chart.withLayoutGridStyle to style subplot grids:\n\n*)\n\nlet singleStack =\n    [ Chart.Point(x = x, y = y) |\u003E Chart.withYAxisStyle (\u0022This title must\u0022)\n\n      Chart.Line(x = x, y = y) |\u003E Chart.withYAxisStyle (\u0022be set on the\u0022)\n\n      Chart.Spline(x = x, y = y) |\u003E Chart.withYAxisStyle (\u0022respective subplots\u0022) ]\n    |\u003E Chart.SingleStack(Pattern = StyleParam.LayoutGridPattern.Coupled)\n    //increase spacing between plots by using the withLayoutGridStyle function\n    |\u003E Chart.withLayoutGridStyle (YGap = 0.1)\n    |\u003E Chart.withTitle (title = \u0022Hi i am the new SingleStackChart\u0022)\n    |\u003E Chart.withXAxisStyle (TitleText = \u0022im the shared xAxis\u0022)\n\n(*** condition: ipynb ***)\n#if IPYNB\nsingleStack\n#endif // IPYNB\n\n(***hide***)\nsingleStack |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n### Using subplots of different trace types in a grid\n\nChart.Grid does some internal magic to make sure that all trace types get their grid cell according to plotly.js\u0027s inner logic. \n\nThe only thing you have to consider is, that when you are using nested combined charts, that these have to have the same trace type.\n\nOtherwise, you can freely combine all charts with Chart.Grid:\n\n*)\nopen Plotly.NET.LayoutObjects\n\nlet multipleTraceTypesGrid =\n    [ Chart.Point(xy = [ 1, 2; 2, 3 ], Name = \u00222D Cartesian\u0022)\n      Chart.Point3D(xyz = [ 1, 3, 2 ], Name = \u00223D Cartesian\u0022)\n      Chart.PointPolar(rTheta = [ 10, 20 ], Name = \u0022Polar\u0022)\n      Chart.PointGeo(lonlat = [ 1, 2 ], Name = \u0022Geo\u0022)\n      Chart.PointMapbox(lonlat = [ 1, 2 ], Name = \u0022MapBox\u0022)\n      |\u003E Chart.withMapbox (Mapbox.init (Style = StyleParam.MapboxStyle.OpenStreetMap))\n      Chart.PointTernary(abc = [ 1, 2, 3; 2, 3, 4 ], Name = \u0022Ternary\u0022)\n      [ Chart.Carpet(\n            carpetId = \u0022contour\u0022,\n            A = [ 0.; 1.; 2.; 3.; 0.; 1.; 2.; 3.; 0.; 1.; 2.; 3. ],\n            B = [ 4.; 4.; 4.; 4.; 5.; 5.; 5.; 5.; 6.; 6.; 6.; 6. ],\n            X = [ 2.; 3.; 4.; 5.; 2.2; 3.1; 4.1; 5.1; 1.5; 2.5; 3.5; 4.5 ],\n            Y = [ 1.; 1.4; 1.6; 1.75; 2.; 2.5; 2.7; 2.75; 3.; 3.5; 3.7; 3.75 ],\n            AAxis =\n                LinearAxis.initCarpet (\n                    TickPrefix = \u0022a = \u0022,\n                    Smoothing = 0.,\n                    MinorGridCount = 9,\n                    AxisType = StyleParam.AxisType.Linear\n                ),\n            BAxis =\n                LinearAxis.initCarpet (\n                    TickPrefix = \u0022b = \u0022,\n                    Smoothing = 0.,\n                    MinorGridCount = 9,\n                    AxisType = StyleParam.AxisType.Linear\n                ),\n            Opacity = 0.75\n        )\n        Chart.ContourCarpet(\n            z = [ 1.; 1.96; 2.56; 3.0625; 4.; 5.0625; 1.; 7.5625; 9.; 12.25; 15.21; 14.0625 ],\n            carpetAnchorId = \u0022contour\u0022,\n            A = [ 0; 1; 2; 3; 0; 1; 2; 3; 0; 1; 2; 3 ],\n            B = [ 4; 4; 4; 4; 5; 5; 5; 5; 6; 6; 6; 6 ],\n            ContourLineColor = Color.fromKeyword White,\n            ShowContourLabels = true,\n            ShowScale = false\n        ) ]\n      |\u003E Chart.combine\n      Chart.Pie(values = [ 10; 40; 50 ], Name = \u0022Domain\u0022)\n      Chart.BubbleSmith(\n          real = [ 0.5; 1.; 2.; 3. ],\n          imag = [ 0.5; 1.; 2.; 3. ],\n          sizes = [ 10; 20; 30; 40 ],\n          MultiText = [ \u0022one\u0022; \u0022two\u0022; \u0022three\u0022; \u0022four\u0022; \u0022five\u0022; \u0022six\u0022; \u0022seven\u0022 ],\n          TextPosition = StyleParam.TextPosition.TopCenter,\n          Name = \u0022Smith\u0022\n      )\n      [\n        // you can use nested combined charts, but they have to have the same trace type (Cartesian2D in this case)\n        let y =\n            [ 2.\n              1.5\n              5.\n              1.5\n              2.\n              2.5\n              2.1\n              2.5\n              1.5\n              1.\n              2.\n              1.5\n              5.\n              1.5\n              3.\n              2.5\n              2.5\n              1.5\n              3.5\n              1. ]\n\n        Chart.BoxPlot(X = \u0022y\u0022, Y = y, Name = \u0022Combined 1\u0022, Jitter = 0.1, BoxPoints = StyleParam.BoxPoints.All)\n        Chart.BoxPlot(X = \u0022y\u0027\u0022, Y = y, Name = \u0022Combined 2\u0022, Jitter = 0.1, BoxPoints = StyleParam.BoxPoints.All) ]\n      |\u003E Chart.combine ]\n    |\u003E Chart.Grid(nRows = 4, nCols = 3)\n    |\u003E Chart.withSize (Width = 1000, Height = 1000)\n\n(*** condition: ipynb ***)\n#if IPYNB\nmultipleTraceTypesGrid\n#endif // IPYNB\n\n(***hide***)\nmultipleTraceTypesGrid |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nIf you are not sure if traceTypes are compatible, look at the \u0060TraceIDs\u0060:\n*)\n\nlet pointType = Chart.Point(xy = [ 1, 2 ]) |\u003E GenericChart.getTraceID\n(***include-it***)\n\n[ Chart.Point(xy = [ 1, 2 ]); Chart.PointTernary(abc = [ 1, 2, 3 ]) ]\n|\u003E Chart.combine\n|\u003E GenericChart.getTraceID\n(***include-it***)\n\n[ Chart.Point(xy = [ 1, 2 ]); Chart.PointTernary(abc = [ 1, 2, 3 ]) ]\n|\u003E Chart.combine\n|\u003E GenericChart.getTraceIDs\n(***include-it***)"},{"uri":"https://plotly.net/chart-layout/shapes.html","title":"Shapes","content":"(**\n---\ntitle: Shapes\ncategory: Chart Layout\ncategoryindex: 2\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Shapes\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create Shapes and add them to the Charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\nlet x = [ 1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10. ]\nlet y\u0027 = [ 2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1. ]\n\n(**\nuse the \u0060Shape.init\u0060 function to generate a shape, and either the \u0060Chart.withShape\u0060 or the \u0060Chart.withShapes\u0060 function to add\nmultiple shapes at once.\n\n**Attention**: Adding a shape after you added a previous one currently removes the old one. This is a bug and will be fixed\n*)\n\nopen Plotly.NET.LayoutObjects\n\nlet s1 =\n    Shape.init (\n        ShapeType = StyleParam.ShapeType.Rectangle,\n        X0 = 2.,\n        X1 = 4.,\n        Y0 = 3.,\n        Y1 = 4.,\n        Opacity = 0.3,\n        FillColor = Color.fromHex \u0022#d3d3d3\u0022\n    )\n\nlet s2 =\n    Shape.init (\n        ShapeType = StyleParam.ShapeType.Rectangle,\n        X0 = 5.,\n        X1 = 7.,\n        Y0 = 3.,\n        Y1 = 4.,\n        Opacity = 0.3,\n        FillColor = Color.fromHex \u0022#d3d3d3\u0022\n    )\n\nlet shapes = Chart.Line(x, y\u0027, Name = \u0022line\u0022) |\u003E Chart.withShapes ([ s1; s2 ])\n//|\u003E Chart.withShape(Options.Shape(StyleOption.ShapeType.Rectangle,2.,4.,3.,4.,Opacity=0.3,Fillcolor=\u0022#d3d3d3\u0022))\n\n(*** condition: ipynb ***)\n#if IPYNB\nshapes\n#endif // IPYNB\n\n(***hide***)\nshapes |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/chart-layout/sliders.html","title":"Sliders","content":"(**\n---\ntitle: Sliders\ncategory: Chart Layout\ncategoryindex: 2\nindex: 7\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Sliders\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create charts with sliders in F#.\n\nThe sliders give the option of passing the arguments to the Plotly chart. In the example we use the visibility parameter to make the step chosen in the slider visible.\n\nThe original exapmle is made with python and can be found [here](https://plotly.com/python/sliders)\n*)\n\nopen Plotly.NET\nopen Plotly.NET.LayoutObjects\nopen Plotly.NET.TraceObjects\n\n/// Similar to numpy.arrange\nlet nparange (start: double) (stop: double) (step: double) =\n    let stepsCount = ((stop - start) / step) |\u003E int\n    seq { for i in 0..stepsCount -\u003E start \u002B double (i) * step } |\u003E Array.ofSeq\n\nlet steps = nparange 0. 5. 0.1\n\nlet scattersChart =\n    steps\n    |\u003E Seq.map (fun step -\u003E\n        // Create a scatter plot for every step\n        let x = nparange 0. 10. 0.01\n        let y = seq { for x_ in x -\u003E sin (step * x_) }\n        // Some plot must be visible here or the chart is empty at the beginning\n        let chartVisibility =\n            if step = 0. then\n                StyleParam.Visible.True\n            else\n                StyleParam.Visible.False\n\n        let go =\n            Chart.Scatter(\n                x = x,\n                y = y,\n                mode = StyleParam.Mode.Lines,\n                Name = \u0022v = \u0022 \u002B string (step),\n                Marker = Marker.init (Color = Color.fromHex (\u0022#00CED1\u0022), Size = 6)\n            )\n            |\u003E Chart.withTraceInfo (Visible = chartVisibility)\n\n        go)\n    |\u003E GenericChart.combine\n\nlet sliderSteps =\n    steps\n    |\u003E Seq.indexed\n    |\u003E Seq.map (fun (i, step) -\u003E\n        // Create a visibility and a title parameters\n        // The visibility parameter includes an array where every parameter\n        // is mapped onto the trace visibility\n        let visible =\n            // Set true only for the current step\n            (fun index -\u003E index = i) |\u003E Array.init steps.Length |\u003E box\n\n        let title = sprintf \u0022Slider switched to step: %f\u0022 step |\u003E box\n\n        SliderStep.init (\n            Args = [ \u0022visible\u0022, visible; \u0022title\u0022, title ],\n            Method = StyleParam.Method.Update,\n            Label = \u0022v = \u0022 \u002B string (step)\n        ))\n\nlet slider =\n    Slider.init (\n        CurrentValue = SliderCurrentValue.init (Prefix = \u0022Frequency: \u0022),\n        Padding = Padding.init (T = 50),\n        Steps = sliderSteps\n    )\n\nlet chart = scattersChart |\u003E Chart.withSlider slider\n\n(*** condition: ipynb ***)\n#if IPYNB\nchart\n#endif // IPYNB\n\n(***hide***)\nchart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/chart-layout/update_menus.html","title":"Update menus","content":"(**\n---\ntitle: Update menus\ncategory: Chart Layout\ncategoryindex: 2\nindex: 8\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../data/Deedle.dll\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Update menus\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create charts with update menus in F#.\n*)\n\nopen Deedle\nopen Plotly.NET\nopen Plotly.NET.LayoutObjects\n\nlet data =\n    __SOURCE_DIRECTORY__ \u002B \u0022/../data/volcano.csv\u0022\n    |\u003E Frame.ReadCsv\n    |\u003E Frame.toJaggedArray\n\nlet updateMenu =\n    UpdateMenu.init (\n        Buttons =\n            [ UpdateMenuButton.init (\n                  Args = [ \u0022type\u0022; \u0022surface\u0022 ],\n                  Label = \u0022Surface\u0022,\n                  Method = StyleParam.UpdateMethod.Restyle\n              )\n              UpdateMenuButton.init (\n                  Args = [ \u0022type\u0022; \u0022heatmap\u0022 ],\n                  Label = \u0022Heatmap\u0022,\n                  Method = StyleParam.UpdateMethod.Restyle\n              ) ],\n        Direction = StyleParam.UpdateMenuDirection.Down,\n        Pad = Padding.init (R = 10, T = 10),\n        ShowActive = true,\n        X = 0.1,\n        XAnchor = StyleParam.XAnchorPosition.Left,\n        Y = 1.1,\n        YAnchor = StyleParam.YAnchorPosition.Top\n    )\n\nlet updateChart =\n    Chart.Surface(zData = data)\n    |\u003E Chart.withUpdateMenu updateMenu\n    |\u003E Chart.withAnnotation (\n        Annotation.init (\n            Text = \u0022Trace Type:\u0022,\n            ShowArrow = false,\n            X = 0,\n            Y = 1.085,\n            YRef = \u0022paper\u0022,\n            Align = StyleParam.AnnotationAlignment.Left\n        )\n    )\n    |\u003E Chart.withScene (\n        Scene.init (AspectRatio = AspectRatio.init (X = 1., Y = 1., Z = 0.7), AspectMode = StyleParam.AspectMode.Manual)\n    )\n    |\u003E Chart.withLayoutStyle (Width = 800, Height = 900, AutoSize = false, Margin = Margin.init (0, 0, 0, 0))\n\n(*** condition: ipynb ***)\n#if IPYNB\nupdateChart\n#endif // IPYNB\n\n(***hide***)\nupdateChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/distribution-charts/2d-histograms.html","title":"2D Histograms","content":"(**\n---\ntitle: 2D Histograms\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# 2D Histograms\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create a bi-dimensional histogram of two data samples in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET\n\n//---------------------- generate random normally distributed data ----------------------\nlet normal (rnd: System.Random) mu tau =\n    let mutable v1 = 2.0 * rnd.NextDouble() - 1.0\n    let mutable v2 = 2.0 * rnd.NextDouble() - 1.0\n    let mutable r = v1 * v1 \u002B v2 * v2\n\n    while (r \u003E= 1.0 || r = 0.0) do\n        v1 \u003C- 2.0 * rnd.NextDouble() - 1.0\n        v2 \u003C- 2.0 * rnd.NextDouble() - 1.0\n        r \u003C- v1 * v1 \u002B v2 * v2\n\n    let fac = sqrt (-2.0 * (log r) / r)\n    (tau * v1 * fac \u002B mu)\n\nlet rnd = System.Random()\nlet n = 2000\nlet a = -1.\nlet b = 1.2\nlet step i = a \u002B ((b - a) / float (n - 1)) * float i\n\n//---------------------- generate data distributed in x and y direction ----------------------\nlet x = Array.init n (fun i -\u003E ((step i) ** 3.) \u002B (0.3 * (normal (rnd) 0. 2.)))\nlet y = Array.init n (fun i -\u003E ((step i) ** 6.) \u002B (0.3 * (normal (rnd) 0. 2.)))\n\n(**\nA Histogram2D chart can be created using the \u0060Chart.Histogram2D\u0060 or \u0060Chart.Histogram2DContour\u0060 functions.\n*)\n\nlet histogramContour =\n    Chart.Histogram2DContour(x = x, y = y, ContourLine = Line.init (Width = 0.))\n\n(*** condition: ipynb ***)\n#if IPYNB\nhistogramContour\n#endif // IPYNB\n\n(***hide***)\nhistogramContour |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\nlet histogram2D = Chart.Histogram2D(x = x, y = y)\n\n(*** condition: ipynb ***)\n#if IPYNB\nhistogram2D\n#endif // IPYNB\n\n(***hide***)\nhistogram2D |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/distribution-charts/box-plots.html","title":"BoxPlots","content":"(**\n---\ntitle: BoxPlots\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# BoxPlots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create boxplot charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET\n\nlet y = [ 2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1. ]\n\nlet x =\n    [ \u0022bin1\u0022\n      \u0022bin2\u0022\n      \u0022bin1\u0022\n      \u0022bin2\u0022\n      \u0022bin1\u0022\n      \u0022bin2\u0022\n      \u0022bin1\u0022\n      \u0022bin1\u0022\n      \u0022bin2\u0022\n      \u0022bin1\u0022 ]\n\n(**\nA box plot or boxplot is a convenient way of graphically depicting groups of numerical data through their quartiles. \nBox plots may also have lines extending vertically from the boxes (whiskers) indicating variability outside the upper\nand lower quartiles, hence the terms box-and-whisker plot and box-and-whisker diagram. \nOutliers may be plotted as individual points.\n*)\n\nlet box1 =\n    Chart.BoxPlot(X = x, Y = y, Jitter = 0.1, BoxPoints = StyleParam.BoxPoints.All)\n\n(*** condition: ipynb ***)\n#if IPYNB\nbox1\n#endif // IPYNB\n\n(***hide***)\nbox1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nBy swapping x and y plus using \u0060StyleParam.Orientation.Horizontal\u0060 we can flip the chart horizontaly.\n*)\nlet box2 =\n    Chart.BoxPlot(\n        X = y,\n        Y = x,\n        Jitter = 0.1,\n        BoxPoints = StyleParam.BoxPoints.All,\n        Orientation = StyleParam.Orientation.Horizontal\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nbox2\n#endif // IPYNB\n\n(***hide***)\nbox2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nYou can also produce a boxplot using the \u0060Chart.Combine\u0060 syntax.\n*)\n\nlet y\u0027 =\n    [ 2.\n      1.5\n      5.\n      1.5\n      2.\n      2.5\n      2.1\n      2.5\n      1.5\n      1.\n      2.\n      1.5\n      5.\n      1.5\n      3.\n      2.5\n      2.5\n      1.5\n      3.5\n      1. ]\n\nlet box3 =\n    [ Chart.BoxPlot(X = \u0022y\u0022, Y = y, Name = \u0022bin1\u0022, Jitter = 0.1, BoxPoints = StyleParam.BoxPoints.All)\n      Chart.BoxPlot(X = \u0022y\u0027\u0022, Y = y\u0027, Name = \u0022bin2\u0022, Jitter = 0.1, BoxPoints = StyleParam.BoxPoints.All) ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nbox3\n#endif // IPYNB\n\n(***hide***)\nbox3 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/distribution-charts/contour-plots.html","title":"Contour plots","content":"(**\n---\ntitle: Contour plots\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Contour plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create contour plot in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen System\nopen Plotly.NET\n\n// Generate linearly spaced vector\nlet linspace (min, max, n) =\n    if n \u003C= 2 then\n        failwithf \u0022n needs to be larger then 2\u0022\n\n    let bw = float (max - min) / (float n - 1.)\n    [| min..bw..max |]\n\n// Create example data\nlet size = 100\nlet x = linspace (-2. * Math.PI, 2. * Math.PI, size)\nlet y = linspace (-2. * Math.PI, 2. * Math.PI, size)\n\nlet f x y = -(5. * x / (x ** 2. \u002B y ** 2. \u002B 1.))\n\nlet z = Array.init size (fun i -\u003E Array.init size (fun j -\u003E f x.[j] y.[i]))\n\n(**\nA contour plot is a graphical technique for representing a 3-dimensional surface by plotting\nconstant z slices, called contours, on a 2-dimensional format. That is, given a value for z,\nlines are drawn for connecting the (x,y) coordinates where that z value occurs.\n\nThe contour plot is an alternative to a 3-D surface plot.\n\n*)\n\nlet contour1 = Chart.Contour(zData = z) |\u003E Chart.withSize (600., 600.)\n\n(*** condition: ipynb ***)\n#if IPYNB\ncontour1\n#endif // IPYNB\n\n(***hide***)\ncontour1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Smooth Contour Coloring\n\nto apply heatmap gradient coloring between each contour level, set the \u0060ContourColoring\u0060 to \u0060heatmap\u0060:\n*)\n\nlet contour2 =\n    Chart.Contour(zData = z, ContoursColoring = StyleParam.ContourColoring.Heatmap)\n\n(*** condition: ipynb ***)\n#if IPYNB\ncontour2\n#endif // IPYNB\n\n(***hide***)\ncontour2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Contour Line Labels\n\nUse \u0060ContourLabelFont\u0060 to set a contour label font, and display the labels with \u0060ShowContourLabels\u0060:\n\n*)\n\nlet contour3 =\n    Chart.Contour(\n        zData = z,\n        ContoursColoring = StyleParam.ContourColoring.Heatmap,\n        ShowContourLabels = true,\n        ContourLabelFont = Font.init (Size = 12., Color = Color.fromKeyword White)\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ncontour3\n#endif // IPYNB\n\n(***hide***)\ncontour3 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/distribution-charts/histograms.html","title":"Histograms","content":"(**\n---\ntitle: Histograms\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 1\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Histograms\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create a one-dimensional histogram of a data samples in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\n\nopen Plotly.NET\n\nlet rnd = System.Random()\n\nlet x =\n    [ for i = 0 to 500 do\n          yield rnd.NextDouble() ]\n\n(**\nA histogram consisting of rectangles whose area is proportional to the frequency of a variable and whose width is equal to the class interval.\nThe histogram chart represents the distribution of numerical data and can be created using the \u0060Chart.Histogram\u0060 function:.\n*)\n\nlet histo1 = Chart.Histogram(X = x) |\u003E Chart.withSize (500., 500.)\n\n(*** condition: ipynb ***)\n#if IPYNB\nhisto1\n#endif // IPYNB\n\n(***hide***)\nhisto1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/distribution-charts/point-density.html","title":"PointDensity","content":"(**\n---\ntitle: PointDensity\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 6\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# PointDensity\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create PointDensity plots in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nlet rnd = new System.Random()\nlet x = [ for i in 0..100 -\u003E rnd.NextDouble() ]\nlet y = [ for i in 0..100 -\u003E rnd.NextDouble() ]\n\n(**\n\u0060Chart.PointDensity\u0060 is a combination of a scatter plot and a histogram2dcontour.\n\nIt helps assessing the 2 dimensional distribution of a scatter plot by adding density contours based on the same data.\n*)\n\nopen Plotly.NET\n\nlet pointDensityChart = Chart.PointDensity(x = x, y = y)\n\n(*** condition: ipynb ***)\n#if IPYNB\npointDensityChart\n#endif // IPYNB\n\n(***hide***)\npointDensityChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## More styled example\n\nThis example shows the usage of some of the styling possibility using \u0060Chart.PointDensity\u0060.\n*)\n\nlet pointDensityChartStyled =\n    Chart.PointDensity(\n        x = x,\n        y = y,\n        PointMarkerColor = Color.fromKeyword Purple,\n        PointMarkerSymbol = StyleParam.MarkerSymbol.X,\n        PointMarkerSize = 4,\n        ColorScale = StyleParam.Colorscale.Viridis,\n        ColorBar = ColorBar.init (Title = Title.init (\u0022Density\u0022)),\n        ShowContourLabels = true\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\npointDensityChartStyled\n#endif // IPYNB\n\n(***hide***)\npointDensityChartStyled |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/distribution-charts/splom.html","title":"Scatterplot matrix","content":"(**\n---\ntitle: Scatterplot matrix\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 5\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../data/Deedle.dll\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Scatterplot matrix \n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to plot a scatterplot matrix (splom) in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\nopen Deedle\nopen Plotly.NET\n\nlet data =\n    __SOURCE_DIRECTORY__ \u002B \u0022/../data/iris.csv\u0022\n    |\u003E Frame.ReadCsv\n\nlet sepalLengthData = data.[\u0022sepal length\u0022] |\u003E Series.values\nlet sepalWidthData = data.[\u0022sepal width\u0022] |\u003E Series.values\nlet petalLengthData = data.[\u0022petal length\u0022] |\u003E Series.values\nlet petalWidthData = data.[\u0022petal width\u0022] |\u003E Series.values\n\nlet colors =\n    data\n    |\u003E Frame.getCol \u0022class\u0022\n    |\u003E Series.values\n    |\u003E Seq.cast\u003Cstring\u003E\n    |\u003E Seq.map (fun x -\u003E\n        match x with\n        | \u0022Iris-setosa\u0022 -\u003E 0.\n        | \u0022Iris-versicolor\u0022 -\u003E 0.5\n        | _ -\u003E 1.)\n    |\u003E Color.fromColorScaleValues\n\n\n(**\nUsing a scatterplot matrix of several different variables can help to determine whether there are any\nrelationships among the variables in the dataset.\n\n## Splom of the iris dataset\n*)\n\nlet splom1 =\n    Chart.Splom(\n        keyValues =\n            [ \u0022sepal length\u0022, sepalLengthData\n              \u0022sepal width\u0022, sepalWidthData\n              \u0022petal length\u0022, petalLengthData\n              \u0022petal width\u0022, petalWidthData ],\n        MarkerColor = colors\n    )\n    |\u003E Chart.withLayout (Layout.init (HoverMode = StyleParam.HoverMode.Closest, DragMode = StyleParam.DragMode.Select))\n    |\u003E Chart.withSize (1000, 1000)\n\n\n(*** condition: ipynb ***)\n#if IPYNB\nsplom1\n#endif // IPYNB\n\n(***hide***)\nsplom1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Showing different parts of the plot matrix\n\nUse \u0060ShowDiagonal\u0060, \u0060ShowUpperHalf\u0060 or \u0060ShowLowerHalf\u0060 to customize the cells shown in the scatter plot matrix. \n\nHere are some examples:\n*)\n\nlet noDiagonal =\n    Chart.Splom(\n        keyValues =\n            [ \u0022sepal length\u0022, sepalLengthData\n              \u0022sepal width\u0022, sepalWidthData\n              \u0022petal length\u0022, petalLengthData\n              \u0022petal width\u0022, petalWidthData ],\n        MarkerColor = colors,\n        ShowDiagonal = false\n    )\n    |\u003E Chart.withLayout (Layout.init (HoverMode = StyleParam.HoverMode.Closest, DragMode = StyleParam.DragMode.Select))\n    |\u003E Chart.withSize (1000, 1000)\n\n(*** condition: ipynb ***)\n#if IPYNB\nnoDiagonal\n#endif // IPYNB\n\n(***hide***)\nnoDiagonal |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\nlet noLowerHalf =\n    Chart.Splom(\n        keyValues =\n            [ \u0022sepal length\u0022, sepalLengthData\n              \u0022sepal width\u0022, sepalWidthData\n              \u0022petal length\u0022, petalLengthData\n              \u0022petal width\u0022, petalWidthData ],\n        MarkerColor = colors,\n        ShowLowerHalf = false\n    )\n    |\u003E Chart.withLayout (Layout.init (HoverMode = StyleParam.HoverMode.Closest, DragMode = StyleParam.DragMode.Select))\n    |\u003E Chart.withSize (1000, 1000)\n\n(*** condition: ipynb ***)\n#if IPYNB\nnoLowerHalf\n#endif // IPYNB\n\n(***hide***)\nnoLowerHalf |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/distribution-charts/violin-plots.html","title":"Violin plots","content":"(**\n---\ntitle: Violin plots\ncategory: Distribution Charts\ncategoryindex: 5\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Violin plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create violin plot charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\nlet y = [ 2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1. ]\n\nlet x =\n    [ \u0022bin1\u0022\n      \u0022bin2\u0022\n      \u0022bin1\u0022\n      \u0022bin2\u0022\n      \u0022bin1\u0022\n      \u0022bin2\u0022\n      \u0022bin1\u0022\n      \u0022bin1\u0022\n      \u0022bin2\u0022\n      \u0022bin1\u0022 ]\n\n(**\nA violin plot is a method of plotting numeric data. It is similar to box plot with a rotated kernel density plot \non each side. The violin plot is similar to box plots, except that they also show the probability density of the \ndata at different values.\n*)\n\nlet violin1 = Chart.Violin(X = x, Y = y, Points = StyleParam.JitterPoints.All)\n\n(*** condition: ipynb ***)\n#if IPYNB\nviolin1\n#endif // IPYNB\n\n(***hide***)\nviolin1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nBy swapping x and y plus using \u0060StyleParam.Orientation.Horizontal\u0060 we can flip the chart horizontaly.\n*)\nopen Plotly.NET.TraceObjects\n\nlet violin2 =\n    Chart.Violin(\n        X = y,\n        Y = x,\n        Jitter = 0.1,\n        Points = StyleParam.JitterPoints.All,\n        Orientation = StyleParam.Orientation.Horizontal,\n        MeanLine = MeanLine.init (Visible = true)\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nviolin2\n#endif // IPYNB\n\n(***hide***)\nviolin2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nYou can also produce a violin plot using the \u0060Chart.Combine\u0060 syntax.\n*)\n\nlet y\u0027 =\n    [ 2.\n      1.5\n      5.\n      1.5\n      2.\n      2.5\n      2.1\n      2.5\n      1.5\n      1.\n      2.\n      1.5\n      5.\n      1.5\n      3.\n      2.5\n      2.5\n      1.5\n      3.5\n      1. ]\n\nlet violin3 =\n    [ Chart.Violin(X = \u0022y\u0022, Y = y, Name = \u0022bin1\u0022, Jitter = 0.1, Points = StyleParam.JitterPoints.All)\n      Chart.Violin(X = \u0022y\u0027\u0022, Y = y\u0027, Name = \u0022bin2\u0022, Jitter = 0.1, Points = StyleParam.JitterPoints.All) ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nviolin3\n#endif // IPYNB\n\n(***hide***)\nviolin3 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/finance-charts/candlestick.html","title":"Candlestick Charts","content":"(**\n---\ntitle: Candlestick Charts\ncategory: Finance Charts\ncategoryindex: 8\nindex: 2\n---\n*)\n \n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../data/Deedle.dll\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Candlestick Charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create candlestick charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n \nopen Deedle\nopen Plotly.NET\nopen Plotly.NET.TraceObjects\n\nlet data =\n    __SOURCE_DIRECTORY__ \u002B \u0022/../data/finance-charts-apple.csv\u0022\n    |\u003E fun csv -\u003E Frame.ReadCsv(csv, true, separators = \u0022,\u0022)\n\n\nlet openData = data.[\u0022AAPL.Open\u0022] |\u003E Series.values |\u003E Array.ofSeq\nlet highData = data.[\u0022AAPL.High\u0022] |\u003E Series.values |\u003E Array.ofSeq\nlet lowData = data.[\u0022AAPL.Low\u0022] |\u003E Series.values |\u003E Array.ofSeq\nlet closeData = data.[\u0022AAPL.Close\u0022] |\u003E Series.values |\u003E Array.ofSeq\n\nlet dateData =\n    data\n    |\u003E Frame.getCol \u0022Date\u0022\n    |\u003E Series.values\n    |\u003E Seq.map System.DateTime.Parse\n    |\u003E Array.ofSeq\n\nlet candles =\n    [ for i in 0..29 -\u003E dateData.[i], StockData.create openData.[i] highData.[i] lowData.[i] closeData.[i] ]\n(**\nA candlestick chart is useful for plotting stock prices over time. A candle\nis a group of high, open, close and low values over a period of time, e.g. 1 minute, 5 minute, hour, day, etc..\nThe x-axis is usually dateime values and y is a sequence of candle structures.\n*)\n\nopen Plotly.NET\nopen Plotly.NET.TraceObjects\n\nlet candles1 =\n    Chart.Candlestick(\n        \u0060\u0060open\u0060\u0060 = (openData |\u003E Seq.take 30),\n        high = (highData |\u003E Seq.take 30),\n        low = (lowData |\u003E Seq.take 30),\n        close = (closeData |\u003E Seq.take 30),\n        x = (dateData |\u003E Seq.take 30)\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ncandles1\n#endif // IPYNB\n\n(***hide***)\ncandles1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Changing the increasing/decresing colors\n*)\n\nlet candles2 =\n    Chart.Candlestick(\n        stockTimeSeries = candles,\n        IncreasingColor = Color.fromKeyword Cyan,\n        DecreasingColor = Color.fromKeyword Gray\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ncandles2\n#endif // IPYNB\n\n(***hide***)\ncandles2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Removing the rangeslider\n\nIf you want to hide the rangeslider, set the \u0060ShowXAxisRangeSlider\u0060 to false:\n*)\nopen Plotly.NET.LayoutObjects\n\nlet candles3 =\n    Chart.Candlestick(\n        \u0060\u0060open\u0060\u0060 = openData,\n        high = highData,\n        low = lowData,\n        close = closeData,\n        x = dateData,\n        IncreasingColor = Color.fromKeyword Cyan,\n        DecreasingColor = Color.fromKeyword Gray,\n        ShowXAxisRangeSlider = false\n    )\n\n\n(*** condition: ipynb ***)\n#if IPYNB\ncandles3\n#endif // IPYNB\n\n(***hide***)\ncandles3 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/finance-charts/funnel.html","title":"Funnel Charts","content":"(**\n---\ntitle: Funnel Charts\ncategory: Finance Charts\ncategoryindex: 7\nindex: 3\n---\n*)\n \n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Funnel Charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create funnel charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nlet y =\n    [| \u0022Sales person A\u0022\n       \u0022Sales person B\u0022\n       \u0022Sales person C\u0022\n       \u0022Sales person D\u0022\n       \u0022Sales person E\u0022 |]\n\nlet x = [| 1200.; 909.4; 600.6; 300.; 80. |]\n\n(**\nFunnel charts visualize stages in a process using length-encoded bars. This trace can be used to show data in either a part-to-whole \nrepresentation wherein each item appears in a single stage, or in a \u0022drop-off\u0022 representation wherein each item appears in each stage \nit traversed. See also the [FunnelArea]({{root}}/6_2_funnel_area.html) chart for a different approach to visualizing funnel data.\n*)\n\nopen Plotly.NET\nopen Plotly.NET.TraceObjects\n\n// Customize the connector lines used to connect the funnel bars\nlet connectorLine =\n    Line.init (Color = Color.fromString \u0022royalblue\u0022, Dash = StyleParam.DrawingStyle.Dot, Width = 3.)\n\nlet connector = FunnelConnector.init (Line = connectorLine)\n\n// Customize the outline of the funnel bars\nlet line = Line.init (Width = 2., Color = Color.fromHex \u00223E4E88\u0022)\n\n// create a funnel chart using custom connectors and outlines\nlet funnel =\n    Chart.Funnel(x = x, y = y, MarkerColor = Color.fromHex \u002259D4E8\u0022, MarkerOutline = line, Connector = connector)\n    |\u003E Chart.withMarginSize (Left = 100)\n\n(*** condition: ipynb ***)\n#if IPYNB\nfunnel\n#endif // IPYNB\n\n(***hide***)\nfunnel |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/finance-charts/funnel_area.html","title":"FunnelArea Charts","content":"(**\n---\ntitle: FunnelArea Charts\ncategory: Finance Charts\ncategoryindex: 7\nindex: 4\n---\n*)\n \n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# FunnelArea Charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create funnel area charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nlet values = [| 5; 4; 3; 2; 1 |]\nlet text = [| \u0022The 1st\u0022; \u0022The 2nd\u0022; \u0022The 3rd\u0022; \u0022The 4th\u0022; \u0022The 5th\u0022 |]\n\n(**\nFunnelArea charts visualize stages in a process using area-encoded trapezoids. \nThis trace can be used to show data in a part-to-whole representation similar to a \u0022pie\u0022 trace, \nwherein each item appears in a single stage. See also the the [Funnel]({{root}}/6_1_funnel.html) chart for a different approach \nto visualizing funnel data.\n*)\n\nopen Plotly.NET\n\nlet line = Line.init (Color = Color.fromString \u0022purple\u0022, Width = 3.)\n\nlet funnelArea =\n    Chart.FunnelArea(values = values, MultiText = text, SectionOutline = line)\n\n(*** condition: ipynb ***)\n#if IPYNB\nfunnelArea\n#endif // IPYNB\n\n(***hide***)\nfunnelArea |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n(**\n## More styled example\n\nThis example shows the usage of some of the styling possibility using \u0060Chart.FunnelArea\u0060.\nFor even more styling control, use the respective TraceStyle function \u0060TraceDomainStyle.FunnelArea\u0060\n*)\n\nlet funnelAreaStyled =\n    let values = [| 5; 4; 3 |]\n    let labels = [| \u0022The 1st\u0022; \u0022The 2nd\u0022; \u0022The 3rd\u0022 |]\n\n    Chart.FunnelArea(\n        values = values,\n        Labels = labels,\n        MultiText = labels,\n        SectionColors = [ Color.fromKeyword Aqua; Color.fromKeyword Salmon; Color.fromKeyword Tan ],\n        SectionOutlineColor = Color.fromKeyword Black,\n        SectionOutlineWidth = 2.,\n        AspectRatio = 0.75,\n        BaseRatio = 0.1\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nfunnelAreaStyled\n#endif // IPYNB\n\n(***hide***)\nfunnelAreaStyled |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/finance-charts/indicator.html","title":"Indicator Charts","content":"(**\n---\ntitle: Indicator Charts\ncategory: Finance Charts\ncategoryindex: 7\nindex: 5\n---\n*)\n \n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Indicator Charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create indicator charts in F#.\n\nIndicator Charts visualize the evolution of a value compared to a reference value, optionally inside a range.\n\nThere are different types of indicator charts, depending on the \u0060IndicatorMode\u0060 used in chart generation:\n\n- \u0060Delta\u0060/\u0060Number\u0060 (and combinations) simply shows if the value is increasing or decreasing compared to the reference\n- Any combination of the above with \u0060Gauge\u0060 adds a customizable gauge that indicates where the value lies inside a given range.\n*)\n\nopen Plotly.NET\nopen Plotly.NET.TraceObjects\nopen Plotly.NET.LayoutObjects\n\nlet allIndicatorTypes =\n    [ Chart.Indicator(\n          value = 120.,\n          mode = StyleParam.IndicatorMode.NumberDeltaGauge,\n          Title = \u0022Bullet gauge\u0022,\n          DeltaReference = 90.,\n          Range = StyleParam.Range.MinMax(-200., 200.),\n          GaugeShape = StyleParam.IndicatorGaugeShape.Bullet,\n          ShowGaugeAxis = false,\n          Domain = Domain.init (Row = 0, Column = 0)\n      )\n      Chart.Indicator(\n          value = 200.,\n          mode = StyleParam.IndicatorMode.NumberDeltaGauge,\n          Title = \u0022Angular gauge\u0022,\n          Delta = IndicatorDelta.init (Reference = 160),\n          Range = StyleParam.Range.MinMax(0., 250.),\n          Domain = Domain.init (Row = 0, Column = 1)\n      )\n      Chart.Indicator(\n          value = 300.,\n          mode = StyleParam.IndicatorMode.NumberDelta,\n          Title = \u0022number and delta\u0022,\n          DeltaReference = 90.,\n          Domain = Domain.init (Row = 1, Column = 0)\n      )\n      Chart.Indicator(\n          value = 40.,\n          mode = StyleParam.IndicatorMode.Delta,\n          Title = \u0022delta\u0022,\n          DeltaReference = 90.,\n          Domain = Domain.init (Row = 1, Column = 1)\n      ) ]\n    |\u003E Chart.combine\n    |\u003E Chart.withLayoutGridStyle (Rows = 2, Columns = 2)\n    |\u003E Chart.withMarginSize (Left = 200)\n\n\n(*** condition: ipynb ***)\n#if IPYNB\nallIndicatorTypes\n#endif // IPYNB\n\n(***hide***)\nallIndicatorTypes |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/finance-charts/ohlc.html","title":"OHLC Charts","content":"(**\n---\ntitle: OHLC Charts\ncategory: Finance Charts\ncategoryindex: 8\nindex: 1\n---\n*)\n \n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../data/Deedle.dll\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# OHLC Charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create ohlc charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Deedle\n\nlet data =\n    __SOURCE_DIRECTORY__ \u002B \u0022/../data/finance-charts-apple.csv\u0022\n    |\u003E fun csv -\u003E Frame.ReadCsv(csv, true, separators = \u0022,\u0022)\n\nlet openData: seq\u003Cfloat\u003E = data.[\u0022AAPL.Open\u0022] |\u003E Series.values\nlet highData: seq\u003Cfloat\u003E = data.[\u0022AAPL.High\u0022] |\u003E Series.values\nlet lowData: seq\u003Cfloat\u003E = data.[\u0022AAPL.Low\u0022] |\u003E Series.values\nlet closeData: seq\u003Cfloat\u003E = data.[\u0022AAPL.Close\u0022] |\u003E Series.values\n\nlet dateData =\n    data |\u003E Frame.getCol \u0022Date\u0022 |\u003E Series.values |\u003E Seq.map System.DateTime.Parse\n\n(**\nAn open-high-low-close chart (also OHLC) is a type of chart typically used to illustrate movements in the price of a financial instrument over time. \nEach vertical line on the chart shows the price range (the highest and lowest prices) over one unit of time. \nTick marks project from each side of the line indicating the opening price (e.g., for a daily bar chart this would be the starting price for that day) on the left, and the closing price for that time period on the right. \nThe bars may be shown in different hues depending on whether prices rose or fell in that period.\n\nYou can create an OHLC chart using \u0060Chart.OHLC\u0060:\n*)\n\nopen Plotly.NET\nopen Plotly.NET.TraceObjects\n\nlet ohlc1 =\n    Chart.OHLC(\n        \u0060\u0060open\u0060\u0060 = (openData |\u003E Seq.take 30),\n        high = (highData |\u003E Seq.take 30),\n        low = (lowData |\u003E Seq.take 30),\n        close = (closeData |\u003E Seq.take 30),\n        x = (dateData |\u003E Seq.take 30)\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nohlc1\n#endif // IPYNB\n\n(***hide***)\nohlc1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Changing the increasing/decresing colors\n*)\n\nlet ohlc2 =\n    Chart.OHLC(\n        \u0060\u0060open\u0060\u0060 = openData,\n        high = highData,\n        low = lowData,\n        close = closeData,\n        x = dateData,\n        IncreasingColor = Color.fromKeyword Cyan,\n        DecreasingColor = Color.fromKeyword Gray\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nohlc2\n#endif // IPYNB\n\n(***hide***)\nohlc2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Removing the rangeslider\n\nIf you want to hide the rangeslider, set the \u0060ShowXAxisRangeSlider\u0060 to false:\n*)\nopen Plotly.NET.LayoutObjects\n\nlet ohlc3 =\n    Chart.OHLC(\n        \u0060\u0060open\u0060\u0060 = openData,\n        high = highData,\n        low = lowData,\n        close = closeData,\n        x = dateData,\n        IncreasingColor = Color.fromKeyword Cyan,\n        DecreasingColor = Color.fromKeyword Gray,\n        ShowXAxisRangeSlider = false\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nohlc3\n#endif // IPYNB\n\n(***hide***)\nohlc3 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/finance-charts/waterfall.html","title":"Waterfall Charts","content":"(**\n---\ntitle: Waterfall Charts\ncategory: Finance Charts\ncategoryindex: 7\nindex: 6\n---\n*)\n \n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Waterfall Charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create waterfall charts in F#.\n\nWaterfall charts are special bar charts that help visualizing the cumulative effect of sequentially introduced positive or negative values.\n\nIn addition to the x and y values, a \u0060WaterfallMeasure\u0060 can be passed corresponding to each xy pair (there is also a constructor overload using a tripel of x,y,measure).\nBy default the values are considered as \u0027relative\u0027. However; it is possible to use \u0027total\u0027 to compute the sums. Also \u0027absolute\u0027 could be applied to reset the computed total or to declare an initial value where needed.\n\n*)\n\nopen Plotly.NET\nopen Plotly.NET.TraceObjects\nopen Plotly.NET.LayoutObjects\n\nlet waterfall1 =\n    Chart.Waterfall(\n        x =\n            [ \u0022Sales\u0022\n              \u0022Consulting\u0022\n              \u0022Net revenue\u0022\n              \u0022Purchases\u0022\n              \u0022Other expenses\u0022\n              \u0022Profit before tax\u0022 ],\n        y = [ 60; 80; 0; -40; -20; 0 ],\n        Measure =\n            [ StyleParam.WaterfallMeasure.Relative\n              StyleParam.WaterfallMeasure.Relative\n              StyleParam.WaterfallMeasure.Total\n              StyleParam.WaterfallMeasure.Relative\n              StyleParam.WaterfallMeasure.Relative\n              StyleParam.WaterfallMeasure.Total ]\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nwaterfall1\n#endif // IPYNB\n\n(***hide***)\nwaterfall1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Horizontal waterfall charts\n\nSet the orientation argument to \u0060Horizontal\u0060 to create a horizontal waterfall. Keep in mind to correctly assign x and y values (the vallues are switched on the axes in comparison to the chart example above)\nTo keep better track of which measure belongs to which datum, use \n*)\n\nlet waterfall2 =\n    Chart.Waterfall(\n        xymeasures =\n            [ 60, \u0022Sales\u0022, StyleParam.WaterfallMeasure.Relative\n              80, \u0022Consulting\u0022, StyleParam.WaterfallMeasure.Relative\n              0, \u0022Net revenue\u0022, StyleParam.WaterfallMeasure.Total\n              -40, \u0022Purchases\u0022, StyleParam.WaterfallMeasure.Relative\n              -20, \u0022Other expenses\u0022, StyleParam.WaterfallMeasure.Relative\n              0, \u0022Profit before tax\u0022, StyleParam.WaterfallMeasure.Total ],\n        Orientation = StyleParam.Orientation.Horizontal\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nwaterfall2\n#endif // IPYNB\n\n(***hide***)\nwaterfall2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/general/basics.html","title":"Basics","content":"(**\n---\ntitle: Basics \ncategory: General\ncategoryindex: 1\nindex: 1\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Plotly.NET basics\n\n_This section is WIP._\n\n### Table of contents\n\n- [Library design](#Library-design)\n- [GenericChart](#GenericChart)\n- [Layers of abstraction](#Layers-of-abstraction)\n    - [The Chart module](#The-Chart-module)\n    - [The TraceStyle modules](#The-TraceStyle-modules)\n    - [Dynamic object](#Dynamic-object)\n\n## Library design\n\nPlotly.NET is a .NET wrapper for creation of [plotly charts](https://plot.ly). This means that, under the hood, all functionality creates JSON objects that can be rendered by plotly.\n\nA plotly.js chart consists of 3 objects:\n\n- \u0060data\u0060, which is a collection of \u0060traces\u0060 which represent the data and chart type used to visualize the data\n- \u0060layout\u0060, which controls the general chart layout such as axis positions and styles\n- \u0060config\u0060 high level properties of the chart like making all chart elements editable or the tool bar on top\n\nThese are mirrored in Plotly.NET\u0027s central type, \u0060GenericChart\u0060:\n\n## GenericChart\n\nThe central type that gets created by all Chart constructors is \u0060GenericChart\u0060, which itself represents either a single chart or a multi chart (as a Discriminate Union type). It looks like this:\n\n\u0060\u0060\u0060\ntype GenericChart =\n    | Chart of Trace * Layout * Config * DisplayOptions\n    | MultiChart of Trace list * Layout * Config * DisplayOptions\n\n\u0060\u0060\u0060\n\nAs you can see, a \u0060GenericChart\u0060 consists of four top level objects - \u0060Trace\u0060 (multiple of those in the case of a MultiChart) , \u0060Layout\u0060, \u0060Config\u0060, and \u0060DisplayOptions\u0060.\n\n- \u0060Trace\u0060 is in principle the representation of a dataset on a chart, including for example the data itself, color and shape of the visualization, etc.\n- \u0060Layout\u0060 is everything of the chart that is not dataset specific - e.g. the shape and style of axes, the chart title, etc.\n- \u0060Config\u0060 is an object that configures high level properties of the chart like making all chart elements editable or the tool bar on top\n- \u0060DisplayOptions\u0060 is an object that contains meta information about how the html document that contains the chart.\n\n## Layers of abstraction\n\nPlotly.NET uses multiple layers of abstractions to generate valid plotly.js JSON objects with different levels of control and complexity:\n\n### The Chart module\n\nThe \u0060Chart\u0060 module provides the highest layer of abstraction. Here, plotly.js trace types are broken down to the most common and useful styling options, and combined with common layout settings.\nIt also provides composite charts which consist of multiple traces such as \u0060Chart.Range\u0060, which really is a combination of 3 scatter traces.\n\nIn general, we recommend always using named arguments - even for mandatory arguments - as future changes/addition to the API might change the argument order.\n\nHere is an example on how to create a simple 2D point chart:\n*)\n\nopen Plotly.NET\n\nlet pointChart = Chart.Point(xy = [ 1, 2; 3, 4 ])\n\n(*** condition: ipynb ***)\n#if IPYNB\npointChart\n#endif // IPYNB\n\n(***hide***)\npointChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n### The TraceStyle modules\n\nThe TraceStyle modules offer access to all parameters supported by plotly.js for the respective trace type. If you want to create a \u0060scatter\u0060 trace, you can use the function\n\u0060Trace2D.initScatter\u0060, which will initialize an empty trace of type \u0060scatter\u0060 and apply a styling function to it. This function would be \u0060Trace2DStyle.Scatter\u0060, which can apply all scatter related parameters to a trace. \nIn contrast to the \u0060Chart\u0060 module, the parameters are named exactly the same as in plotly.js (but in PascalCase). \n\nTo create a GenericChart from a \u0060Trace\u0060 object, you can use \u0060GenericChart.ofTraceObject\u0060.\nCompare how many more styling options you have compared to \u0060Chart.Point\u0060 above, but also take a look at how more verbose you have to be. \nYou can clearly see the advantages and disadvantages of both approaches.\n*)\n\nlet withTraceStyle =\n    Trace2D.initScatter (Trace2DStyle.Scatter(X = [ 1; 3 ], Y = [ 2; 4 ]))\n    |\u003E GenericChart.ofTraceObject true\n\n(*** condition: ipynb ***)\n#if IPYNB\nwithTraceStyle\n#endif // IPYNB\n\n(***hide***)\nwithTraceStyle |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n### Dynamic object\n\nThe prime directive for all functions provided by Plotly.NET is the construction of valid plotly JSON objects.\nFor this purpose, \u0060Trace\u0060, \u0060Layout\u0060, and \u0060Config\u0060 (and many other internal objects) are inheriting from [\u0060DynamicObj\u0060](https://github.com/plotly/Plotly.NET/blob/dev/src/Plotly.NET/DynamicObj.fs),\nan extension of \u0060DynamicObject\u0060 which makes it possible to set arbitraryly named and typed properties of these objects via the \u0060?\u0060 operator.\n\nIf you want to exactly mirror a plotly.js tutorial, or want to set properties that for any reason are not abstracted in Plotly.NET, \nit can be useful to use the power of DynamicObj to set the parameters directly. Just make sure that the property name is exactly the same as in plotly.js (all lowercase)\n\nSo if you want to set any kind of property on one of these objects you can do it in a very declarative way like this:\n*)\n\nlet myTrace = Trace(\u0022scatter\u0022) // create a scatter trace\nmyTrace?x \u003C- [ 0; 3 ] // set the x property (the x dimension of the data)\nmyTrace?y \u003C- [ 2; 4 ] // set the y property (the y dimension of the data)\n\nlet withDynObj = GenericChart.ofTraceObject true myTrace\n\n(*** condition: ipynb ***)\n#if IPYNB\nwithDynObj\n#endif // IPYNB\n\n(***hide***)\nwithDynObj |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nlets have a look at the trace object that will be created. The relevant section of the html generated with Chart.Show is the following:\n\n\u0060\u0060\u0060javascript\nvar data = [{\u0022type\u0022:\u0022scatter\u0022,\u0022x\u0022:[0,1,2],\u0022y\u0022:[0,1,2]}];\n\u0060\u0060\u0060\n\n*)"},{"uri":"https://plotly.net/general/chart-config.html","title":"Chart config","content":"(**\n---\ntitle: Chart config\ncategory: General\ncategoryindex: 1\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Chart config\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n\u0060Config\u0060 is an object that configures high level properties of the chart like making all chart elements editable or the tool bar on top\n\n## Image button options\n\nOptions for chart export can be set in the config at \u0060ToImageButtonOptions\u0060:\n\n  - Three file formats for chart exports are supported (SVG, PNG, JPEG) and can be set as \u0060Format\u0060. \n\n  - A predefined name for the downloaded chart can be set at \u0060Filename\u0060. \n\n  - The dimensions of the downloaded chart are set at \u0060Width\u0060 and \u0060Height\u0060.\n\n  - The \u0060Scale\u0060 defines the size of the exported svg.\n\nThe settings do not apply for the html document containing the chart but for charts that are exported by clicking the camera icon in the menu bar.\n\n*)\n\nopen Plotly.NET\nopen Plotly.NET.ConfigObjects\n\nlet svgConfig =\n    Config.init (\n        ToImageButtonOptions =\n            ToImageButtonOptions.init (\n                Format = StyleParam.ImageFormat.JPEG,\n                Filename = \u0022mySvgChart\u0022,\n                Width = 900.,\n                Height = 600.,\n                Scale = 10.\n            )\n    )\n\nlet svgButtonChart = Chart.Point(xy = [ (1., 2.) ]) |\u003E Chart.withConfig svgConfig\n\n\n(*** condition: ipynb ***)\n#if IPYNB\nsvgButtonChart\n#endif // IPYNB\n\n(***hide***)\nsvgButtonChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \n## Static plots\n\nTo create a static plot that has no hoverable elements, use \u0060StaticPlot=true\u0060 on the Config:\n\n*)\n\nlet staticConfig = Config.init (StaticPlot = true)\n\nlet staticPlot = Chart.Point(xy = [ (1., 2.) ]) |\u003E Chart.withConfig staticConfig\n\n(*** condition: ipynb ***)\n#if IPYNB\nstaticPlot\n#endif // IPYNB\n\n(***hide***)\nstaticPlot |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \n## Editable charts\n\nYou can define fields that can be edited on the chart by setting \u0060Editable = true\u0060 on the config, optionally explicitly setting the editable parts via \u0060EditableAnnotations\u0060\n\n*)\n\nlet editableConfig =\n    Config.init (Editable = true, Edits = Edits.init (LegendPosition = true, AxisTitleText = true, LegendText = true))\n\nlet editablePlot = Chart.Point(xy = [ (1., 2.) ]) |\u003E Chart.withConfig editableConfig\n\n(*** condition: ipynb ***)\n#if IPYNB\neditablePlot\n#endif // IPYNB\n\n(***hide***)\neditablePlot |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \n## Responsive charts\n\nTo create a chart that is reponsive to its container size, use \u0060Responsive=true\u0060 on the Config:\n\n(try resizing the window)\n*)\n\nlet responsiveConfig = Config.init (Responsive = true)\n\nlet responsivePlot =\n    Chart.Point(xy = [ (1., 2.) ]) |\u003E Chart.withConfig responsiveConfig\n\n(*** condition: ipynb ***)\n#if IPYNB\nresponsivePlot\n#endif // IPYNB\n\n(***hide***)\nresponsivePlot |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/general/defaults.html","title":"Global default values","content":"(**\n---\ntitle: Global default values\ncategory: General\ncategoryindex: 1\nindex: 6\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Global default values\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\nPlotly.NET provides mutable global default values in the \u0060Defaults\u0060 module.\n\nThese values are always used in Chart generation. The default values are:\n\n|Value name|Value|\n|---|---|\n| DefaultWidth | \u0060600\u0060 |\n| DefaultHeight | \u0060600\u0060 |\n| DefaultConfig | \u0060Config.init(Responsive = true)\u0060 |\n| DefaultDisplayOptions | \u0060DisplayOptions.init()\u0060 |\n| DefaultTemplate | \u0060ChartTemplates.plotly\u0060 |\n\n## Changing default values\n\nThe following code replaces the default template from the global defaults:\n*)\nopen Plotly.NET\n\nlet before = Chart.Point([ 1, 2 ])\n\n(*** condition: ipynb ***)\n#if IPYNB\nbefore\n#endif // IPYNB\n\n(***hide***)\nbefore |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\nDefaults.DefaultTemplate \u003C- ChartTemplates.lightMirrored\n\nlet after = Chart.Point([ 1, 2 ])\n\n(*** condition: ipynb ***)\n#if IPYNB\nafter\n#endif // IPYNB\n\n(***hide***)\nafter |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nTo use the default template again:\n*)\n\nDefaults.DefaultTemplate \u003C- ChartTemplates.plotly\n\n(**\n## Ignoring global defaults\n\nAll Chart functions have a \u0060UseDefaults\u0060 argument, which when set to \u0060false\u0060 will ignore all global defaults:\n*)\n\n\nlet noDefaults = Chart.Point([ 1, 2 ], UseDefaults = false)\n\n(*** condition: ipynb ***)\n#if IPYNB\nnoDefaults\n#endif // IPYNB\n\n(***hide***)\nnoDefaults |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/general/display-options.html","title":"Display Options","content":"(**\n---\ntitle: Display Options\ncategory: General\ncategoryindex: 1\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Display Options\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to alter the display options that control the html document that contains plotly charts\n\nYou can control the html document that gets created via \u0060Chart.Show\u0060 with various functions that change a chart\u0027s \u0060DisplayOptions\u0060.\n\nNaturally, these full html documents can not be embedded in this documentation page, so sometimes images have to suffice for demonstrations here.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\nlet x = [ 1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10. ]\nlet y = [ 2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1. ]\n\n(**\n## Referencing PlotlyJS\n\nFor rendering plotly.js charts in a html document, you need to reference plotly.js in some form (duh!)\n\nPlotly.NET provides multiple ways to do that in the generated html:\n\n- \u0060Full\u0060: Include the full plotly.js source in a script tag. HTML files using this option are self-contained and can be used offline.\n- \u0060CDN\u0060: The default. uses a script tag in the head of the generated HTML to load plotly.js from a CDN.\n- \u0060Require\u0060: Use requirejs to load plotly. This option is for example used in Plotly.NET.Interactive inside notebooks.\n- \u0060NoReference\u0060: Don\u0027t include any plotly.js reference. Useful if you want to embed the output into another page that already references plotly - the documentation pages you are reading now are generated with this option.\n\nYou can control this on a per-chart basis via \u0060Chart.withDisplayOptionsStyle\u0060, for example if you want to include a script tag with the full plotly.js source:\n\n*)\n\n(***do-not-eval***)\nChart.Point(x = x, y = y)\n|\u003E Chart.withDisplayOptionsStyle (PlotlyJSReference = Full)\n\n\n(**\n## Writing HTML tags and including Chart descriptions\n\nPlotly.NET uses [Giraffe.ViewEngine](https://github.com/giraffe-fsharp/Giraffe.ViewEngine) internally to generate HTML documents, which means you can also use that DSL to add additional content to the output.\n\nFor example, use \u0060Chart.withDescription\u0060 to append a list of html tags below the rendered chart:\n*)\n\nopen Giraffe.ViewEngine\n\nlet desc1 =\n    Chart.Point(x = x, y = y, Name = \u0022desc1\u0022)\n    |\u003E Chart.withDescription\n        [ h1 [] [ str \u0022Hello\u0022 ]\n          p [] [ str \u0022F#\u0022 ]\n          ol [] [ li [] [ str \u0022Item 1\u0022 ]; li [] [ str \u0022Item 2\u0022 ] ] ]\n\n\n(*** condition: ipynb ***)\n#if IPYNB\ndesc1\n#endif // IPYNB\n\n(***hide***)\ndesc1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Adding additional head tags\n\n_Note: the example here is shown via an image, as the docs themselves are html pages that cannot load additional head tags._\n\nYou can add any number of additional html tags to the documents \u0060\u003Chead\u003E\u0060 tag using \u0060Chart.WithAdditionalHeadTags\u0060.\n\nFor example, you can load external css libraries to style the chart description:\n*)\n\n//html for description containing bulma classes such as \u0022hero\u0022\nlet bulmaHero =\n    section\n        [ _class \u0022hero is-primary is-bold\u0022 ]\n        [ div\n              [ _class \u0022hero-body\u0022 ]\n              [ p [ _class \u0022title\u0022 ] [ str \u0022Hero title\u0022 ]\n                p [ _class \u0022subtitle\u0022 ] [ str \u0022Hero subtitle\u0022 ] ] ]\n// chart description containing bulma classes\nlet description3 = [ h1 [ _class \u0022title\u0022 ] [ str \u0022I am heading\u0022 ]; bulmaHero ]\n\nlet desc3 =\n    Chart.Point(x = x, y = y, Name = \u0022desc3\u0022)\n    |\u003E Chart.withAdditionalHeadTags\n        [ link\n              [ _rel \u0022stylesheet\u0022\n                _href \u0022https://cdn.jsdelivr.net/npm/bulma@0.9.2/css/bulma.min.css\u0022 ] ]\n    |\u003E Chart.withDescription description3\n\n(**\n![]({{root}}img/desc3.png)\n\n## Using MathTeX\n\n\u0060Chart.WithMathTex\u0060 is a prebuilt function to enable MathTeX for your generated plotly chart documents.\n\nIt will add a MathJax script reference to your document based on which version (either 2 or 3) you want to use:\n*)\n\nlet mathtex_chart =\n    [ Chart.Point(xy = [ (1., 2.) ], Name = @\u0022$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$\u0022)\n      Chart.Point(xy = [ (2., 4.) ], Name = @\u0022$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$\u0022) ]\n    |\u003E Chart.combine\n    |\u003E Chart.withTitle @\u0022$\\beta_{1c} = 25 \\pm 11 \\text{ km s}^{-1}$\u0022\n    |\u003E Chart.withMathTex (AppendTags = true, MathJaxVersion = 3)\n\n(*** condition: ipynb ***)\n#if IPYNB\nmathtex_chart\n#endif // IPYNB\n\n(***hide***)\nmathtex_chart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/general/image-export.html","title":"Static image export","content":"(**\n---\ntitle: Static image export\ncategory: General\ncategoryindex: 1\nindex: 2\n---\n*)\n\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022nuget: PuppeteerSharp, 9.0.2\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n#r \u0022../../src/Plotly.NET.ImageExport/bin/Release/netstandard2.0/Plotly.NET.ImageExport.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.ImageExport, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n\n(**\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Static image export\n\n### Table of contents\n\n- [Saving static images](#Saving-static-images)\n- [Generating URIs for static chart images](#Generating-URIs-for-static-chart-images)\n\nAs Plotly.NET generates static html pages that contain charts rendered by plotly.js, static image export needs a lot more overhead under the hood \nthan you might expect. The underlying renderer needs to execute javascript, leading to the usage of headless browsers.\n\nThe package \u0060Plotly.NET.ImageExport\u0060 contains extensions for Plotly.NET to render static images. It is designed with extensibility in mind and\nit is very easy to add a new rendering engine. The current engines are provided:\n\n| Rendering engine | Type | Prerequisites |\n|-|-|-|\n| [PuppeteerSharp](https://github.com/hardkoded/puppeteer-sharp) | headless browser | [read more here](https://github.com/hardkoded/puppeteer-sharp#prerequisites) |\n\n## Saving static images\n\nBy referencing the \u0060Plotly.NET.ImageExport\u0060 package, you get access to:\n\n - jpg via \u0060Chart.SaveJPG\u0060\n - png via \u0060Chart.SavePNG\u0060\n - svg via \u0060Chart.SaveSVG\u0060\n\n(and Extensions for C# style fluent interfaces by opening the \u0060GenericChartExtensions\u0060 namespace)\n\nThe parameters for all three functions are exactly the same. \n*)\n\nopen Plotly.NET\nopen Plotly.NET.ImageExport\n\nlet exampleChart =\n    Chart.Histogram2DContour([ 1.; 2.; 2.; 4.; 5. ], [ 1.; 2.; 2.; 4.; 5. ])\n\n(***do-not-eval***)\nexampleChart\n|\u003E Chart.saveJPG (\u0022/your/path/without/extension/here\u0022, Width = 300, Height = 300)\n\n(**\n## Generating URIs for static chart images\n\nBy referencing the \u0060Plotly.NET.ImageExport\u0060 package, you get access to:\n\n - jpg via \u0060Chart.toBase64JPGString\u0060\n - png via \u0060Chart.toBase64PNGString\u0060\n - svg via \u0060Chart.toSVGString\u0060\n\n(and Extensions for C# style fluent interfaces by opening the \u0060GenericChartExtensions\u0060 namespace)\n\n*)\n\n(***do-not-eval***)\nlet base64JPG = exampleChart |\u003E Chart.toBase64JPGString (Width = 300, Height = 300)\n\n(**\nIt is very easy to construct a html tag that includes this image via a base64 uri. For SVGs, \nnot even that is necessary and just the SVG string can be used.\n*)\n\n(***do-not-eval***)\n$\u0022\u0022\u0022\u003Cimg\n    src= \u0022{base64JPG}\u0022\n/\u003E\u0022\u0022\u0022"},{"uri":"https://plotly.net/general/multi-arguments.html","title":"Single and multi arguments","content":"(**\n---\ntitle: Single and multi arguments\ncategory: General\ncategoryindex: 1\nindex: 7\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n# Single and multi arguments\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\nPlotly.js has many properties that can be either a single value or a collection of values.\n\nIn Plotly.NET, this is modelled by 2 arguments in the constructors:\n\n- The \u0022single value version\u0022 (e.g. \u0060Opacity\u0060) that sets one value in the target property\n- The \u0022multi value version\u0022 (e.g. \u0060MultiOpacity\u0060) that sets a collection of values in the target property\n\n**Multi-arguments always have precedent over single arguments, meaning setting both will always set the multi version**\n\nHere is an example for bar charts:\n\n*)\nopen Plotly.NET\n\nlet bar1 =\n    Chart.Bar(\n        keysValues = [ \u0022first\u0022, 1; \u0022second\u0022, 2; \u0022third\u0022, 3 ],\n        MarkerColor =\n            Color.fromColors\n                [ // one color for each individual bar\n                  Color.fromKeyword Salmon\n                  Color.fromKeyword SteelBlue\n                  Color.fromKeyword Azure ],\n        MultiMarkerPatternShape =\n            [ // individual pattern shape for each bar\n              StyleParam.PatternShape.DiagonalAscending\n              StyleParam.PatternShape.Dots\n              StyleParam.PatternShape.HorizontalLines ],\n        Opacity = 0.75, // opacity for the whole trace\n        MultiText =\n            [ // individual text associated with each bar\n              \u0022first bar\u0022\n              \u0022second bar\u0022\n              \u0022third bar\u0022 ],\n        TextPosition = StyleParam.TextPosition.Inside // Textposition for every text item associated with this trace\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nbar1\n#endif // IPYNB\n\n(***hide***)\nbar1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nHere is the exact opposite chart to the above, with single values for multi and vice versa \n*)\n\nlet bar2 =\n    Chart.Bar(\n        keysValues = [ \u0022first\u0022, 1; \u0022second\u0022, 2; \u0022third\u0022, 3 ],\n        MarkerColor = Color.fromKeyword Salmon, // one color for every bar\n        MarkerPatternShape = StyleParam.PatternShape.DiagonalAscending, // one pattern shape for the whole trace\n        MultiOpacity = [ 0.75; 0.5; 0.25 ], //Different opacity for each bar\n        Text = \u0022its a bar\u0022, // one text item for the whole trace\n        MultiTextPosition =\n            [ // Textposition for every individual text item associated with this trace\n              StyleParam.TextPosition.Outside\n              StyleParam.TextPosition.Outside\n              StyleParam.TextPosition.Inside ]\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nbar2\n#endif // IPYNB\n\n(***hide***)\nbar2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/general/styling-markers.html","title":"Styling Markers","content":"(**\n---\ntitle: Styling Markers\ncategory: General\ncategoryindex: 1\nindex: 9\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# Styling Markers\n\n#### Table of contents\n- [Basics](#Basics)\n- [Marker Symbols](#Marker-Symbols)\n    - [2D Marker Symbols](#2D-Marker-Symbols)\n    - [3D Marker Symbols](#3D-Marker-Symbols)\n\n## Basics\n\nYou can control marker size, color, symbol, and other aesthetics by styling the \u0060Marker\u0060 object associated with a chart.\n\nThis can be done by either setting the \u0060Marker\u0060 argument of the chart constructor: \n*)\n\nopen Plotly.NET\nopen Plotly.NET.TraceObjects\n\nlet byConstructor = \n    Chart.Point(\n        xy = [1,2], \n        Marker = Marker.init(\n            Color=Color.fromKeyword Red, \n            Size=20\n        )\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nbyConstructor\n#endif // IPYNB\n\n(***hide***)\nbyConstructor |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nor after chart creation with \u0060withMarkerStyle\u0060:\n*)\n\nlet byStyle = \n    Chart.Point(xy=[1,2])\n    |\u003E Chart.withMarkerStyle(\n        Color=Color.fromKeyword Blue, \n        Size=50\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nbyStyle\n#endif // IPYNB\n\n(***hide***)\nbyStyle |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Marker Symbols\n\nMarker symbols control the appearance of points in a plot. There are some things to keep in mind when working with marker symbols:\n - 2D and 3D Markers are different types ()\n - 2D Markers can be modified using modification syntax\n - 3D Markers cannot be modified\n\n### 2D Marker Symbols\n\n2D Marker symbols are set using \u0060StyleParam.MarkerSymbol\u0060.\n*)\n\nlet cross2D = \n    Chart.Point(xy=[1,2])\n    |\u003E Chart.withMarkerStyle(\n        Color=Color.fromKeyword Blue, \n        Size=50,\n        Symbol=StyleParam.MarkerSymbol.Cross\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ncross2D\n#endif // IPYNB\n\n(***hide***)\ncross2D |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nTo modify a symbol, use \u0060StyleParam.MarkerSymbol.Modified\u0060, which takes a MarkerSymbol and a SymbolStyle.\n\nThe following code modifies \u0060StyleParam.MarkerSymbol.Circle\u0060 with \u0060StyleParam.SymbolStyle.Open\u0060 to create an open circle symbol:\n*)\n\nlet circle2DOpen = \n    Chart.Point(xy=[1,2])\n    |\u003E Chart.withMarkerStyle(\n        Color=Color.fromKeyword Blue, \n        Size=50,\n        Symbol=StyleParam.MarkerSymbol.Modified(\n            StyleParam.MarkerSymbol.Circle,\n            StyleParam.SymbolStyle.Open\n        )\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ncircle2DOpen\n#endif // IPYNB\n\n(***hide***)\ncircle2DOpen |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n### 3D Marker Symbols\n\n2D Marker symbols are set using \u0060StyleParam.MarkerSymbol3D\u0060.\n\nKeep in mind that these must also be set on the \u0060Symbol3D\u0060 property of the \u0060Marker\u0060 object, not the \u0060Symbol\u0060 property.\n*)\n\nlet cross3D = \n    Chart.Point3D(xyz=[1,2,3])\n    |\u003E Chart.withMarkerStyle(\n        Color=Color.fromKeyword Blue, \n        Size=50,\n        Symbol3D=StyleParam.MarkerSymbol3D.Cross\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ncross3D\n#endif // IPYNB\n\n(***hide***)\ncross3D |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/general/templates.html","title":"Chart Templates","content":"(**\n---\ntitle: Chart Templates\ncategory: General\ncategoryindex: 1\nindex: 5\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Chart Templates\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n## Using premade templates\n\npremade templates can be accessed via the \u0060ChartTemplates\u0060 module. In fact, the \u0060ChartTemplates.plotly\u0060 template is always active by default (see [global defaults](./00_5_defaults.html))\n*)\nopen Plotly.NET\n\nlet lightMirrored =\n    Chart.Point(xy = [ 1, 2 ]) |\u003E Chart.withTemplate ChartTemplates.lightMirrored\n\n(*** condition: ipynb ***)\n#if IPYNB\nlightMirrored\n#endif // IPYNB\n\n(***hide***)\nlightMirrored |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n\nHere are the contents of the template \u0060plotly\u0060 which is used by default for all charts: https://github.com/plotly/Plotly.NET/blob/6e28decca64441320d8cffab5bcfee664b118c36/src/Plotly.NET/Templates/ChartTemplates.fs#L163-L665\n\n## Creating custom templates\n\nChart Templates consist of a \u0060Layout\u0060 object and a collection of \u0060Trace\u0060 objects. Both are used to set default values for all possible styling options:\n*)\n\nopen Plotly.NET.TraceObjects\n\nlet layoutTemplate =\n    Layout.init (Title = Title.init (\u0022I will always be there now!\u0022))\n\nlet traceTemplates =\n    [ Trace2D.initScatter (\n          Trace2DStyle.Scatter(Marker = Marker.init (Symbol = StyleParam.MarkerSymbol.ArrowLeft, Size = 20))\n      ) ]\n\nlet myTemplate = Template.init (layoutTemplate, traceTemplates)\n\nlet myTemplateExampleChart =\n    Chart.Point(xy = [ 1, 2 ]) |\u003E Chart.withTemplate myTemplate\n\n(*** condition: ipynb ***)\n#if IPYNB\nmyTemplateExampleChart\n#endif // IPYNB\n\n(***hide***)\nmyTemplateExampleChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/general/working-with-colors.html","title":"Working with colors","content":"(**\n---\ntitle: Working with colors\ncategory: General\ncategoryindex: 1\nindex: 8\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n\n# Working with colors\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n#### Table of contents\n- [The Color type](#The-Color-type)\n- [Setting single colors](#Setting-single-colors)\n- [Setting individual colors](#Setting-individual-colors)\n- [Mapping values to a color scale](#Mapping-values-to-a-color-scale)\n\n\n## The Color type\n\nThere are many ways how plotly.js handles colors. In general, individual colors can be set the same way as in general html/css - so for example string representations of (a)rgb, hsl, or keywords such as \u0022red\u0022\nAdditionally to that, there are several ways of controlling color attributes of plotly objects:\n\n- Setting a single color which will be used for all elements in a collection, for example all markers: \u0060\u0022rgb(r,g,b)\u0022\u0060 or \u0060\u0022red\u0022\u0060\n- Setting an array of colors to assign single colors for each individual item in a collection, for example each individual marker: \u0060[\u0022red\u0022,\u0022blue\u0022]\u0060\n- Mapping values to a color scale, for example coloring markers by intensity of the datum: \u0060[6.9, 4.2]\u0060\n- These can also be mixed in collections.\n\nTo do this justice in Plotly.NET in a type-safe way, we provide the dedicated \u0060Color\u0060 type that has methods to create all of these variants.\n\nThe \u0060Color\u0060 type provides methods to initialize all of the above mentioned ways to control color attributes of plotly charts.\nColor Keywords and ARGB are also wrapped in a typesafe way:\n*)\n\nopen Plotly.NET\n\n// single colors\nlet singleColor1 = Color.fromKeyword Red // using html color keywords\nlet singleColor2 = Color.fromARGB 255 42 13 1 // using type-safe argb\nlet singleColor3 = Color.fromHex \u0022#FFFFFF\u0022 // parsing hex strings\nlet singleColor4 = Color.fromString \u0022red\u0022 // you can also set any string value if you really need to\n\n(**\nThe \u0060Color\u0060 type is basically a container for boxed values that gets converted to correct plotly attributes internally:\n*)\n\nsingleColor1.Value\n(***include-it***)\n\nopen Newtonsoft.Json\nsingleColor3 |\u003E JsonConvert.SerializeObject\n(***include-it***)\n\n(**\n## Setting single colors\n\nHere is an example on how to set a single color for a plotly color attribute:\n*)\n\nlet colorChart1 =\n    Chart.Bubble(\n        xysizes = [ 1, 2, 15; 3, 4, 15; 5, 6, 15 ],\n        MarkerColor = Color.fromKeyword Red // will make ALL markers red.\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ncolorChart1\n#endif // IPYNB\n\n(***hide***)\ncolorChart1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Setting individual colors\n\n\u0060Color.fromColors\u0060 takes a collection of colors and wraps them as a new \u0060Color\u0060 object.\nHere is an example on how to set individual colors in a collection for a plotly color attribute.\n*)\n\nlet colorChart2 =\n    Chart.Bubble(\n        xysizes = [ 1, 2, 15; 3, 4, 15; 5, 6, 15 ],\n        MarkerColor = Color.fromColors [ Color.fromKeyword Red; Color.fromKeyword Green; Color.fromKeyword Blue ]\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ncolorChart2\n#endif // IPYNB\n\n(***hide***)\ncolorChart2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Mapping values to a color scale\n\n\u0060Color.fromColorScaleValues\u0060 takes a collection of values that will be mapped onto a color scale (normalized between min and max value)\nHere is an example on how to set up color scale mapping:\n*)\nlet x = [ 1; 2; 3 ]\nlet y = [ 2; 3; 4 ] // we want to color the markers depending on their y value.\nlet sizes = [ 15; 15; 15 ]\n\nlet colorChart3 =\n    Chart.Bubble(x = x, y = y, sizes = sizes, MarkerColor = Color.fromColorScaleValues y)\n    |\u003E Chart.withMarkerStyle (ShowScale = true) // we want to see the color scale we are mapping to\n\n(*** condition: ipynb ***)\n#if IPYNB\ncolorChart3\n#endif // IPYNB\n\n(***hide***)\ncolorChart3 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/geo-map-charts/choropleth-map.html","title":"Choropleth maps","content":"(**\n---\ntitle: Choropleth maps\ncategory: Geo map charts\ncategoryindex: 6\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../data/Deedle.dll\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Choropleth maps\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create choropleth map in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\n// Pure alcohol consumption among adults (age 15\u002B) in 2010\nlet locations, z =\n    [ (\u0022Belarus\u0022, 17.5)\n      (\u0022Moldova\u0022, 16.8)\n      (\u0022Lithuania\u0022, 15.4)\n      (\u0022Russia\u0022, 15.1)\n      (\u0022Romania\u0022, 14.4)\n      (\u0022Ukraine\u0022, 13.9)\n      (\u0022Andorra\u0022, 13.8)\n      (\u0022Hungary\u0022, 13.3)\n      (\u0022Czech Republic\u0022, 13.)\n      (\u0022Slovakia\u0022, 13.)\n      (\u0022Portugal\u0022, 12.9)\n      (\u0022Serbia\u0022, 12.6)\n      (\u0022Grenada\u0022, 12.5)\n      (\u0022Poland\u0022, 12.5)\n      (\u0022Latvia\u0022, 12.3)\n      (\u0022Finland\u0022, 12.3)\n      (\u0022South Korea\u0022, 12.3)\n      (\u0022France\u0022, 12.2)\n      (\u0022Australia\u0022, 12.2)\n      (\u0022Croatia\u0022, 12.2)\n      (\u0022Ireland\u0022, 11.9)\n      (\u0022Luxembourg\u0022, 11.9)\n      (\u0022Germany\u0022, 11.8)\n      (\u0022Slovenia\u0022, 11.6)\n      (\u0022United Kingdom\u0022, 11.6)\n      (\u0022Denmark\u0022, 11.4)\n      (\u0022Bulgaria\u0022, 11.4)\n      (\u0022Spain\u0022, 11.2)\n      (\u0022Belgium\u0022, 11.)\n      (\u0022South Africa\u0022, 11.)\n      (\u0022New Zealand\u0022, 10.9)\n      (\u0022Gabon\u0022, 10.9)\n      (\u0022Namibia\u0022, 10.8)\n      (\u0022Switzerland\u0022, 10.7)\n      (\u0022Saint Lucia\u0022, 10.4)\n      (\u0022Austria\u0022, 10.3)\n      (\u0022Estonia\u0022, 10.3)\n      (\u0022Greece\u0022, 10.3)\n      (\u0022Kazakhstan\u0022, 10.3)\n      (\u0022Canada\u0022, 10.2)\n      (\u0022Nigeria\u0022, 10.1)\n      (\u0022Netherlands\u0022, 9.9)\n      (\u0022Uganda\u0022, 9.8)\n      (\u0022Rwanda\u0022, 9.8)\n      (\u0022Chile\u0022, 9.6)\n      (\u0022Argentina\u0022, 9.3)\n      (\u0022Burundi\u0022, 9.3)\n      (\u0022United States\u0022, 9.2)\n      (\u0022Cyprus\u0022, 9.2)\n      (\u0022Sweden\u0022, 9.2)\n      (\u0022Venezuela\u0022, 8.9)\n      (\u0022Paraguay\u0022, 8.8)\n      (\u0022Brazil\u0022, 8.7)\n      (\u0022Sierra Leone\u0022, 8.7)\n      (\u0022Montenegro\u0022, 8.7)\n      (\u0022Belize\u0022, 8.5)\n      (\u0022Cameroon\u0022, 8.4)\n      (\u0022Botswana\u0022, 8.4)\n      (\u0022Saint Kitts and Nevis\u0022, 8.2)\n      (\u0022Guyana\u0022, 8.1)\n      (\u0022Peru\u0022, 8.1)\n      (\u0022Panama\u0022, 8.)\n      (\u0022Niue\u0022, 8.)\n      (\u0022Palau\u0022, 7.9)\n      (\u0022Norway\u0022, 7.7)\n      (\u0022Tanzania\u0022, 7.7)\n      (\u0022Georgia\u0022, 7.7)\n      (\u0022Uruguay\u0022, 7.6)\n      (\u0022Angola\u0022, 7.5)\n      (\u0022Laos\u0022, 7.3)\n      (\u0022Japan\u0022, 7.2)\n      (\u0022Mexico\u0022, 7.2)\n      (\u0022Ecuador\u0022, 7.2)\n      (\u0022Dominica\u0022, 7.1)\n      (\u0022Iceland\u0022, 7.1)\n      (\u0022Thailand\u0022, 7.1)\n      (\u0022Bosnia and Herzegovina\u0022, 7.1)\n      (\u0022Sao Tome and Principe\u0022, 7.1)\n      (\u0022Malta\u0022, 7.)\n      (\u0022Albania\u0022, 7.)\n      (\u0022Bahamas\u0022, 6.9)\n      (\u0022Dominican Republic\u0022, 6.9)\n      (\u0022Mongolia\u0022, 6.9)\n      (\u0022Cape Verde\u0022, 6.9)\n      (\u0022Barbados\u0022, 6.8)\n      (\u0022Burkina Faso\u0022, 6.8)\n      (\u0022Italy\u0022, 6.7)\n      (\u0022Trinidad and Tobago\u0022, 6.7)\n      (\u0022China\u0022, 6.7)\n      (\u0022Macedonia\u0022, 6.7)\n      (\u0022Saint Vincent and the Grenadines\u0022, 6.6)\n      (\u0022Equatorial Guinea\u0022, 6.6)\n      (\u0022Suriname\u0022, 6.6)\n      (\u0022Vietnam\u0022, 6.6)\n      (\u0022Lesotho\u0022, 6.5)\n      (\u0022Haiti\u0022, 6.4)\n      (\u0022Cook Islands\u0022, 6.4)\n      (\u0022Colombia\u0022, 6.2)\n      (\u0022Ivory Coast\u0022, 6.)\n      (\u0022Bolivia\u0022, 5.9)\n      (\u0022Swaziland\u0022, 5.7)\n      (\u0022Zimbabwe\u0022, 5.7)\n      (\u0022Seychelles\u0022, 5.6)\n      (\u0022Cambodia\u0022, 5.5)\n      (\u0022Puerto Rico\u0022, 5.4)\n      (\u0022Netherlands Antilles\u0022, 5.4)\n      (\u0022Philippines\u0022, 5.4)\n      (\u0022Costa Rica\u0022, 5.4)\n      (\u0022Armenia\u0022, 5.3)\n      (\u0022Cuba\u0022, 5.2)\n      (\u0022Nicaragua\u0022, 5.)\n      (\u0022Jamaica\u0022, 4.9)\n      (\u0022Ghana\u0022, 4.8)\n      (\u0022Liberia\u0022, 4.7)\n      (\u0022Uzbekistan\u0022, 4.6)\n      (\u0022Chad\u0022, 4.4)\n      (\u0022United Arab Emirates\u0022, 4.3)\n      (\u0022Kyrgyzstan\u0022, 4.3)\n      (\u0022India\u0022, 4.3)\n      (\u0022Turkmenistan\u0022, 4.3)\n      (\u0022Kenya\u0022, 4.3)\n      (\u0022Ethiopia\u0022, 4.2)\n      (\u0022Honduras\u0022, 4.)\n      (\u0022Guinea-Bissau\u0022, 4.)\n      (\u0022Zambia\u0022, 4.)\n      (\u0022Republic of the Congo\u0022, 3.9)\n      (\u0022Guatemala\u0022, 3.8)\n      (\u0022Central African Republic\u0022, 3.8)\n      (\u0022North Korea\u0022, 3.7)\n      (\u0022Sri Lanka\u0022, 3.7)\n      (\u0022Mauritius\u0022, 3.6)\n      (\u0022Samoa\u0022, 3.6)\n      (\u0022Democratic Republic of the Congo\u0022, 3.6)\n      (\u0022Nauru\u0022, 3.5)\n      (\u0022Gambia\u0022, 3.4)\n      (\u0022Federated States of Micronesia\u0022, 3.3)\n      (\u0022El Salvador\u0022, 3.2)\n      (\u0022Fiji\u0022, 3.)\n      (\u0022Papua New Guinea\u0022, 3.)\n      (\u0022Kiribati\u0022, 3.)\n      (\u0022Tajikistan\u0022, 2.8)\n      (\u0022Israel\u0022, 2.8)\n      (\u0022Sudan\u0022, 2.7)\n      (\u0022Malawi\u0022, 2.5)\n      (\u0022Lebanon\u0022, 2.4)\n      (\u0022Azerbaijan\u0022, 2.3)\n      (\u0022Mozambique\u0022, 2.3)\n      (\u0022Togo\u0022, 2.3)\n      (\u0022Nepal\u0022, 2.2)\n      (\u0022Brunei\u0022, 2.1)\n      (\u0022Benin\u0022, 2.1)\n      (\u0022Singapore\u0022, 2.)\n      (\u0022Turkey\u0022, 2.)\n      (\u0022Madagascar\u0022, 1.8)\n      (\u0022Solomon Islands\u0022, 1.7)\n      (\u0022Tonga\u0022, 1.6)\n      (\u0022Tunisia\u0022, 1.5)\n      (\u0022Tuvalu\u0022, 1.5)\n      (\u0022Qatar\u0022, 1.5)\n      (\u0022Vanuatu\u0022, 1.4)\n      (\u0022Djibouti\u0022, 1.3)\n      (\u0022Malaysia\u0022, 1.3)\n      (\u0022Syria\u0022, 1.2)\n      (\u0022Maldives\u0022, 1.2)\n      (\u0022Mali\u0022, 1.1)\n      (\u0022Eritrea\u0022, 1.1)\n      (\u0022Algeria\u0022, 1.)\n      (\u0022Iran\u0022, 1.)\n      (\u0022Oman\u0022, 0.9)\n      (\u0022Brunei\u0022, 0.9)\n      (\u0022Morocco\u0022, 0.9)\n      (\u0022Jordan\u0022, 0.7)\n      (\u0022Bhutan\u0022, 0.7)\n      (\u0022Guinea\u0022, 0.7)\n      (\u0022Burma\u0022, 0.7)\n      (\u0022Afghanistan\u0022, 0.7)\n      (\u0022Senegal\u0022, 0.6)\n      (\u0022Indonesia\u0022, 0.6)\n      (\u0022Timor-Leste\u0022, 0.6)\n      (\u0022Iraq\u0022, 0.5)\n      (\u0022Somalia\u0022, 0.5)\n      (\u0022Egypt\u0022, 0.4)\n      (\u0022Niger\u0022, 0.3)\n      (\u0022Yemen\u0022, 0.3)\n      (\u0022Comoros\u0022, 0.2)\n      (\u0022Saudi Arabia\u0022, 0.2)\n      (\u0022Bangladesh\u0022, 0.2)\n      (\u0022Kuwait\u0022, 0.1)\n      (\u0022Libya\u0022, 0.1)\n      (\u0022Mauritania\u0022, 0.1)\n      (\u0022Pakistan\u0022, 0.1) ]\n    |\u003E List.unzip\n\n(**\nChoropleth Maps display divided geographical areas or regions that are coloured, shaded or patterned in relation to \na data variable. This provides a way to visualise values over a geographical area, which can show variation or \npatterns across the displayed location.\n*)\n\nlet choroplethMap1 =\n    Chart.ChoroplethMap(locations = locations, z = z, LocationMode = StyleParam.LocationFormat.CountryNames)\n\n(*** condition: ipynb ***)\n#if IPYNB\nchoroplethMap1\n#endif // IPYNB\n\n(***hide***)\nchoroplethMap1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Map styling\n\nyou can access various map styles via \u0060Chart.withGeoStyle\u0060, such as the projection type, lake/ocean color, and so on.\n*)\n\nopen Plotly.NET.LayoutObjects\n\nlet choroplethMap2 =\n    Chart.ChoroplethMap(locations = locations, z = z, LocationMode = StyleParam.LocationFormat.CountryNames)\n    |\u003E Chart.withGeoStyle (\n        Projection = GeoProjection.init (projectionType = StyleParam.GeoProjectionType.Mollweide),\n        ShowLakes = true,\n        ShowOcean = true,\n        OceanColor = Color.fromString \u0022lightblue\u0022,\n        ShowRivers = true\n    )\n    |\u003E Chart.withColorBarStyle (TitleText = \u0022Alcohol consumption[l/y]\u0022, Len = 0.5)\n\n(*** condition: ipynb ***)\n#if IPYNB\nchoroplethMap2\n#endif // IPYNB\n\n(***hide***)\nchoroplethMap2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Using GeoJSON\n\n[GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) is an open standard format designed for representing simple geographical features, along with their non-spatial attributes.\n\nGeoJSON, or at least the type of GeoJSON accepted by plotly.js are \u0060FeatureCollection\u0060s. A feature has for example the \u0060geometry\u0060 field, which defines e.g. the corrdinates of it (think for example the coordinates of a polygon on the map)\nand the \u0060properties\u0060 field, a key-value pair of properties of the feature. \n\nIf you want to use GeoJSON with Plotly.NET (or any plotly flavor really), you have to know the property of the feature you are mapping your data to. In the following example this is simply the \u0060id\u0060 of a feature, but you can access any property by \u0060property.key\u0060.\n\nConsider the following GeoJSON:\n\n*)\n\n// we are using the awesome FSharp.Data project here to perform a http request\nopen Newtonsoft.Json\nopen System.IO\n\nlet geoJson =\n    (__SOURCE_DIRECTORY__ \u002B \u0022/../data/geojson-counties-fips.json\u0022)\n    |\u003E File.ReadAllText\n    |\u003E JsonConvert.DeserializeObject // the easiest way to use the GeoJSON object is deserializing the JSON string.\n\n(**\nit looks like this:\n\n\u0060\u0060\u0060JSON\n{\n    \u0022type\u0022: \u0022FeatureCollection\u0022, \n    \u0022features\u0022: [{\n        \u0022type\u0022: \u0022Feature\u0022, \n        \u0022properties\u0022: {\n            \u0022GEO_ID\u0022: \u00220500000US01001\u0022, \n            \u0022STATE\u0022: \u002201\u0022, \n            \u0022COUNTY\u0022: \u0022001\u0022, \n            \u0022NAME\u0022: \u0022Autauga\u0022, \n            \u0022LSAD\u0022: \u0022County\u0022, \n            \u0022CENSUSAREA\u0022: 594.436\n        }, \n        \u0022geometry\u0022: {\n            \u0022type\u0022: \u0022Polygon\u0022, \n            \u0022coordinates\u0022: [[[-86.496774, 32.344437], [-86.717897, 32.402814], [-86.814912, 32.340803], [-86.890581, 32.502974], [-86.917595, 32.664169], [-86.71339, 32.661732], [-86.714219, 32.705694], [-86.413116, 32.707386], [-86.411172, 32.409937], [-86.496774, 32.344437]]]\n        },\n        \u0022id\u0022: \u002201001\u0022\n    }, ... MANY more features.\n\u0060\u0060\u0060\n\nIt basically contains all US counties as polygons on the map. Note that the \u0060id\u0060 property corresponds to the [**fips code**](https://en.wikipedia.org/wiki/FIPS_county_code).\n\nTo visualize some data using these counties as locations on a choropleth map, we need some exmaple data:\n*)\n\n// we use the awesome Deedle data frame library to parse and extract our location and z data\n\nopen Deedle\n\nlet data =\n    __SOURCE_DIRECTORY__ \u002B \u0022/../data/fips-unemp-16.csv\u0022\n    |\u003E fun csv -\u003E Frame.ReadCsv(csv, true, separators = \u0022,\u0022, schema = \u0022fips=string,unemp=float\u0022)\n\n(**\nThe data looks like this:\n*)\n\n\ndata.Print()\n\n(*** include-output ***)\n\n(**\nAs the data contains the fips code and associated unemployment data, we can use the fips codes as locations and the unemployment as z data:\n*)\n\nlet locationsGeoJSON: string[] =\n    data |\u003E Frame.getCol \u0022fips\u0022 |\u003E Series.values |\u003E Array.ofSeq\n\nlet zGeoJSON: int[] = data |\u003E Frame.getCol \u0022unemp\u0022 |\u003E Series.values |\u003E Array.ofSeq\n\n\n(**\nAnd finally put together the chart using GeoJSON:\n*)\n\nlet choroplethGeoJSON =\n    Chart.ChoroplethMap(\n        locations = locationsGeoJSON,\n        z = zGeoJSON,\n        LocationMode = StyleParam.LocationFormat.GeoJson_Id,\n        GeoJson = geoJson,\n        FeatureIdKey = \u0022id\u0022\n    )\n    |\u003E Chart.withGeo (\n        Geo.init (\n            Scope = StyleParam.GeoScope.NorthAmerica,\n            Projection = GeoProjection.init (StyleParam.GeoProjectionType.AzimuthalEqualArea),\n            ShowLand = true,\n            LandColor = Color.fromString \u0022lightgrey\u0022\n        )\n    )\n    |\u003E Chart.withSize (800., 800.)\n\n(*** condition: ipynb ***)\n#if IPYNB\nchoroplethGeoJSON\n#endif // IPYNB\n\n(***hide***)\nchoroplethGeoJSON |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/geo-map-charts/geo-plots.html","title":"Scatter and line plots on Geo maps","content":"(**\n---\ntitle: Scatter and line plots on Geo maps\ncategory: Geo map charts\ncategoryindex: 6\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022nuget: Deedle\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Scatter and line plots on Geo maps\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create Point and Line charts on geo maps in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\nopen Plotly.NET\n\nlet cityNames =\n    [ \u0022Montreal\u0022\n      \u0022Toronto\u0022\n      \u0022Vancouver\u0022\n      \u0022Calgary\u0022\n      \u0022Edmonton\u0022\n      \u0022Ottawa\u0022\n      \u0022Halifax\u0022\n      \u0022Victoria\u0022\n      \u0022Winnepeg\u0022\n      \u0022Regina\u0022 ]\n\nlet lon =\n    [ -73.57\n      -79.24\n      -123.06\n      -114.1\n      -113.28\n      -75.43\n      -63.57\n      -123.21\n      -97.13\n      -104.6 ]\n\nlet lat = [ 45.5; 43.4; 49.13; 51.1; 53.34; 45.24; 44.64; 48.25; 49.89; 50.45 ]\n\n(**\nThe simplest type of geo plot is plotting the (lon,lat) pairs of a location via \u0060Chart.PointGeo\u0060. \nHere is an example using the location of Canadian cities:\n*)\n\nopen Plotly.NET.LayoutObjects\n\nlet pointGeo =\n    Chart.PointGeo(\n        longitudes = lon,\n        latitudes = lat,\n        MultiText = cityNames,\n        TextPosition = StyleParam.TextPosition.TopCenter\n    )\n    |\u003E Chart.withGeoStyle (\n        Scope = StyleParam.GeoScope.NorthAmerica,\n        Projection = GeoProjection.init (StyleParam.GeoProjectionType.AzimuthalEqualArea),\n        CountryColor = Color.fromString \u0022lightgrey\u0022\n    )\n    |\u003E Chart.withMarginSize (0, 0, 0, 0)\n\n(*** condition: ipynb ***)\n#if IPYNB\npointGeo\n#endif // IPYNB\n\n(***hide***)\npointGeo |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n(**\nTo connect the given (lon,lat) pairs via straight lines, use \u0060Chart.LineGeo\u0060. \nBelow is an example that pulls external data as a Deedle data \nframe containing the source and target locations of American Airlines flights from Feb. 2011:\n*)\n\nopen Deedle\nopen System.IO\nopen System.Text\n\nlet data =\n    __SOURCE_DIRECTORY__ \u002B \u0022/../data/2011_february_aa_flight_paths.csv\u0022\n    |\u003E fun csv -\u003E Frame.ReadCsv(csv, true, separators = \u0022,\u0022)\n\nlet opacityVals: float[] =\n    data.[\u0022cnt\u0022]\n    |\u003E Series.values\n    |\u003E fun s -\u003E s |\u003E Seq.map (fun v -\u003E v / (Seq.max s)) |\u003E Array.ofSeq\n\nlet startCoords = Series.zipInner data.[\u0022start_lon\u0022] data.[\u0022start_lat\u0022]\nlet endCoords = Series.zipInner data.[\u0022end_lon\u0022] data.[\u0022end_lat\u0022]\nlet coords = Series.zipInner startCoords endCoords |\u003E Series.values\n\nlet flights =\n    coords\n    |\u003E Seq.mapi (fun i (startCoords, endCoords) -\u003E\n        Chart.LineGeo(\n            lonlat = [ startCoords; endCoords ],\n            Opacity = opacityVals.[i],\n            MarkerColor = Color.fromString \u0022red\u0022\n        ))\n    |\u003E Chart.combine\n    |\u003E Chart.withLegend (false)\n    |\u003E Chart.withGeoStyle (\n        Scope = StyleParam.GeoScope.NorthAmerica,\n        Projection = GeoProjection.init (StyleParam.GeoProjectionType.AzimuthalEqualArea),\n        ShowLand = true,\n        LandColor = Color.fromString \u0022lightgrey\u0022\n    )\n    |\u003E Chart.withMarginSize (0, 0, 50, 0)\n    |\u003E Chart.withTitle \u0022Feb. 2011 American Airline flights\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\nflights\n#endif // IPYNB\n\n(***hide***)\nflights |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/geo-map-charts/geo-vs-mapbox.html","title":"Geo vs. Mapbox","content":"(**\n---\ntitle: Geo vs. Mapbox\ncategory: Geo map charts\ncategoryindex: 6\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Mapbox Maps vs Geo Maps\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This introduction shows the differences between Geo and Mapbox based geographical charts.\n\nPlotly and therefore Plotly.NET supports two different kinds of maps:\n\n- **Mapbox maps** are tile-based maps. If your figure is created with a \u0060Chart.*Mapbox\u0060 function or otherwise contains one or more traces of type \u0060scattermapbox\u0060, \n    \u0060choroplethmapbox\u0060 or \u0060densitymapbox\u0060, the layout.mapbox object in your figure contains configuration information for the map itself.\n    \n- **Geo maps** are outline-based maps. If your figure is created with a \u0060Chart.ScatterGeo, \u0060Chart.PointGeo\u0060, \u0060Chart.LineGeo\u0060 or \u0060Chart.Choropleth\u0060 function or \n    otherwise contains one or more traces of type \u0060scattergeo\u0060 or \u0060choropleth\u0060, the layout.geo object in your figure contains configuration information for the map itself.\n    \n_This page documents Geo outline-based maps, and the [Mapbox Layers documentation]({{root}}mapbox-map-charts/geo-vs-mapbox.html) describes how to configure Mapbox tile-based maps._\n\n## Physical Base Maps\n\nPlotly Geo maps have a built-in base map layer composed of \u0022physical\u0022 and \u0022cultural\u0022 (i.e. administrative border) data from the Natural Earth Dataset. \nVarious lines and area fills can be shown or hidden, and their color and line-widths specified. \nIn the default plotly template, a map frame and physical features such as a coastal outline and filled land areas are shown, at a small-scale 1:110m resolution:\n\n*)\n\nopen Plotly.NET\n\nlet baseMapOnly =\n    Chart.PointGeo(locations = []) // deliberately empty chart to show the base map only\n    |\u003E Chart.withMarginSize (0, 0, 0, 0)\n\n(*** condition: ipynb ***)\n#if IPYNB\nbaseLayerOnly\n#endif // IPYNB\n\n(***hide***)\nbaseMapOnly |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nTo control the features of the map, a \u0060Geo\u0060 object is used that can be associtaed with a given chart using the \u0060Chart.WithGeo\u0060 function.\nHere is a map with all physical features enabled and styled, at a larger-scale 1:50m resolution:\n*)\nopen Plotly.NET.LayoutObjects\n\nlet myGeo =\n    Geo.init (\n        Resolution = StyleParam.GeoResolution.R50,\n        ShowCoastLines = true,\n        CoastLineColor = Color.fromString \u0022RebeccaPurple\u0022,\n        ShowLand = true,\n        LandColor = Color.fromString \u0022LightGreen\u0022,\n        ShowOcean = true,\n        OceanColor = Color.fromString \u0022LightBlue\u0022,\n        ShowLakes = true,\n        LakeColor = Color.fromString \u0022Blue\u0022,\n        ShowRivers = true,\n        RiverColor = Color.fromString \u0022Blue\u0022\n    )\n\nlet moreFeaturesBaseMap =\n    Chart.PointGeo(locations = [])\n    |\u003E Chart.withGeo myGeo\n    |\u003E Chart.withMarginSize (0, 0, 0, 0)\n\n(*** condition: ipynb ***)\n#if IPYNB\nmoreFeaturesBaseMap\n#endif // IPYNB\n\n(***hide***)\nmoreFeaturesBaseMap |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Cultural Base Maps\n\nIn addition to physical base map features, a \u0022cultural\u0022 base map is included which is composed of country borders and selected sub-country borders such as states.\n\n_Note and disclaimer: cultural features are by definition subject to change, debate and dispute. Plotly includes data from Natural Earth \u0022as-is\u0022 and defers to the Natural Earth policy regarding disputed borders which read:_\n\n\u003E Natural Earth Vector draws boundaries of countries according to defacto status. We show who actually controls the situation on the ground.\n\nHere is a map with only cultural features enabled and styled, at a 1:50m resolution, which includes only country boundaries. See below for country sub-unit cultural base map features:\n*)\n\nlet countryGeo =\n    Geo.init (\n        Visible = false,\n        Resolution = StyleParam.GeoResolution.R50,\n        ShowCountries = true,\n        CountryColor = Color.fromString \u0022RebeccaPurple\u0022\n    )\n\n\nlet countryBaseMap =\n    Chart.PointGeo(locations = [])\n    |\u003E Chart.withGeo countryGeo\n    |\u003E Chart.withMarginSize (0, 0, 0, 0)\n\n(*** condition: ipynb ***)\n#if IPYNB\ncountryBaseMap\n#endif // IPYNB\n\n(***hide***)\ncountryBaseMap |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/mapbox-map-charts/choropleth-mapbox.html","title":"ChoroplethMapbox","content":"(**\n---\ntitle: ChoroplethMapbox\ncategory: Mapbox map charts\ncategoryindex: 7\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../data/Deedle.dll\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# ChoroplethMapbox\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create choropleth maps using Mapbox layers in F#.\n\nChoropleth Maps display divided geographical areas or regions that are coloured, shaded or patterned in relation to \na data variable. This provides a way to visualise values over a geographical area, which can show variation or \npatterns across the displayed location.\n\nThis choropleth map version uses [Mapbox Layers]({{root}}/6_0_geo-vs-mapbox.html). For the Geo variant, head over [here]({{root}}/5_2_choropleth-map.html)\n\nChoroplethMapbox charts need GeoJSON formatted data.\n\n[GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) is an open standard format designed for representing simple geographical features, along with their non-spatial attributes.\n\nGeoJSON, or at least the type of GeoJSON accepted by plotly.js are \u0060FeatureCollection\u0060s. A feature has for example the \u0060geometry\u0060 field, which defines e.g. the corrdinates of it (think for example the coordinates of a polygon on the map)\nand the \u0060properties\u0060 field, a key-value pair of properties of the feature. \n\nIf you want to use GeoJSON with Plotly.NET (or any plotly flavor really), you have to know the property of the feature you are mapping your data to. In the following example this is simply the \u0060id\u0060 of a feature, but you can access any property by \u0060property.key\u0060.\n\nConsider the following GeoJSON:\n*)\n \n// we are using the awesome FSharp.Data project here to perform a http request\n\nopen Newtonsoft.Json\nopen System.IO\n\nlet geoJson =\n    (__SOURCE_DIRECTORY__ \u002B \u0022/../data/geojson-counties-fips.json\u0022)\n    |\u003E File.ReadAllText\n    |\u003E JsonConvert.DeserializeObject // the easiest way to use the GeoJSON object is deserializing the JSON string.\n\n(**\nit looks like this:\n\n\u0060\u0060\u0060JSON\n{\n    \u0022type\u0022: \u0022FeatureCollection\u0022, \n    \u0022features\u0022: [{\n        \u0022type\u0022: \u0022Feature\u0022, \n        \u0022properties\u0022: {\n            \u0022GEO_ID\u0022: \u00220500000US01001\u0022, \n            \u0022STATE\u0022: \u002201\u0022, \n            \u0022COUNTY\u0022: \u0022001\u0022, \n            \u0022NAME\u0022: \u0022Autauga\u0022, \n            \u0022LSAD\u0022: \u0022County\u0022, \n            \u0022CENSUSAREA\u0022: 594.436\n        }, \n        \u0022geometry\u0022: {\n            \u0022type\u0022: \u0022Polygon\u0022, \n            \u0022coordinates\u0022: [[[-86.496774, 32.344437], [-86.717897, 32.402814], [-86.814912, 32.340803], [-86.890581, 32.502974], [-86.917595, 32.664169], [-86.71339, 32.661732], [-86.714219, 32.705694], [-86.413116, 32.707386], [-86.411172, 32.409937], [-86.496774, 32.344437]]]\n        },\n        \u0022id\u0022: \u002201001\u0022\n    }, ... MANY more features.\n\u0060\u0060\u0060\n\nIt basically contains all US counties as polygons on the map. Note that the \u0060id\u0060 property corresponds to the [**fips code**](https://en.wikipedia.org/wiki/FIPS_county_code).\n\nTo visualize some data using these counties as locations on a choropleth map, we need some exmaple data:\n*)\n\n// we use the awesome Deedle data frame library to parse and extract our location and z data\nopen Deedle\n\nlet data =\n    __SOURCE_DIRECTORY__ \u002B \u0022/../data/fips-unemp-16.csv\u0022\n    |\u003E fun csv -\u003E Frame.ReadCsv(csv, true, separators = \u0022,\u0022, schema = \u0022fips=string,unemp=float\u0022)\n\n(**\nThe data looks like this:\n*)\n\ndata.Print()\n\n(*** include-output ***)\n\n(**\nAs the data contains the fips code and associated unemployment data, we can use the fips codes as locations and the unemployment as z data:\n*)\n\nlet locations: string[] =\n    data |\u003E Frame.getCol \u0022fips\u0022 |\u003E Series.values |\u003E Array.ofSeq\n\nlet z: int[] = data |\u003E Frame.getCol \u0022unemp\u0022 |\u003E Series.values |\u003E Array.ofSeq\n\n\n(**\nAnd finally put together the chart using GeoJSON:\n*)\n\nopen Plotly.NET\nopen Plotly.NET.LayoutObjects\n\nlet choroplethMapbox =\n    Chart.ChoroplethMapbox(locations = locations, z = z, geoJson = geoJson, FeatureIdKey = \u0022id\u0022)\n    |\u003E Chart.withMapbox (\n        Mapbox.init (\n            Style = StyleParam.MapboxStyle.OpenStreetMap, // Use the free open street map base map layer\n            Center = (-104.6, 50.45)\n        )\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nchoroplethMapbox\n#endif // IPYNB\n\n(***hide***)\nchoroplethMapbox |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/mapbox-map-charts/density-mapbox.html","title":"DensityMapbox charts","content":"(**\n---\ntitle: DensityMapbox charts\ncategory: Mapbox map charts\ncategoryindex: 7\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../data/Deedle.dll\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# DensityMapbox charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create DensityMapbox charts in F#.\n\n\u0060Chart.DensityMapbox\u0060 draws a bivariate kernel density estimation with a Gaussian kernel from \u0060lon\u0060 and \u0060lat\u0060 coordinates and optional \u0060z\u0060 values using a colorscale.\nThis Chart uses [Mapbox layers]({{root}}/6_0_geo-vs-mapbox.html) and might need a Mapbox API token depending on the desired base map layer style.\n\n*)\n// we are using the awesome FSharp.Data project here to perform a http request,\n// and the awesome Deedle library to read the data as a data frame\nopen Deedle\n \nlet dataDensityMapbox =\n    __SOURCE_DIRECTORY__ \u002B \u0022/../data/earthquakes-23k.csv\u0022\n    |\u003E fun d -\u003E Frame.ReadCsv(d, true, separators = \u0022,\u0022)\n\nlet lon = dataDensityMapbox.[\u0022Longitude\u0022] |\u003E Series.values\nlet lat = dataDensityMapbox.[\u0022Latitude\u0022] |\u003E Series.values\nlet magnitudes = dataDensityMapbox.[\u0022Magnitude\u0022] |\u003E Series.values\n\nopen Plotly.NET\nopen Plotly.NET.LayoutObjects\n\nlet densityMapbox =\n    Chart.DensityMapbox(\n        longitudes = lon,\n        latitudes = lat,\n        Z = magnitudes,\n        Radius = 8,\n        ColorScale = StyleParam.Colorscale.Viridis\n    )\n    |\u003E Chart.withMapbox (Mapbox.init (Style = StyleParam.MapboxStyle.StamenTerrain, Center = (60., 30.)))\n\n(*** condition: ipynb ***)\n#if IPYNB\ndensityMapbox\n#endif // IPYNB\n\n(***hide***)\ndensityMapbox |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/mapbox-map-charts/geo-vs-mapbox.html","title":"Geo vs. Mapbox","content":"(**\n---\ntitle: Geo vs. Mapbox\ncategory: Mapbox map charts\ncategoryindex: 7\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Mapbox Maps vs Geo Maps\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This introduction shows the differences between Geo and Mapbox based geographical charts.\n\nPlotly and therefore Plotly.NET supports two different kinds of maps:\n\n- **Mapbox maps** are tile-based maps. If your figure is created with a \u0060Chart.*Mapbox\u0060 function or otherwise contains one or more traces of type \u0060scattermapbox\u0060, \n    \u0060choroplethmapbox\u0060 or \u0060densitymapbox\u0060, the layout.mapbox object in your figure contains configuration information for the map itself.\n    \n- **Geo maps** are outline-based maps. If your figure is created with a \u0060Chart.ScatterGeo, \u0060Chart.PointGeo\u0060, \u0060Chart.LineGeo\u0060 or \u0060Chart.Choropleth\u0060 function or \n    otherwise contains one or more traces of type \u0060scattergeo\u0060 or \u0060choropleth\u0060, the layout.geo object in your figure contains configuration information for the map itself.\n    \n_This page documents Mapbox tile-based maps, and the [Geo map documentation]({{root}}geo-map-charts/geo-vs-mapbox.html) describes how to configure outline-based maps_\n\n## How Layers Work in Mapbox Tile Maps\n\nMapbox tile maps are composed of various layers, of three different types:\n\n- the \u0060style\u0060 property of the \u0060Mapbox\u0060 object defines is the lowest layers, also known as your \u0022base map\u0022\n- The various traces in data are by default rendered above the base map (although this can be controlled via the below attribute).\n- the \u0060layers\u0060 property of the \u0060Mapbox\u0060 object is an array that defines more layers that are by default rendered above the traces in data (although this can also be controlled via the below attribute).\n    \na \u0060Mapbox\u0060 object where these properties can be set can be initialized via \u0060Mapbox.init\u0060. To use it in a chart, use the \u0060Chart.withMapbox\u0060 function:\n*)\nopen Plotly.NET\nopen Plotly.NET.LayoutObjects\n\n// a simple Mapbox with a OpenStreetMap base layer.\nlet mb = Mapbox.init (Style = StyleParam.MapboxStyle.OpenStreetMap)\n\nlet baseLayerOnly =\n    Chart.PointMapbox(lonlat = []) // deliberately empty chart to show the base map only\n    |\u003E Chart.withMapbox mb // add the mapBox\n\n(*** condition: ipynb ***)\n#if IPYNB\nbaseLayerOnly\n#endif // IPYNB\n\n(***hide***)\nbaseLayerOnly |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n\n## Mapbox Access Tokens and When You Need Them\n\nThe word \u0022mapbox\u0022 in the trace names and layout.mapbox refers to the Mapbox GL JS open-source library, which is integrated into Plotly.NET. \n\nIf your basemap uses data from the Mapbox service, then you will need to register for a free account at https://mapbox.com/ \nand obtain a Mapbox Access token. \n\nThis token should be provided via the \u0060AccessToken\u0060 property:\n*)\n\nlet mbWithToken =\n    Mapbox.init (Style = StyleParam.MapboxStyle.OpenStreetMap, AccessToken = \u0022your_token_here\u0022)\n\n(**\n\nIf your base map does not use data from the Mapbox service, you do not need to register for a Mapbox account.\n\n## Base Maps\n\n- \u0060WhiteBG\u0060 yields an empty white canvas which results in no external HTTP requests\n- The plotly presets yield maps composed of raster tiles from various public tile servers which do not require signups or access tokens\n- The Mapbox presets yield maps composed of vector tiles from the Mapbox service, and do require a Mapbox Access Token or an on-premise Mapbox installation.\n- Use \u0060StyleParam.MapboxStyle.Custom\u0060 for:\n    - Mapbox service style URL, which requires a Mapbox Access Token or an on-premise Mapbox installation.\n    - A Mapbox Style object as defined at https://docs.mapbox.com/mapbox-gl-js/style-spec/\n\n\nThe accepted values for the \u0060style\u0060 property of the \u0060Mapbox\u0060 object are represented in \u0060StyleParam.MapboxStyle\u0060:\n\n\u0060\u0060\u0060\ntype MapboxStyle =\n    // plotly presets, no token needed\n    | WhiteBG\n    | OpenStreetMap\n    | CartoPositron\n    | CartoDarkmatter\n    | StamenTerrain\n    | StamenToner\n    | StamenWatercolor\n\n    // Mapbox presets, you might need a free token\n    | MapboxBasic\n    | MapboxStreets\n    | MapboxOutdoors\n    | MapboxLight\n    | MapboxDark\n    | MapboxSatellite\n    | MapboxSatelliteStreets\n\n    //Custom - provide custom maps\n    | Custom of string\n\u0060\u0060\u0060\n*)"},{"uri":"https://plotly.net/mapbox-map-charts/mapbox-plots.html","title":"Scatter and line plots on Mapbox maps","content":"(**\n---\ntitle: Scatter and line plots on Mapbox maps\ncategory: Mapbox map charts\ncategoryindex: 7\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../data/Deedle.dll\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Scatter and line plots on Mapbox maps\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create Point and Line charts on Mapbox maps in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\nopen Plotly.NET\n\nlet cityNames =\n    [ \u0022Montreal\u0022\n      \u0022Toronto\u0022\n      \u0022Vancouver\u0022\n      \u0022Calgary\u0022\n      \u0022Edmonton\u0022\n      \u0022Ottawa\u0022\n      \u0022Halifax\u0022\n      \u0022Victoria\u0022\n      \u0022Winnepeg\u0022\n      \u0022Regina\u0022 ]\n\nlet lon =\n    [ -73.57\n      -79.24\n      -123.06\n      -114.1\n      -113.28\n      -75.43\n      -63.57\n      -123.21\n      -97.13\n      -104.6 ]\n\nlet lat = [ 45.5; 43.4; 49.13; 51.1; 53.34; 45.24; 44.64; 48.25; 49.89; 50.45 ]\n\n(**\nThe simplest type of geographic plot using Mapbox is plotting the (lon,lat) pairs of a location via \u0060Chart.PointMapbox\u0060. \nHere is an example using the location of Canadian cities:\n*)\nopen Plotly.NET.LayoutObjects\n\nlet pointMapbox =\n    Chart.PointMapbox(\n        longitudes = lon,\n        latitudes = lat,\n        MultiText = cityNames,\n        TextPosition = StyleParam.TextPosition.TopCenter\n    )\n    |\u003E Chart.withMapbox (Mapbox.init (Style = StyleParam.MapboxStyle.OpenStreetMap, Center = (-104.6, 50.45)))\n\n(*** condition: ipynb ***)\n#if IPYNB\npointMapbox\n#endif // IPYNB\n\n(***hide***)\npointMapbox |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nTo connect the given (lon,lat) pairs via straight lines, use \u0060Chart.LineGeo\u0060. \nBelow is an example that pulls external data as a Deedle data \nframe containing the source and target locations of American Airlines flights from Feb. 2011:\n*)\n\nopen Deedle\nopen System.IO\nopen System.Text\n\nlet data =\n    __SOURCE_DIRECTORY__ \u002B \u0022/../data/2011_february_aa_flight_paths.csv\u0022\n    |\u003E fun csv -\u003E Frame.ReadCsv(csv, true, separators = \u0022,\u0022)\n\nlet opacityVals: float[] =\n    data.[\u0022cnt\u0022]\n    |\u003E Series.values\n    |\u003E fun s -\u003E s |\u003E Seq.map (fun v -\u003E v / (Seq.max s)) |\u003E Array.ofSeq\n\nlet startCoords = Series.zipInner data.[\u0022start_lon\u0022] data.[\u0022start_lat\u0022]\nlet endCoords = Series.zipInner data.[\u0022end_lon\u0022] data.[\u0022end_lat\u0022]\nlet coords = Series.zipInner startCoords endCoords |\u003E Series.values\n\nlet flights =\n    coords\n    |\u003E Seq.mapi (fun i (startCoords, endCoords) -\u003E\n        Chart.LineMapbox(\n            lonlat = [ startCoords; endCoords ],\n            Opacity = opacityVals.[i],\n            LineColor = Color.fromString \u0022red\u0022\n        ))\n    |\u003E Chart.combine\n    |\u003E Chart.withLegend (false)\n    |\u003E Chart.withMapbox (Mapbox.init (Style = StyleParam.MapboxStyle.OpenStreetMap, Center = (-97.0372, 32.8959)))\n    |\u003E Chart.withMarginSize (0, 0, 50, 0)\n    |\u003E Chart.withTitle \u0022Feb. 2011 American Airline flights\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\nflights\n#endif // IPYNB\n\n(***hide***)\nflights |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/polar-charts/polar_bar_charts.html","title":"Polar bar charts","content":"(**\n---\ntitle: Polar bar charts\ncategory: Polar Charts\ncategoryindex: 9 \nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Polar bar charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create polar bar charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\nlet r = [ 77.5; 72.5; 70.0; 45.0; 22.5; 42.5; 40.0; 62.5 ]\nlet r2 = [ 57.5; 50.0; 45.0; 35.0; 20.0; 22.5; 37.5; 55.0 ]\nlet r3 = [ 40.0; 30.0; 30.0; 35.0; 7.5; 7.5; 32.5; 40.0 ]\nlet r4 = [ 20.0; 7.5; 15.0; 22.5; 2.5; 2.5; 12.5; 22.5 ]\n\nlet t = [ \u0022North\u0022; \u0022N-E\u0022; \u0022East\u0022; \u0022S-E\u0022; \u0022South\u0022; \u0022S-W\u0022; \u0022West\u0022; \u0022N-W\u0022 ]\n\n(**\nPolar bar charts plot data on a radial axis and a categorical angular axis. \n\nA common use case is the **windrose chart**.\n\nA wind rose is a graphic tool used by meteorologists to give a succinct view \nof how wind speed and direction are typically distributed at a particular location.\n*)\nopen Plotly.NET.LayoutObjects\n\nlet windrose1 =\n\n    [ Chart.BarPolar(r = r, theta = t, Name = \u002211-14 m/s\u0022, MarkerPatternShape = StyleParam.PatternShape.Checked)\n      Chart.BarPolar(r = r2, theta = t, Name = \u00228-11 m/s\u0022, MarkerPatternShape = StyleParam.PatternShape.DiagonalChecked)\n      Chart.BarPolar(r = r3, theta = t, Name = \u00225-8 m/s\u0022, MarkerPatternShape = StyleParam.PatternShape.VerticalLines)\n      Chart.BarPolar(r = r4, theta = t, Name = \u0022\u003C 5 m/s\u0022, MarkerPatternShape = StyleParam.PatternShape.HorizontalLines) ]\n    |\u003E Chart.combine\n    |\u003E Chart.withAngularAxis (\n        AngularAxis.init (\n            CategoryOrder = StyleParam.CategoryOrder.Array,\n            CategoryArray = ([ \u0022East\u0022; \u0022N-E\u0022; \u0022North\u0022; \u0022N-W\u0022; \u0022West\u0022; \u0022S-W\u0022; \u0022South\u0022; \u0022S-E\u0022 ]) // set the order of the categorical axis\n        )\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nwindrose1\n#endif // IPYNB\n\n(***hide***)\nwindrose1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/polar-charts/polar_line-scatter-plots.html","title":"Polar line and scatter plots","content":"(**\n---\ntitle: Polar line and scatter plots\ncategory: Polar Charts\ncategoryindex: 8\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Polar charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create polar charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\n// radial coordinates\nlet radial = [ 1; 2; 3; 4; 5; 6; 7 ]\n\n// angular coordinates\nlet theta = [ 0; 45; 90; 135; 200; 320; 184 ]\n\n(**\nA polar chart is a graphical method of displaying multivariate data in the form of a two-dimensional chart \nof three or more quantitative variables represented on axes starting from the same point.\n\nThe relative position and angle of the axes is typically uninformative.\n\nIn Polar Charts, a series is represented by a closed curve that connects points in the polar coordinate system. \nEach data point is determined by the distance from the pole (the radial coordinate) and the angle from the fixed direction (the angular coordinate).\n\n## Polar point charts\n\nuse \u0060Chart.PointPolar\u0060 to create a polar plot that displays points on a polar coordinate system:\n*)\n\nlet pointPolar = Chart.PointPolar(r = radial, theta = theta)\n(*** condition: ipynb ***)\n#if IPYNB\npointPolar\n#endif // IPYNB\n\n(***hide***)\npointPolar |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Polar line charts\n\nuse \u0060Chart.LinePolar\u0060 to create a polar plot that displays a line connecting input the data on a polar coordinate system.\n\nYou can for example change the line style using \u0060Chart.withLineStyle\u0060\n*)\n\nlet linePolar =\n    Chart.LinePolar(r = radial, theta = theta)\n    |\u003E Chart.withLineStyle (Color = Color.fromString \u0022purple\u0022, Dash = StyleParam.DrawingStyle.DashDot)\n\n(*** condition: ipynb ***)\n#if IPYNB\nlinePolar\n#endif // IPYNB\n\n(***hide***)\nlinePolar |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Polar Spline charts\n\nuse \u0060Chart.SpinePolar\u0060 to create a polar plot that displays a smoothed line connecting input the data on a polar coordinate system.\n\nAs for all other plots above, You can for example add labels to each datum:\n*)\n\nlet splinePolar =\n    Chart.SplinePolar(\n        r = radial,\n        theta = theta,\n        MultiText = [ \u0022one\u0022; \u0022two\u0022; \u0022three\u0022; \u0022four\u0022; \u0022five\u0022; \u0022six\u0022; \u0022seven\u0022 ],\n        TextPosition = StyleParam.TextPosition.TopCenter,\n        ShowMarkers = true\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nsplinePolar\n#endif // IPYNB\n\n(***hide***)\nsplinePolar |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/polar-charts/styling_polar_layouts.html","title":"Styling polar layouts","content":"(**\n---\ntitle: Styling polar layouts\ncategory: Polar Charts\ncategoryindex: 9 \nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n# Styling polar layouts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to style polar layouts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\nopen Plotly.NET\n\nlet r = [ 1; 2; 3; 4; 5; 6; 7 ] |\u003E List.map ((*) 10000)\nlet r2 = [ 5; 6; 7; 1; 2; 3; 4 ] |\u003E List.map ((*) 10000)\nlet r3 = [ 3; 1; 5; 2; 8; 7; 5 ] |\u003E List.map ((*) 10000)\n\nlet t = [ 0; 45; 90; 135; 200; 320; 184 ]\n\n(**\nConsider this combined polar chart:\n*)\n\nlet combinedPolar =\n    [ Chart.PointPolar(r = r, theta = t, Name = \u0022PointPolar\u0022)\n      Chart.LinePolar(r = r2, theta = t, Name = \u0022LinePolar\u0022, ShowMarkers = true)\n      Chart.SplinePolar(r = r3, theta = t, Name = \u0022SplinePolar\u0022, ShowMarkers = true) ]\n\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\ncombinedPolar\n#endif // IPYNB\n\n(***hide***)\ncombinedPolar |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Styling the polar layout\n\nUse the \u0060Chart.withPolar\u0060 function and initialize a Polar layout with the desired looks\n*)\nopen Plotly.NET.LayoutObjects\n\nlet styledPolar =\n    combinedPolar |\u003E Chart.withPolar (Polar.init (Sector = (0., 270.), Hole = 0.1))\n\n\n(*** condition: ipynb ***)\n#if IPYNB\nstyledPolar\n#endif // IPYNB\n\n(***hide***)\nstyledPolar |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Styling radial and angular axes\n\nYou could pass these axes to \u0060Chart.withPolar\u0060, but for the case where you want to specifically set the angular or radial axis, there are the \u0060Chart.withAngularAxis\u0060 and \u0060Chart.withRadialAxis\u0060 functions:\n*)\n\nlet styledPolar2 =\n    styledPolar\n    |\u003E Chart.withAngularAxis (AngularAxis.init (Color = Color.fromString \u0022darkblue\u0022))\n    |\u003E Chart.withRadialAxis (\n        RadialAxis.init (\n            Title = Title.init (\u0022Hi, i am the radial axis\u0022),\n            Color = Color.fromString \u0022darkblue\u0022,\n            SeparateThousands = true\n        )\n    )\n\n\n(*** condition: ipynb ***)\n#if IPYNB\nstyledPolar2\n#endif // IPYNB\n\n(***hide***)\nstyledPolar2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/simple-charts/area-plots.html","title":"Area charts","content":"(**\n---\ntitle: Area charts\ncategory: Simple Charts\ncategoryindex: 3\nindex: 3\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Area charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create area charts, area charts with splines, and stackes area charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\nlet x = [ 1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10. ]\nlet y = [ 5.; 2.5; 5.; 7.5; 5.; 2.5; 7.5; 4.5; 5.5; 5. ]\n\n(**\nAn area chart or area graph displays graphically quantitive data. It is based on the line chart.\nThe area between axis and line are commonly emphasized with colors, textures and hatchings.\n\n### Simple area chart\n*)\n\nlet area1 = Chart.Area(x = x, y = y)\n\n(*** condition: ipynb ***)\n#if IPYNB\narea1\n#endif // IPYNB\n\n(***hide***)\narea1 |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n(**\n### Area chart with a spline\n*)\n\nlet area2 = Chart.SplineArea(x = x, y = y)\n\n(*** condition: ipynb ***)\n#if IPYNB\narea2\n#endif // IPYNB\n\n(***hide***)\narea2 |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)\n\n(**\n### Stacked Area chart\n*)\n\nlet stackedArea =\n    [ Chart.StackedArea(x = x, y = y)\n      Chart.StackedArea(x = x, y = (y |\u003E Seq.rev)) ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nstackedArea\n#endif // IPYNB\n\n(***hide***)\nstackedArea |\u003E GenericChart.toChartHTML\n(*** include-it-raw ***)"},{"uri":"https://plotly.net/simple-charts/bar-and-column-charts.html","title":"Bar and column charts","content":"(**\n---\ntitle: Bar and column charts\ncategory: Simple Charts\ncategoryindex: 3\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Bar and column charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create bar and a column charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET\n\nlet values = [ 20; 14; 23 ]\nlet keys = [ \u0022Product A\u0022; \u0022Product B\u0022; \u0022Product C\u0022 ]\n\n(**\nA bar chart or bar graph is a chart that presents grouped data with rectangular bars with \nlengths proportional to the values that they represent. The bars can be plotted vertically\nor horizontally. A vertical bar chart is called a column bar chart.\n\n### Column Charts\n*)\n\nlet column = Chart.Column(values = values, Keys = keys)\n\n(*** condition: ipynb ***)\n#if IPYNB\ncolumn\n#endif // IPYNB\n\n(***hide***)\ncolumn |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n### Bar Charts\n*)\n\nlet bar = Chart.Bar(values = values, Keys = keys)\n\n(*** condition: ipynb ***)\n#if IPYNB\nbar\n#endif // IPYNB\n\n(***hide***)\nbar |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \n\n## Stacked bar chart or column charts\n\nThe following example shows how to create a stacked bar chart by combining bar charts created by combining multiple \u0060Chart.StackedBar\u0060 charts: \n\nBasically those charts are just normal bar/column charts with the Layout property \u0060BarMode\u0060 set to \u0060Stack\u0060. You can do this yourself by changing the Chart layout.\n\n### Stacked bar Charts\n*)\n\nlet stackedBar =\n    [ Chart.StackedBar(values = values, Keys = keys, Name = \u0022old\u0022)\n      Chart.StackedBar(values = [ 8; 21; 13 ], Keys = keys, Name = \u0022new\u0022) ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nstackedBar\n#endif // IPYNB\n\n(***hide***)\nstackedBar |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(*\n### Stacked bar Charts\n*)\n\nlet stackedColumn =\n    [ Chart.StackedColumn(values = values, Keys = keys, Name = \u0022old\u0022)\n      Chart.StackedColumn(values = [ 8; 21; 13 ], Keys = keys, Name = \u0022new\u0022) ]\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\nstackedColumn\n#endif // IPYNB\n\n(***hide***)\nstackedColumn |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/simple-charts/bubble-charts.html","title":"Bubble charts","content":"(**\n---\ntitle: Bubble charts\ncategory: Simple Charts\ncategoryindex: 3\nindex: 5\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Bubble charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create bubble charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\n\nopen Plotly.NET\n\nlet x = [ 2; 4; 6 ]\nlet y = [ 4; 1; 6 ]\nlet size = [ 19; 26; 55 ]\n\n(**\n\nA bubble chart is a type of chart that displays three dimensions of data. Each entity with its triplet (x, y, size) \nof associated data is plotted as a disk. The first two values determine the disk\u0027s xy location and the \nthird its size.\n\n*)\n\nlet bubble1 = Chart.Bubble(x = x, y = y, sizes = size)\n\n(*** condition: ipynb ***)\n#if IPYNB\nbubble1\n#endif // IPYNB\n\n(***hide***)\nbubble1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/simple-charts/heatmaps.html","title":"Heatmaps","content":"(**\n---\ntitle: Heatmaps\ncategory: Simple Charts\ncategoryindex: 3\nindex: 8\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Heatmaps\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create heatmap charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\nlet matrix =\n    [ [ 1.; 1.5; 0.7; 2.7 ]; [ 2.; 0.5; 1.2; 1.4 ]; [ 0.1; 2.6; 2.4; 3.0 ] ]\n\nlet rownames = [ \u0022p3\u0022; \u0022p2\u0022; \u0022p1\u0022 ]\nlet colnames = [ \u0022Tp0\u0022; \u0022Tp30\u0022; \u0022Tp60\u0022; \u0022Tp160\u0022 ]\n\n(**\n\nA heatmap chart can be created using the \u0060Chart.Heatmap\u0060 functions.\n\nWhen creating heatmap charts, it is usually desirable to provide the values in matrix form, rownames and colnames.\n\nA heatmap needs at least 2 dimensional data that represents the z dimension. the X and Y dimension sizes can be inferred from the z data:\n*)\n\n// Generating the Heatmap with only z Data\nlet heat1 = Chart.Heatmap(zData = matrix)\n\n(*** condition: ipynb ***)\n#if IPYNB\nheat1\n#endif // IPYNB\n\n(***hide***)\nheat1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Inverting the Y Axis\n\nPer default, the y axis starts at the origin of the X/Y plane. \nIf it is however desired to represent a 2D matrix exactly how it is notated, invert the YAxis by setting \u0060ReverseYAxis\u0060.\n*)\n\n// Addning row/column names and inverting the Y axis:\nlet heat2 =\n    Chart.Heatmap(zData = matrix, colNames = colnames, rowNames = rownames, ReverseYAxis = true)\n\n(*** condition: ipynb ***)\n#if IPYNB\nheat2\n#endif // IPYNB\n\n(***hide***)\nheat2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Styling Colorbars and using custom color scales\n\nThe colorscale can be set via the \u0060ColorScale\u0060 argument.\nAll charts that contain colorbars can be styled by the \u0060Chart.withColorBarStyle\u0060 function.\nHere is an example that adds a title to the colorbar:\n*)\n\nlet heat3 =\n    Chart.Heatmap(zData = matrix, ColorScale = StyleParam.Colorscale.Viridis)\n    |\u003E Chart.withColorBarStyle (TitleText = \u0022Im the ColorBar\u0022)\n\n(*** condition: ipynb ***)\n#if IPYNB\nheat3\n#endif // IPYNB\n\n(***hide***)\nheat3 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n(**\n## Annotated Heatmaps\n \nuse \u0060Chart.AnnotatedHeatmap\u0060 to add an annotation text to each z value:\n*)\n\nlet heat4 =\n    Chart.AnnotatedHeatmap(\n        zData = [ [ 1..5 ]; [ 6..10 ]; [ 11..15 ] ],\n        annotationText = [ [ \u00221,1\u0022; \u00221,2\u0022; \u00221,3\u0022 ]; [ \u00222,1\u0022; \u00222,2\u0022; \u00222,3\u0022 ]; [ \u00223,1\u0022; \u00223,2\u0022; \u00223,3\u0022 ] ],\n        X = [ \u0022C1\u0022; \u0022C2\u0022; \u0022C3\u0022 ],\n        Y = [ \u0022R1\u0022; \u0022R2\u0022; \u0022R3\u0022 ],\n        ReverseYAxis = true\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nheat4\n#endif // IPYNB\n\n(***hide***)\nheat4 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/simple-charts/images.html","title":"Images","content":"(**\n---\ntitle: Images\ncategory: Simple Charts\ncategoryindex: 3\nindex: 9\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Images\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create image charts in F#.\n\nThere are multiple ways of generating image charts:\n - From 3 Dimensional color collections, where the inner arrays contain 3 (color dimensions without alpha channel) or 4 (color dimensions and alpha channel) values. The color model can be set separately as shown below.\n - From a 2 dimensional collection Plotly.NETs \u0060ARGB\u0060 type that represents rgba values\n - From a base64 encoded image data source\n\n## Creating Image charts from raw color arrays\n*)\n\n// 3d collection containing color values\nopen Plotly.NET\n\nlet colors =\n    [ [ [ 0; 0; 255 ]; [ 255; 255; 0 ]; [ 0; 0; 255 ] ]\n      [ [ 255; 0; 0 ]; [ 255; 0; 255 ]; [ 255; 0; 255 ] ]\n      [ [ 0; 255; 0 ]; [ 0; 255; 255 ]; [ 255; 0; 0 ] ] ]\n\nlet imageRaw =\n    Chart.Image(Z = colors)\n    |\u003E Chart.withTitle \u0022Image chart from raw color component arrays\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\nimageRaw\n#endif // IPYNB\n\n(***hide***)\nimageRaw |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nTo change the color model to HSL for example, add the \u0060ColorModel\u0060 argument:\n*)\n\nlet imageRawHSL =\n    Chart.Image(Z = colors, ColorModel = StyleParam.ColorModel.HSL)\n    |\u003E Chart.withTitle \u0022HSL color model\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\nimageRawHSL\n#endif // IPYNB\n\n(***hide***)\nimageRawHSL |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Creating Image charts from ARGB arrays\n\nNote that this way of creating image charts uses the RGBA color model.\n*)\n\nlet argbs =\n    [ [ ColorKeyword.AliceBlue; ColorKeyword.CornSilk; ColorKeyword.LavenderBlush ]\n      |\u003E List.map ARGB.fromKeyword\n      [ ColorKeyword.DarkGray; ColorKeyword.Snow; ColorKeyword.MidnightBlue ]\n      |\u003E List.map ARGB.fromKeyword\n      [ ColorKeyword.LightSteelBlue\n        ColorKeyword.DarkKhaki\n        ColorKeyword.LightAkyBlue ]\n      |\u003E List.map ARGB.fromKeyword ]\n\nlet imageARGB = Chart.Image(z = argbs) |\u003E Chart.withTitle \u0022ARGB image chart\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\nimageARGB\n#endif // IPYNB\n\n(***hide***)\nimageARGB |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Creating Image charts from base64 encoded images\n*)\nopen System\nopen System.IO\n\nlet imageSource = $@\u0022{__SOURCE_DIRECTORY__}/../img/logo.png\u0022\n\nlet base64String = imageSource |\u003E File.ReadAllBytes |\u003E System.Convert.ToBase64String\n\nlet logoImage =\n    Chart.Image(Source = ($\u0022data:image/jpg;base64,{base64String}\u0022))\n    |\u003E Chart.withTitle \u0022This is Plotly.NET:\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\nlogoImage\n#endif // IPYNB\n\n(***hide***)\nlogoImage |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/simple-charts/line-scatter-plots.html","title":"Line and scatter plots","content":"(**\n---\ntitle: Line and scatter plots\ncategory: Simple Charts\ncategoryindex: 3\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Line and scatter plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create line and point charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\nlet x = [ 1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10. ]\nlet y = [ 2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1. ]\n\n(**\n\nA line or a point chart can be created using the \u0060Chart.Line\u0060 and \u0060Chart.Point\u0060 functions. \n\n## Chart.Line with LineStyle\n\nThe following example generates a line Plot containing X and Y values and applies a line style to it.\n*)\n\nlet line1 =\n    Chart.Line(x = x, y = y, Name = \u0022line\u0022, ShowMarkers = true, MarkerSymbol = StyleParam.MarkerSymbol.Square)\n    |\u003E Chart.withLineStyle (Width = 2., Dash = StyleParam.DrawingStyle.Dot)\n\n(*** condition: ipynb ***)\n#if IPYNB\nline1\n#endif // IPYNB\n\n(***hide***)\nline1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \n\n## Pipelining into Chart.Line\nThe following example calls the \u0060Chart.Line\u0060 method with a list of X and Y values as tuples. The snippet generates\nvalues of a simple function, f(x)=x^2. The values of the function are generated for X ranging from 1 to 100. The chart generated is \nshown below.\n*)\n\nlet line2 =\n    // Drawing graph of a \u0027square\u0027 function\n    Chart.Line(xy = [ for x in 1.0 .. 100.0 -\u003E (x, x ** 2.0) ])\n\n\n(*** condition: ipynb ***)\n#if IPYNB\nline2\n#endif // IPYNB\n\n(***hide***)\nline2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Spline charts\n\nSpline charts interpolate the curves between single points of \nthe chart to generate a smoother version of the line chart.\n*)\n\nlet spline1 = Chart.Spline(x = x, y = y, Name = \u0022spline\u0022)\n\n(*** condition: ipynb ***)\n#if IPYNB\nspline1\n#endif // IPYNB\n\n(***hide***)\nspline1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\nlet spline2 = Chart.Spline(x = x, y = y, Name = \u0022spline\u0022, Smoothing = 0.4)\n\n(*** condition: ipynb ***)\n#if IPYNB\nspline2\n#endif // IPYNB\n\n(***hide***)\nspline2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(** \n## Point chart with text label\n\nThe following example calls the \u0060Chart.Point\u0060 function to generate a scatter Plot containing X and Y values.\nAddtionally, text labels are added . \n\nIf \u0060TextPosition\u0060 is set the labels are drawn otherwise only shown when hovering over the points.\n*)\n\n\nlet labels = [ \u0022a\u0022; \u0022b\u0022; \u0022c\u0022; \u0022d\u0022; \u0022e\u0022; \u0022f\u0022; \u0022g\u0022; \u0022h\u0022; \u0022i\u0022; \u0022j\u0022 ]\n\nlet pointsWithLabels =\n    Chart.Point(x = x, y = y, Name = \u0022points\u0022, MultiText = labels, TextPosition = StyleParam.TextPosition.TopRight)\n\n(*** condition: ipynb ***)\n#if IPYNB\npointsWithLabels\n#endif // IPYNB\n\n(***hide***)\npointsWithLabels |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/simple-charts/multicategory.html","title":"Plotting multicategory data","content":"(**\n---\ntitle: Plotting multicategory data\ncategory: Simple Charts\ncategoryindex: 3\nindex: 10\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Plotting multicategory data\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to plot multicategory data on 2D charts in F#.\n\nSince Plotly.NET v4, multicategory data are supported on the following 2D charts:\n\n - [Chart.Scatter](#Scatter)\n - [Chart.Bar and Chart.Column](#Bar-and-Column)\n - [Chart.Histogram](#Histogram)\n - [Chart.Histogram2D](#Histogram2D)\n - [Chart.BoxPlot and Chart.Violin](#BoxPlot-and-Violin)\n - [Chart.Histogram2DContour](#Histogram2DContour)\n - [Chart.Heatmap and Chart.AnnotatedHeatmap](#Heatmap-and-AnnotatedHeatmap)\n - [Chart.Contour](#Contour)\n - [Chart.OHLC and Chart.Candlestick](#OHLC-and-Candlestick)\n\n## Scatter\n\nNote that this does not apply to all derived Charts such as \u0060Chart.Point\u0060, \u0060Chart.Line\u0060, \u0060Chart.Bubble\u0060, \u0060Chart.Spline\u0060 etc. (to avoid creating dozens ov overloads for scatter derived traces)\n\nYou can however design those yourself using Chart.Scatter, here are some examples:\n*)\nopen Plotly.NET\nopen System\n\nlet multicategoryScatterAndDerived = \n    [\n        Chart.Scatter(\n            Name = \u0022Point\u0022,\n            Mode = StyleParam.Mode.Markers, // creates multicategory point chart\n            MultiX = [[\u0022A\u0022;\u0022A\u0022;\u0022B\u0022;\u0022B\u0022];[\u0022AA\u0022; \u0022AB\u0022; \u0022BA\u0022; \u0022BB\u0022]],\n            MultiY = [\n                [\u0022A\u0022;\u0022A\u0022;\u0022B\u0022;\u0022B\u0022] |\u003E Seq.map (fun x -\u003E x :\u003E IConvertible) // you can use different IConvertibles if you cast here\n                [1; 2; -1; -2] |\u003E Seq.map (fun x -\u003E x :\u003E IConvertible)\n            ]\n        )\n        Chart.Scatter(\n            Name = \u0022Line\u0022,\n            Mode = StyleParam.Mode.Lines, // creates multicategory line chart\n            MultiX = [[\u0022C\u0022;\u0022C\u0022;\u0022D\u0022;\u0022D\u0022];[\u0022CA\u0022; \u0022CB\u0022; \u0022DA\u0022; \u0022DB\u0022]],\n            MultiY = [\n                [\u0022A\u0022;\u0022A\u0022;\u0022B\u0022;\u0022B\u0022] |\u003E Seq.map (fun x -\u003E x :\u003E IConvertible) // you can use different IConvertibles if you cast here\n                [1; 2; -1; -2] |\u003E Seq.map (fun x -\u003E x :\u003E IConvertible)\n            ]\n        )\n        Chart.Scatter(\n            Name = \u0022SplineArea\u0022,\n            Mode = StyleParam.Mode.Lines, // creates multicategory splinearea chart\n            MultiX = [[\u0022E\u0022;\u0022E\u0022;\u0022F\u0022;\u0022F\u0022];[\u0022EA\u0022; \u0022EB\u0022; \u0022FA\u0022; \u0022FB\u0022]],\n            MultiY = [\n                [\u0022A\u0022;\u0022A\u0022;\u0022B\u0022;\u0022B\u0022] |\u003E Seq.map (fun x -\u003E x :\u003E IConvertible) // you can use different IConvertibles if you cast here\n                [1; 2; -1; -2] |\u003E Seq.map (fun x -\u003E x :\u003E IConvertible)\n            ],\n            Line = Line.init(Shape = StyleParam.Shape.Spline),\n            Fill = StyleParam.Fill.ToZero_y\n        )\n    ]\n    |\u003E Chart.combine\n    |\u003E Chart.withSize(Width = 1000)\n\n(*** condition: ipynb ***)\n#if IPYNB\nmulticategoryScatterAndDerived\n#endif // IPYNB\n\n(***hide***)\nmulticategoryScatterAndDerived |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Bar and Column\n*)\nlet multiCategoryBarColumn =\n    [\n        Chart.Bar(\n            values = [1; 2; -1; -2],\n            MultiKeys = [[\u0022A\u0022;\u0022A\u0022;\u0022B\u0022;\u0022B\u0022];[\u0022AA\u0022; \u0022AB\u0022; \u0022BA\u0022; \u0022BB\u0022]],\n            Name = \u0022Bar\u0022\n        )\n        Chart.Column(\n            values = [1; 2; -1; -2],\n            MultiKeys = [[\u0022A\u0022;\u0022A\u0022;\u0022B\u0022;\u0022B\u0022];[\u0022AA\u0022; \u0022AB\u0022; \u0022BA\u0022; \u0022BB\u0022]],\n            Name = \u0022Column\u0022\n        )\n    ]\n    |\u003E Chart.Grid (nRows = 1, nCols = 2)\n    |\u003E Chart.withSize(Width = 1000)\n\n(*** condition: ipynb ***)\n#if IPYNB\nmultiCategoryBarColumn\n#endif // IPYNB\n\n(***hide***)\nmultiCategoryBarColumn |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Histogram\n*)\n\nlet multicategoryHistogram =\n    Chart.Histogram(\n        MultiX = [[\u0022A\u0022;\u0022A\u0022;\u0022A\u0022;\u0022B\u0022;\u0022B\u0022];[\u0022AA\u0022; \u0022AA\u0022; \u0022AB\u0022; \u0022BA\u0022; \u0022BB\u0022]]\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nmulticategoryHistogram\n#endif // IPYNB\n\n(***hide***)\nmulticategoryHistogram |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Histogram2D\n*)\n\nlet multicategoryHistogram2D =\n    Chart.Histogram2D(\n        MultiX = [[\u0022A\u0022;\u0022A\u0022;\u0022A\u0022;\u0022B\u0022;\u0022B\u0022];[\u0022AA\u0022; \u0022AA\u0022; \u0022AB\u0022; \u0022BA\u0022; \u0022BB\u0022]],\n        MultiY = [[\u0022A\u0022;\u0022A\u0022;\u0022A\u0022;\u0022B\u0022;\u0022B\u0022];[\u0022AA\u0022; \u0022AA\u0022; \u0022AB\u0022; \u0022BA\u0022; \u0022BB\u0022]]\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nmulticategoryHistogram2D\n#endif // IPYNB\n\n(***hide***)\nmulticategoryHistogram2D |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## BoxPlot and Violin\n*)\n\nlet multicategoryBoxPlotViolin =\n    [\n        [\n            Chart.BoxPlot(\n                Name = \u0022BoxPlot 1\u0022,\n                Y = [1;1;2;3;4;3;2],\n                MultiX = [[\u0022A\u0022; \u0022A\u0022; \u0022A\u0022; \u0022A\u0022; \u0022A\u0022; \u0022A\u0022; \u0022A\u0022];[\u0022AA\u0022; \u0022AA\u0022; \u0022AA\u0022; \u0022AA\u0022; \u0022AA\u0022; \u0022AA\u0022; \u0022AA\u0022]]\n            )\n            Chart.BoxPlot(\n                Name = \u0022BoxPlot 2\u0022,\n                Y = [1;1;2;3;4;3;2],\n                MultiX = [[\u0022A\u0022; \u0022A\u0022; \u0022A\u0022; \u0022A\u0022; \u0022A\u0022; \u0022A\u0022; \u0022A\u0022];[\u0022AB\u0022; \u0022AB\u0022; \u0022AB\u0022; \u0022AB\u0022; \u0022AB\u0022; \u0022AB\u0022; \u0022AB\u0022]]\n            )            \n            Chart.BoxPlot(\n                Name = \u0022BoxPlot 3\u0022,\n                Y = [1;1;2;3;4;3;2],\n                MultiX = [[\u0022B\u0022; \u0022B\u0022; \u0022B\u0022; \u0022B\u0022; \u0022B\u0022; \u0022B\u0022; \u0022B\u0022];[\u0022BB\u0022; \u0022BB\u0022; \u0022BB\u0022; \u0022BB\u0022; \u0022BB\u0022; \u0022BB\u0022; \u0022BB\u0022]]\n            )\n        ]\n        |\u003E Chart.combine\n        [\n            Chart.Violin(\n                Name = \u0022Violin 1\u0022,\n                Y = [1;1;2;3;4;3;2],\n                MultiX = [[\u0022A\u0022; \u0022A\u0022; \u0022A\u0022; \u0022A\u0022; \u0022A\u0022; \u0022A\u0022; \u0022A\u0022];[\u0022AA\u0022; \u0022AA\u0022; \u0022AA\u0022; \u0022AA\u0022; \u0022AA\u0022; \u0022AA\u0022; \u0022AA\u0022]]\n            )\n            Chart.Violin(\n                Name = \u0022Violin 2\u0022,\n                Y = [1;1;2;3;4;3;2],\n                MultiX = [[\u0022A\u0022; \u0022A\u0022; \u0022A\u0022; \u0022A\u0022; \u0022A\u0022; \u0022A\u0022; \u0022A\u0022];[\u0022AB\u0022; \u0022AB\u0022; \u0022AB\u0022; \u0022AB\u0022; \u0022AB\u0022; \u0022AB\u0022; \u0022AB\u0022]]\n            )\n            Chart.Violin(\n                Name = \u0022Violin 3\u0022,\n                Y = [1;1;2;3;4;3;2],\n                MultiX = [[\u0022B\u0022; \u0022B\u0022; \u0022B\u0022; \u0022B\u0022; \u0022B\u0022; \u0022B\u0022; \u0022B\u0022];[\u0022BB\u0022; \u0022BB\u0022; \u0022BB\u0022; \u0022BB\u0022; \u0022BB\u0022; \u0022BB\u0022; \u0022BB\u0022]]\n            )\n        ]\n        |\u003E Chart.combine\n    ]\n    |\u003E Chart.Grid (nRows = 1, nCols = 2)\n    |\u003E Chart.withSize(Width = 1000)\n\n(*** condition: ipynb ***)\n#if IPYNB\nmulticategoryBoxPlotViolin\n#endif // IPYNB\n\n(***hide***)\nmulticategoryBoxPlotViolin |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Histogram2DContour\n*)\n\nlet multicategoryHistogram2DContour =\n    Chart.Histogram2DContour(\n        MultiX = [[\u0022A\u0022;\u0022A\u0022;\u0022A\u0022;\u0022B\u0022;\u0022B\u0022];[\u0022AA\u0022; \u0022AA\u0022; \u0022AB\u0022; \u0022BA\u0022; \u0022BB\u0022]],\n        MultiY = [[\u0022A\u0022;\u0022A\u0022;\u0022A\u0022;\u0022B\u0022;\u0022B\u0022];[\u0022AA\u0022; \u0022AA\u0022; \u0022AB\u0022; \u0022BA\u0022; \u0022BB\u0022]]\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nmulticategoryHistogram2DContour\n#endif // IPYNB\n\n(***hide***)\nmulticategoryHistogram2DContour |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Heatmap and AnnotatedHeatmap\n*)\n\nlet multicategoryHeatmap = \n    Chart.Heatmap(\n        zData = [\n            [1;2;3]\n            [2;3;1]\n            [3;1;2]\n        ],\n        MultiX = [[\u0022A\u0022;\u0022A\u0022;\u0022B\u0022];[\u0022AA\u0022;\u0022AB\u0022;\u0022BA\u0022]],\n        MultiY = [[\u0022A\u0022;\u0022A\u0022;\u0022B\u0022];[\u0022AA\u0022;\u0022AB\u0022;\u0022BA\u0022]]\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nmulticategoryHeatmap\n#endif // IPYNB\n\n(***hide***)\nmulticategoryHeatmap |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\nlet multicategoryAnnotatedHeatmap = \n    Chart.AnnotatedHeatmap(\n        zData = [\n            [1;2;3]\n            [2;3;1]\n            [3;1;2]\n        ],\n        annotationText = [\n            [\u0022A;AA x A;AA\u0022;\u0022A;AA x A;AB\u0022;\u0022A;AA x B;BA\u0022]\n            [\u0022A;AB x A;AA\u0022;\u0022A;AB x A;AB\u0022;\u0022A;AB x B;BA\u0022]\n            [\u0022B;BA x A;AA\u0022;\u0022B;BA x A;AB\u0022;\u0022B;BA x B;BA\u0022]\n        ],\n        MultiX = [[\u0022A\u0022;\u0022A\u0022;\u0022B\u0022];[\u0022AA\u0022;\u0022AB\u0022;\u0022BA\u0022]],\n        MultiY = [[\u0022A\u0022;\u0022A\u0022;\u0022B\u0022];[\u0022AA\u0022;\u0022AB\u0022;\u0022BA\u0022]]\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nmulticategoryAnnotatedHeatmap\n#endif // IPYNB\n\n(***hide***)\nmulticategoryAnnotatedHeatmap |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Contour\n*)\n\nlet multicategoryContour =\n    Chart.Contour(\n        zData = [\n            [1;2;3]\n            [2;3;1]\n            [3;1;2]\n        ],\n        MultiX = [[\u0022A\u0022;\u0022A\u0022;\u0022B\u0022];[\u0022AA\u0022;\u0022AB\u0022;\u0022BA\u0022]],\n        MultiY = [[\u0022A\u0022;\u0022A\u0022;\u0022B\u0022];[\u0022AA\u0022;\u0022AB\u0022;\u0022BA\u0022]]\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nmulticategoryContour\n#endif // IPYNB\n\n(***hide***)\nmulticategoryContour |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## OHLC and Candlestick\n*)\n\nlet multicategoryFinance =\n    [\n        Chart.OHLC(\n            \u0060\u0060open\u0060\u0060 = [1;2],\n            high = [3;4],\n            low = [0;1],\n            close = [0.5;1.],\n            MultiX = [[\u0022A\u0022;\u0022A\u0022];[\u0022AA\u0022;\u0022AB\u0022]],\n            Name = \u0022OHLC\u0022\n        )\n        Chart.Candlestick(\n            \u0060\u0060open\u0060\u0060 = [1;2],\n            high = [3;4],\n            low = [0;1],\n            close = [0.5;1.],\n            MultiX = [[\u0022A\u0022;\u0022A\u0022];[\u0022AA\u0022;\u0022AB\u0022]],\n            Name = \u0022Candlestick\u0022\n        )\n    ]\n    |\u003E Chart.Grid (nRows = 1, nCols = 2)\n    |\u003E Chart.withSize(Width = 1000)\n\n(*** condition: ipynb ***)\n#if IPYNB\nmulticategoryFinance\n#endif // IPYNB\n\n(***hide***)\nmulticategoryFinance |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/simple-charts/pie-doughnut-charts.html","title":"Pie and doughnut Charts","content":"(**\n---\ntitle: Pie and doughnut Charts\ncategory: Simple Charts\ncategoryindex: 3\nindex: 6\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Pie and doughnut Charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create pie and doughnut charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\nopen Plotly.NET\n\nlet values = [ 19; 26; 55 ]\nlet labels = [ \u0022Residential\u0022; \u0022Non-Residential\u0022; \u0022Utility\u0022 ]\n\n(**\n\nA pie, doughnut, or sunburst chart can be created using the \u0060Chart.Pie\u0060, \u0060Chart.Doughnut\u0060, and \u0060Chart.Sunburst\u0060 functions.\nWhen creating pie charts, it is usually desirable to provide both labels and values.\n\n*)\n\nlet pie1 = Chart.Pie(values = values, Labels = labels)\n\n(*** condition: ipynb ***)\n#if IPYNB\npie1\n#endif // IPYNB\n\n(***hide***)\npie1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\nlet doughnut1 =\n    Chart.Doughnut(values = values, Labels = labels, Hole = 0.3, MultiText = labels)\n\n(*** condition: ipynb ***)\n#if IPYNB\ndoughnut1\n#endif // IPYNB\n\n(***hide***)\ndoughnut1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## More styled example\n\nThis example shows the usage of some of the styling possibility using \u0060Chart.Pie\u0060.\nFor even more styling control, use the respective TraceStyle function \u0060TraceDomainStyle.Pie\u0060\n*)\n\n\nlet pieStyled =\n\n    let values = [ 19; 26; 55 ]\n    let labels = [ \u0022Residential\u0022; \u0022Non-Residential\u0022; \u0022Utility\u0022 ]\n\n    Chart.Pie(\n        values = values,\n        Labels = labels,\n        SectionColors = [ Color.fromKeyword Aqua; Color.fromKeyword Salmon; Color.fromKeyword Tan ],\n        SectionOutlineColor = Color.fromKeyword Black,\n        SectionOutlineWidth = 2.,\n        MultiText = [ \u0022Some\u0022; \u0022More\u0022; \u0022Stuff\u0022 ],\n        MultiTextPosition =\n            [ StyleParam.TextPosition.Inside\n              StyleParam.TextPosition.Outside\n              StyleParam.TextPosition.Inside ],\n        Rotation = 45.,\n        MultiPull = [ 0.; 0.3; 0. ]\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\npieStyled\n#endif // IPYNB\n\n(***hide***)\npieStyled |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/simple-charts/range-plots.html","title":"Range plots","content":"(**\n---\ntitle: Range plots\ncategory: Simple Charts\ncategoryindex: 3\nindex: 4\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Range plots\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create Range plot charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\nlet rnd = System.Random()\n\nlet x = [ 1.; 2.; 3.; 4.; 5.; 6.; 7.; 8.; 9.; 10. ]\nlet y = [ 2.; 1.5; 5.; 1.5; 3.; 2.5; 2.5; 1.5; 3.5; 1. ]\n\nlet yUpper = y |\u003E List.map (fun v -\u003E v \u002B rnd.NextDouble())\nlet yLower = y |\u003E List.map (fun v -\u003E v - rnd.NextDouble())\n\n(**\nA range plot is commonly used to indicate some property of data that lies in a certain range around a central value,\nfor example the range of all predictions from different models, scattering around a central tendency.\n*)\n\nlet range1 =\n    Chart.Range(\n        x = x,\n        y = y,\n        upper = yUpper,\n        lower = yLower,\n        mode = StyleParam.Mode.Lines_Markers,\n        MarkerColor = Color.fromString \u0022grey\u0022,\n        RangeColor = Color.fromString \u0022lightblue\u0022\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nrange1\n#endif // IPYNB\n\n(***hide***)\nrange1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## More styled example\n\nThis example shows the usage of some of the styling possibility using \u0060Chart.Range\u0060.\n*)\nopen Plotly.NET.TraceObjects\n\nlet rangeStyled =\n    Chart.Range(\n        x = [ 1; 2; 3; 4; 5 ],\n        y = [ 2; 2; 3; 4; 6 ],\n        upper = [ 4; 6; 7; 5; 7 ],\n        lower = [ 0; 0; 0; 1; 5 ],\n        mode = StyleParam.Mode.Lines_Markers,\n        TextPosition = StyleParam.TextPosition.TopCenter,\n        RangeColor = Color.fromString \u0022rgba(0, 204, 150, 0.2)\u0022,\n        LowerLine = Line.init (Width = 2., Color = Color.fromString \u0022rgba(0, 204, 150, 0.4)\u0022),\n        LowerMarker = Marker.init (Color = Color.fromString \u0022rgba(0, 204, 150, 0.6)\u0022),\n        UpperLine = Line.init (Width = 2., Color = Color.fromString \u0022rgba(0, 204, 150, 0.4)\u0022),\n        UpperMarker = Marker.init (Color = Color.fromString \u0022rgba(0, 204, 150, 0.6)\u0022),\n        MultiText = [ \u0022Mid1\u0022; \u0022Mid2\u0022; \u0022Mid3\u0022; \u0022Mid4\u0022; \u0022Mid5\u0022 ],\n        MultiLowerText = [ \u0022Lower1\u0022; \u0022Lower2\u0022; \u0022Lower3\u0022; \u0022Lower4\u0022; \u0022Lower5\u0022 ],\n        MultiUpperText = [ \u0022Upper1\u0022; \u0022Upper2\u0022; \u0022Upper3\u0022; \u0022Upper4\u0022; \u0022Upper5\u0022 ],\n        ShowLegend = true\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nrangeStyled\n#endif // IPYNB\n\n(***hide***)\nrangeStyled |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/simple-charts/table.html","title":"Tables","content":"(**\n---\ntitle: Tables\ncategory: Simple Charts\ncategoryindex: 3\nindex: 7\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Tables\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\nThis example shows how to create tables in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\nopen Plotly.NET.StyleParam\n\n\nlet table1 =\n    Chart.Table(\n        headerValues = [ \u0022\u003Cb\u003ERowIndex\u003C/b\u003E\u0022; \u0022A\u0022; \u0022simple\u0022; \u0022table\u0022 ],\n        cellsValues = [ [ \u00220\u0022; \u0022I\u0022; \u0022am\u0022; \u0022a\u0022 ]; [ \u00221\u0022; \u0022little\u0022; \u0022example\u0022; \u0022!\u0022 ] ]\n    )\n\n\n\n(*** condition: ipynb ***)\n#if IPYNB\ntable1\n#endif // IPYNB\n\n(***hide***)\ntable1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nA little bit of styling:\n*)\n\nlet table2 =\n    let header = [ \u0022\u003Cb\u003ERowIndex\u003C/b\u003E\u0022; \u0022A\u0022; \u0022simple\u0022; \u0022table\u0022 ]\n    let rows = [ [ \u00220\u0022; \u0022I\u0022; \u0022am\u0022; \u0022a\u0022 ]; [ \u00221\u0022; \u0022little\u0022; \u0022example\u0022; \u0022!\u0022 ] ]\n\n    Chart.Table(\n        headerValues = header,\n        cellsValues = rows,\n        HeaderAlign = StyleParam.HorizontalAlign.Center,\n        CellsMultiAlign =\n            [ StyleParam.HorizontalAlign.Left\n              StyleParam.HorizontalAlign.Center\n              StyleParam.HorizontalAlign.Right ],\n        HeaderFillColor = Color.fromString \u0022#45546a\u0022,\n        CellsFillColor =\n            Color.fromColors\n                [ Color.fromString \u0022#deebf7\u0022\n                  Color.fromString \u0022lightgrey\u0022\n                  Color.fromString \u0022#deebf7\u0022\n                  Color.fromString \u0022lightgrey\u0022 ],\n        HeaderHeight = 30,\n        HeaderOutlineColor = Color.fromString \u0022black\u0022,\n        HeaderOutlineWidth = 2.,\n        MultiColumnWidth = [ 70.; 50.; 100.; 70. ],\n        ColumnOrder = [ 1; 2; 3; 4 ]\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\ntable2\n#endif // IPYNB\n\n(***hide***)\ntable2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nValue dependent cell coloring:\n*)\n\nlet table3 =\n    let header2 = [ \u0022Identifier\u0022; \u0022T0\u0022; \u0022T1\u0022; \u0022T2\u0022; \u0022T3\u0022 ]\n\n    let rowvalues =\n        [ [ 10001.; 0.2; 2.0; 4.0; 5.0 ]\n          [ 10002.; 2.1; 2.0; 1.8; 2.1 ]\n          [ 10003.; 4.5; 3.0; 2.0; 2.5 ]\n          [ 10004.; 0.0; 0.1; 0.3; 0.2 ]\n          [ 10005.; 1.0; 1.6; 1.8; 2.2 ]\n          [ 10006.; 1.0; 0.8; 1.5; 0.7 ]\n          [ 10007.; 2.0; 2.0; 2.1; 1.9 ] ]\n        |\u003E Seq.sortBy (fun x -\u003E x.[1])\n\n    //map color from value to hex representation\n    let mapColor min max value =\n        let proportion = (255. * (value - min) / (max - min)) |\u003E int\n        Color.fromRGB 255 (255 - proportion) proportion\n\n    //Assign a color to every cell seperately. Matrix must be transposed for correct orientation.\n    let cellcolor =\n        rowvalues\n        |\u003E Seq.map (fun row -\u003E\n            row\n            |\u003E Seq.mapi (fun index value -\u003E\n                if index = 0 then\n                    Color.fromString \u0022white\u0022\n                else\n                    mapColor 0. 5. value))\n        |\u003E Seq.transpose\n        |\u003E Seq.map Color.fromColors\n        |\u003E Color.fromColors\n\n    Chart.Table(headerValues = header2, cellsValues = rowvalues, CellsFillColor = cellcolor)\n\n(*** condition: ipynb ***)\n#if IPYNB\ntable3\n#endif // IPYNB\n\n(***hide***)\ntable3 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n(**\nSequence representation:\n\n*)\n\nlet table4 =\n    let sequence =\n        [ \u0022ATGAGACGTCGAGACTGATAGACGTCGATAGACGTCGATAGACCG\u0022\n          \u0022ATAGACTCGTGATAGACGTCGATAGACGTCGATAGAGTATAGACC\u0022\n          \u0022GTGATAGACGTCGAGAAGACGTCGATAGACGTCGATAGACGTCGA\u0022\n          \u0022TAGAGATAGACGTCGATAGACCGTATAGAAGACGTCGATAGATAG\u0022\n          \u0022ACGTCGATAGACCGTAGACGTCGATAGACGTCGATAGACCGT\u0022 ]\n        |\u003E String.concat \u0022\u0022\n\n    let elementsPerRow = 60\n\n    let headers =\n        [ 0..elementsPerRow ]\n        |\u003E Seq.map (fun x -\u003E if x % 10 = 0 \u0026\u0026 x \u003C\u003E 0 then \u0022|\u0022 else \u0022\u0022)\n\n    let cells =\n        sequence\n        |\u003E Seq.chunkBySize elementsPerRow\n        |\u003E Seq.mapi (fun i x -\u003E Seq.append [ string (i * elementsPerRow) ] (Seq.map string x))\n\n    let cellcolors =\n        cells\n        |\u003E Seq.map (fun row -\u003E\n            row\n            |\u003E Seq.map (fun element -\u003E\n                match element with\n                //colors taken from DRuMS\n                //(http://biomodel.uah.es/en/model4/dna/atgc.htm)\n                | \u0022A\u0022 -\u003E Color.fromString \u0022#5050FF\u0022\n                | \u0022T\u0022 -\u003E Color.fromString \u0022#E6E600\u0022\n                | \u0022G\u0022 -\u003E Color.fromString \u0022#00C000\u0022\n                | \u0022C\u0022 -\u003E Color.fromString \u0022#E00000\u0022\n                | \u0022U\u0022 -\u003E Color.fromString \u0022#B48100\u0022\n                | _ -\u003E Color.fromString \u0022white\u0022))\n        |\u003E Seq.transpose\n        |\u003E Seq.map (fun x -\u003E Seq.append x (seq [ Color.fromString \u0022white\u0022 ]))\n        |\u003E Seq.map Color.fromColors\n        |\u003E Color.fromColors\n\n    let line = Line.init (Width = 0., Color = Color.fromString \u0022white\u0022)\n    let chartwidth = 50 \u002B 10 * elementsPerRow\n\n    Chart.Table(\n        headerValues = headers,\n        cellsValues = cells,\n        CellsOutline = line,\n        HeaderOutline = line,\n        CellsHeight = 20,\n        MultiColumnWidth = [ 50.; 10. ],\n        CellsMultiAlign = [ StyleParam.HorizontalAlign.Right; StyleParam.HorizontalAlign.Center ],\n        CellsFillColor = cellcolors,\n        UseDefaults = false\n    )\n    |\u003E Chart.withSize (Width = chartwidth)\n    |\u003E Chart.withTitle \u0022Sequence A\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\ntable4\n#endif // IPYNB\n\n(***hide***)\ntable4 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/smith-charts/smith_line_scatter_plots.html","title":"Smith line and scatter plots","content":"(**\n---\ntitle: Smith line and scatter plots\ncategory: Smith Plots\ncategoryindex: 13\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Smith charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create smith charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\n// real coordinates\nlet real = [ 0.5; 1.; 2.; 3. ]\n\n// imaginary coordinates\nlet imaginary = [ 0.5; 1.; 2.; 3. ]\n\n(**\nThe Smith chart, invented by Phillip H. Smith (1905\uFFFD1987) and independently by Mizuhashi Tosaku, is a graphical calculator or nomogram designed for electrical and electronics engineers specializing in radio frequency (RF) engineering to assist in solving problems with transmission lines and matching circuits \n\nThe Smith chart is a mathematical transformation of the two-dimensional Cartesian complex plane. Complex numbers with positive real parts map inside the circle. Those with negative real parts map outside the circle. If we are dealing only with impedances with non-negative resistive components, our interest is focused on the area inside the circle.\n\n([Wikipedia](https://en.wikipedia.org/wiki/Smith_chart)).\n\nStill, you can plot any kind of imaginary numbers on this plane.\n\n## point smith charts\n\nuse \u0060Chart.PointSmith\u0060 to create a chart that displays points on a smith subplot:\n*)\n\nlet pointSmith = Chart.PointSmith(real, imaginary)\n(*** condition: ipynb ***)\n#if IPYNB\npointSmith\n#endif // IPYNB\n\n(***hide***)\npointSmith |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## line smith charts\n\nuse \u0060Chart.LineSmith\u0060 to create a plot that displays a line connecting the data on a smith subplot.\n\nThis example also changes the styles of the line.\n*)\n\nlet lineSmith =\n    Chart.LineSmith(\n        real = real,\n        imag = imaginary,\n        LineDash = StyleParam.DrawingStyle.DashDot,\n        LineColor = Color.fromKeyword Purple\n    )\n\n\n(*** condition: ipynb ***)\n#if IPYNB\nlineSmith\n#endif // IPYNB\n\n(***hide***)\nlineSmith |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## bubble smith charts\n\nuse \u0060Chart.BubbleSmith\u0060 to create a plot that displays datums on a smith subplot, with an additional 3rd dimension set as the marker size.\n\nAs for all other plots above, You can for example add labels to each datum:\n*)\n\nlet bubbleSmith =\n    Chart.BubbleSmith(\n        real = real,\n        imag = imaginary,\n        sizes = [ 10; 20; 30; 40 ],\n        MultiText = [ \u0022one\u0022; \u0022two\u0022; \u0022three\u0022; \u0022four\u0022; \u0022five\u0022; \u0022six\u0022; \u0022seven\u0022 ],\n        TextPosition = StyleParam.TextPosition.TopCenter\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nbubbleSmith\n#endif // IPYNB\n\n(***hide***)\nbubbleSmith |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/ternary-charts/styling_ternary_layouts.html","title":"Styling ternary layouts","content":"(**\n---\ntitle: Styling ternary layouts\ncategory: Ternary Plots\ncategoryindex: 11\nindex: 2\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(**\n# Styling ternary layouts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to style polar layouts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n*)\nopen Plotly.NET\n\n// a coordinates\nlet a = [ 1; 2; 3; 4; 5; 6; 7 ]\n\n// b coordinates\nlet b = a |\u003E List.rev\n\n//c\nlet c = [ 2; 2; 2; 2; 2; 2; 2 ]\n\n(**\nConsider this combined ternary chart:\n*)\n\nlet combinedTernary =\n    [ Chart.PointTernary(A = a, B = b, C = c)\n      Chart.LineTernary(A = a, C = c, Sum = 10) ]\n\n    |\u003E Chart.combine\n\n(*** condition: ipynb ***)\n#if IPYNB\ncombinedTernary\n#endif // IPYNB\n\n(***hide***)\ncombinedTernary |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Styling the polar layout\n\nUse the \u0060Chart.withTernary\u0060 function and initialize a Ternary layout with the desired looks\n*)\nopen Plotly.NET.LayoutObjects\n\nlet styledTernary =\n    combinedTernary\n    |\u003E Chart.withTernary (\n        Ternary.init (\n            AAxis = LinearAxis.init (Title = Title.init (\u0022A\u0022), Color = Color.fromKeyword ColorKeyword.DarkOrchid),\n            BAxis = LinearAxis.init (Title = Title.init (\u0022B\u0022), Color = Color.fromKeyword ColorKeyword.DarkRed)\n        )\n    )\n\n(*** condition: ipynb ***)\n#if IPYNB\nstyledTernary\n#endif // IPYNB\n\n(***hide***)\nstyledTernary |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Styling A, B, and C Axes\n\nYou could pass these axes to \u0060Chart.withTernary\u0060 as above, but for the case where you want to specifically set one axis, there are the \u0060Chart.withAAxis\u0060, \u0060Chart.withBAxis\u0060, \u0060Chart.withCAxis\u0060 functions:\n*)\n\nlet styledTernary2 =\n    styledTernary\n    |\u003E Chart.withCAxis (LinearAxis.init (Title = Title.init (\u0022C\u0022), Color = Color.fromKeyword ColorKeyword.DarkCyan))\n\n\n\n(*** condition: ipynb ***)\n#if IPYNB\nstyledTernary2\n#endif // IPYNB\n\n(***hide***)\nstyledTernary2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"https://plotly.net/ternary-charts/ternary_line_scatter_plots.html","title":"Ternary line and scatter plots","content":"(**\n---\ntitle: Ternary line and scatter plots\ncategory: Ternary Plots\ncategoryindex: 11\nindex: 1\n---\n*)\n\n(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: Newtonsoft.JSON, 13.0.1\u0022\n#r \u0022nuget: DynamicObj, 2.0.0\u0022\n#r \u0022nuget: Giraffe.ViewEngine.StrongName, 2.0.0-alpha1\u0022\n#r \u0022../../src/Plotly.NET/bin/Release/netstandard2.0/Plotly.NET.dll\u0022\n\nPlotly.NET.Defaults.DefaultDisplayOptions \u003C-\n    Plotly.NET.DisplayOptions.init (PlotlyJSReference = Plotly.NET.PlotlyJSReference.NoReference)\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, {{fsdocs-package-version}}\u0022\n#r \u0022nuget: Plotly.NET.Interactive, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n(** \n# Ternary charts\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/plotly.net/gh-pages?urlpath=/tree/home/jovyan/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n*Summary:* This example shows how to create ternary charts in F#.\n\nlet\u0027s first create some data for the purpose of creating example charts:\n\n*)\n\nopen Plotly.NET\n\n// a coordinates\nlet a = [ 1; 2; 3; 4; 5; 6; 7 ]\n\n// b coordinates\nlet b = a |\u003E List.rev\n\n//c\nlet c = [ 2; 2; 2; 2; 2; 2; 2 ]\n\n\n(**\nA Ternary plot is a barycentric plot on three variables which sum to a constant.\n\nIt graphically depicts the ratios of the three variables as positions in an equilateral triangle. \n\nIt is used in physical chemistry, petrology, mineralogy, metallurgy, and other physical sciences to show the compositions of systems composed of three species. \nIn population genetics, a triangle plot of genotype frequencies is called a de Finetti diagram. In game theory, it is often called a simplex plot.\n\nTernary plots are tools for analyzing compositional data in the three-dimensional case.\n\n## Ternary point charts\n\nuse \u0060Chart.PointTernary\u0060 to create a ternary plot that displays points on a ternary coordinate system:\n*)\n\nlet ternaryPoint = Chart.PointTernary(A = a, B = b, C = c)\n(*** condition: ipynb ***)\n#if IPYNB\nternaryPoint\n#endif // IPYNB\n\n(***hide***)\nternaryPoint |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Ternary line charts\n\nuse \u0060Chart.LineTernary\u0060 to create a ternary plot that displays a line connecting input the data on a ternary coordinate system:\n\nAs values on ternary plots sum to a constant, you can omit one dimension ofd the data by providing that sum.\n\nYou can also for example change the line style using \u0060Chart.withLineStyle\u0060\n*)\n\nlet lineTernary =\n    Chart.LineTernary(A = a, B = b, Sum = 10)\n    |\u003E Chart.withLineStyle (Color = Color.fromString \u0022purple\u0022, Dash = StyleParam.DrawingStyle.DashDot)\n\n(*** condition: ipynb ***)\n#if IPYNB\nlineTernary\n#endif // IPYNB\n\n(***hide***)\nlineTernary |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"}]